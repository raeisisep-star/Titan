name: Smoke Tests (Post-Merge)

# Run comprehensive smoke tests after PRs are merged to main
on:
  push:
    branches:
      - main
    paths:
      - 'server-real-v3.js'
      - 'middleware/**'
      - 'validators/**'
      - 'migrations/**'
      - 'smoke-test-sprint3.js'
      - '.github/workflows/smoke-tests-post-merge.yml'

jobs:
  smoke-tests:
    name: Sprint 3 Integration Smoke Tests
    runs-on: ubuntu-latest
    
    # Isolated services - NO connection to production
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: titan_test
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_DB: titan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      NODE_ENV: test
      PORT: 5000
      
      # Database configuration
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: titan_test
      DB_PASSWORD: test_password_123
      DB_NAME: titan_test
      DATABASE_URL: postgresql://titan_test:test_password_123@localhost:5432/titan_test
      
      # Redis configuration
      REDIS_URL: redis://localhost:6379
      
      # JWT Secret
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      # CORS (not critical for tests)
      CORS_ORIGIN: '*'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup PostgreSQL schema
        run: |
          echo "Creating PostgreSQL schema for smoke tests..."
          PGPASSWORD=test_password_123 psql -h localhost -U titan_test -d titan_test <<'SQL'
          
          -- Create users table
          CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            username VARCHAR(50) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            role VARCHAR(20) DEFAULT 'user',
            is_active BOOLEAN DEFAULT true,
            is_verified BOOLEAN DEFAULT false,
            language VARCHAR(10) DEFAULT 'en',
            timezone VARCHAR(50) DEFAULT 'UTC',
            settings JSONB DEFAULT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            last_login_at TIMESTAMP WITH TIME ZONE
          );
          
          -- Create orders table (Sprint 3)
          CREATE TABLE IF NOT EXISTS orders (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            symbol VARCHAR(20) NOT NULL,
            side VARCHAR(10) NOT NULL CHECK (side IN ('buy', 'sell')),
            qty NUMERIC(20, 8) NOT NULL CHECK (qty > 0),
            price NUMERIC(20, 8),
            order_type VARCHAR(10) NOT NULL CHECK (order_type IN ('market', 'limit')),
            status VARCHAR(20) NOT NULL DEFAULT 'pending',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            cancelled_at TIMESTAMP WITH TIME ZONE
          );
          
          -- Create activities table (Sprint 3)
          CREATE TABLE IF NOT EXISTS activities (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            action VARCHAR(50) NOT NULL,
            category VARCHAR(20) NOT NULL DEFAULT 'trading',
            description TEXT,
            details JSONB DEFAULT '{}',
            order_id UUID REFERENCES orders(id) ON DELETE SET NULL,
            status VARCHAR(20) DEFAULT 'success',
            error_message TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
          
          -- Create indexes
          CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
          CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
          CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
          CREATE INDEX IF NOT EXISTS idx_orders_symbol ON orders(symbol);
          CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at DESC);
          CREATE INDEX IF NOT EXISTS idx_activities_user_id ON activities(user_id);
          CREATE INDEX IF NOT EXISTS idx_activities_created_at ON activities(created_at DESC);
          
          -- Insert test user
          INSERT INTO users (
            id,
            username,
            email,
            password_hash,
            first_name,
            last_name,
            role,
            is_active,
            is_verified
          ) VALUES (
            '07b18b25-fc41-4a4f-8774-d19bd15350b5',
            'smoke_test_user',
            'smoketest@titan.local',
            '$2b$10$dummyhash',
            'Smoke',
            'Test',
            'user',
            true,
            true
          ) ON CONFLICT (id) DO NOTHING;
          
          SQL
          
          echo "✅ PostgreSQL schema created successfully"
      
      - name: Start backend server
        run: |
          echo "Starting backend server..."
          nohup node server-real-v3.js > server.log 2>&1 &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          
          echo "Server PID: $SERVER_PID"
          echo "Waiting for server to be ready..."
          
          # Wait for health check
          for i in {1..30}; do
            if curl -s http://localhost:5000/health > /dev/null 2>&1; then
              echo "✅ Server is healthy!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start"
              tail -50 server.log
              exit 1
            fi
            
            sleep 1
          done
        timeout-minutes: 2
      
      - name: Run smoke tests
        run: |
          echo "Running comprehensive Sprint 3 smoke tests..."
          node smoke-test-sprint3.js
        timeout-minutes: 3
      
      - name: Stop backend server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            sleep 2
            kill -9 $(cat server.pid) 2>/dev/null || true
          fi
      
      - name: Upload server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-server-logs
          path: server.log
          retention-days: 7
      
      - name: Test summary
        if: always()
        run: |
          echo "=== Smoke Test Summary ==="
          echo "Environment: Isolated GitHub Actions runner"
          echo "PostgreSQL: Ephemeral container (localhost:5432)"
          echo "Redis: Ephemeral container (localhost:6379)"
          echo "Backend: Local server (localhost:5000)"
          echo ""
          echo "Expected: 36/36 tests passing (100%)"
          echo "Sprint 3 features: Order placement, cancellation, activities, portfolio"
