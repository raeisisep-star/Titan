# =============================================================================
# TITAN Trading System - Nginx Configuration with SSL Full (strict)
# =============================================================================
# 
# IMPORTANT NOTES:
# 1. This is a TEMPLATE - actual certificate paths must be configured
# 2. Certificates should be stored in /etc/ssl/cloudflare/ with permissions:
#    - origin-cert.pem: 644 (root:root)
#    - origin-key.pem: 600 (root:root)
# 3. NEVER commit actual certificates/keys to git repository
#
# Deployment Location: /etc/nginx/sites-available/titan
# Enable with: sudo ln -sf /etc/nginx/sites-available/titan /etc/nginx/sites-enabled/
# =============================================================================

# HTTP to HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name zala.ir www.zala.ir;
    
    # Security: Don't reveal server version
    server_tokens off;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name zala.ir www.zala.ir;

    # Root directory for static files
    root /tmp/webapp/Titan/public;
    index index.html;

    # Security: Don't reveal server version
    server_tokens off;

    # =============================================================================
    # SSL Configuration (Cloudflare Origin Certificate)
    # =============================================================================
    
    # Cloudflare Origin Certificate and Private Key
    # NOTE: These files must be created manually on the server
    # See: docs/ops/SSL_SETUP.md for installation instructions
    ssl_certificate     /etc/ssl/cloudflare/origin-cert.pem;
    ssl_certificate_key /etc/ssl/cloudflare/origin-key.pem;
    
    # Modern SSL protocols (TLS 1.2 and 1.3 only)
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # Let client choose cipher (modern best practice)
    ssl_prefer_server_ciphers off;
    
    # Strong cipher suites (Mozilla Modern configuration)
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    
    # SSL session settings (performance optimization)
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;  # Disable for better security
    
    # OCSP Stapling (improves SSL handshake performance)
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DNS resolvers for OCSP (Cloudflare DNS)
    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;

    # =============================================================================
    # Security Headers
    # =============================================================================
    
    # HSTS (HTTP Strict Transport Security)
    # Tells browsers to always use HTTPS for this domain
    # max-age: 1 year, includeSubDomains: apply to all subdomains, preload: submit to HSTS preload list
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # X-Frame-Options: Prevent clickjacking attacks
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # X-Content-Type-Options: Prevent MIME type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    
    # X-XSS-Protection: Enable browser XSS protection
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Referrer-Policy: Control referrer information
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content-Security-Policy (optional - uncomment and customize as needed)
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # =============================================================================
    # Logging
    # =============================================================================
    
    access_log /var/log/nginx/titan-access.log;
    error_log /var/log/nginx/titan-error.log;

    # =============================================================================
    # API Proxy (Backend)
    # =============================================================================
    
    location /api/ {
        # Proxy to Node.js backend running on port 5000
        proxy_pass http://127.0.0.1:5000;
        
        # HTTP version for proxy
        proxy_http_version 1.1;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        
        # Preserve original host and IP information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Bypass cache for WebSocket connections
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts (adjust based on API response times)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }

    # =============================================================================
    # Static Files (Frontend)
    # =============================================================================
    
    # Main location - serve static files or fallback to index.html (SPA)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static HTML for 1 day
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Static assets (JS, CSS, images, fonts)
    # Aggressive caching for immutable assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # CORS headers for fonts (if needed)
        add_header Access-Control-Allow-Origin *;
    }
    
    # Prevent serving hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # =============================================================================
    # Error Pages
    # =============================================================================
    
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
    }
    
    location = /50x.html {
        internal;
    }

    # =============================================================================
    # Health Check Endpoint (for load balancers)
    # =============================================================================
    
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# =============================================================================
# Additional Configuration Notes
# =============================================================================
#
# 1. SSL Certificate Installation:
#    - Follow docs/ops/SSL_SETUP.md for detailed instructions
#    - Certificates must be installed in /etc/ssl/cloudflare/
#    - Correct permissions are critical for security
#
# 2. Testing Configuration:
#    sudo nginx -t
#    sudo systemctl reload nginx
#
# 3. Monitoring:
#    - Check logs: sudo tail -f /var/log/nginx/titan-error.log
#    - Test SSL: openssl s_client -connect www.zala.ir:443 -servername www.zala.ir
#    - Test HSTS: curl -I https://www.zala.ir | grep -i strict
#
# 4. Performance Tuning:
#    - Adjust proxy timeouts based on API response patterns
#    - Monitor proxy_buffer settings if handling large requests/responses
#    - Consider enabling gzip compression in main nginx.conf
#
# 5. Security:
#    - Review and customize CSP header based on frontend requirements
#    - Consider additional headers: Permissions-Policy, Cross-Origin-*
#    - Regular security audits with SSL Labs: https://www.ssllabs.com/ssltest/
#
# =============================================================================
