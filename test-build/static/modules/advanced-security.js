// Feature 10: Advanced Security Module
class AdvancedSecurityModule {
    constructor() {
        this.securityDashboard = this.getSecurityDashboard();
        this.threatDetection = this.getThreatDetectionSystems();
        this.auditLogs = [];
        this.encryptionManagement = this.getEncryptionSettings();
        this.compliance = this.getComplianceFrameworks();
        this.securityAlerts = [];
        this.vulnerabilities = [];
        this.initialized = false;
        
        console.log('‚úÖ Advanced Security Module constructor called');
    }

    getSecurityDashboard() {
        return {
            overview: {
                security_score: 94,
                risk_level: 'Low',
                active_threats: 0,
                blocked_attacks: 1247,
                last_security_scan: new Date(Date.now() - 3600000).toISOString(),
                encryption_status: 'Active',
                compliance_score: 98,
                two_factor_enabled: true
            },
            metrics: {
                failed_logins_24h: 12,
                suspicious_ips_blocked: 8,
                api_rate_limit_violations: 3,
                unusual_trading_patterns: 1,
                malware_detections: 0,
                phishing_attempts: 0,
                data_breaches: 0,
                privilege_escalations: 0
            },
            recent_activities: [
                {
                    id: 'sec_001',
                    timestamp: new Date(Date.now() - 900000).toISOString(),
                    type: 'login_attempt',
                    severity: 'medium',
                    description: 'Multiple failed login attempts from IP 192.168.1.100',
                    action_taken: 'IP temporarily blocked',
                    user: 'trader_pro'
                },
                {
                    id: 'sec_002',
                    timestamp: new Date(Date.now() - 1800000).toISOString(),
                    type: 'api_anomaly',
                    severity: 'low',
                    description: 'Unusual API request pattern detected',
                    action_taken: 'Monitoring increased',
                    user: 'system'
                },
                {
                    id: 'sec_003',
                    timestamp: new Date(Date.now() - 3600000).toISOString(),
                    type: 'encryption_update',
                    severity: 'info',
                    description: 'Encryption keys rotated successfully',
                    action_taken: 'All connections updated',
                    user: 'admin'
                }
            ]
        };
    }

    getThreatDetectionSystems() {
        return {
            intrusion_detection: {
                id: 'ids',
                name: 'ÿ≥€åÿ≥ÿ™ŸÖ ÿ™ÿ¥ÿÆ€åÿµ ŸÜŸÅŸàÿ∞ (IDS)',
                status: 'active',
                version: '3.2.1',
                last_update: new Date(Date.now() - 86400000).toISOString(),
                detection_rate: 99.7,
                false_positive_rate: 0.02,
                rules_count: 15847,
                enabled_modules: ['network', 'host', 'application', 'behavioral']
            },
            malware_scanner: {
                id: 'malware',
                name: 'ÿßÿ≥⁄©ŸÜÿ± ÿ®ÿØÿßŸÅÿ≤ÿßÿ±',
                status: 'active',
                version: '2.8.9',
                last_scan: new Date(Date.now() - 21600000).toISOString(),
                threats_detected: 0,
                quarantined_files: 3,
                signature_database: '2024.09.01',
                real_time_protection: true
            },
            behavioral_analysis: {
                id: 'behavioral',
                name: 'ÿ™ÿ≠ŸÑ€åŸÑ ÿ±ŸÅÿ™ÿßÿ±€å',
                status: 'active',
                version: '1.5.4',
                learning_mode: false,
                anomalies_detected: 2,
                baseline_profiles: 156,
                confidence_threshold: 0.85,
                ai_model_accuracy: 96.3
            },
            ddos_protection: {
                id: 'ddos',
                name: 'ŸÖÿ≠ÿßŸÅÿ∏ÿ™ DDoS',
                status: 'active',
                provider: 'Cloudflare',
                mitigation_active: false,
                traffic_analysis: true,
                rate_limiting: true,
                geo_blocking: ['CN', 'RU', 'KP'],
                attack_vectors_blocked: ['HTTP Flood', 'SYN Flood', 'UDP Flood']
            }
        };
    }

    getEncryptionSettings() {
        return {
            data_at_rest: {
                algorithm: 'AES-256-GCM',
                key_management: 'Hardware Security Module',
                rotation_period: '90 days',
                last_rotation: new Date(Date.now() - 7 * 86400000).toISOString(),
                backup_encryption: true,
                compliance: ['FIPS 140-2 Level 3', 'Common Criteria EAL4+']
            },
            data_in_transit: {
                tls_version: 'TLS 1.3',
                cipher_suites: ['TLS_AES_256_GCM_SHA384', 'TLS_CHACHA20_POLY1305_SHA256'],
                certificate_authority: 'Let\'s Encrypt',
                certificate_expiry: new Date(Date.now() + 60 * 86400000).toISOString(),
                hsts_enabled: true,
                ocsp_stapling: true
            },
            api_security: {
                jwt_algorithm: 'RS256',
                token_expiry: '15 minutes',
                refresh_token_expiry: '7 days',
                rate_limiting: '1000 req/hour',
                api_key_rotation: '30 days',
                webhook_verification: true
            },
            database_encryption: {
                transparent_encryption: true,
                column_encryption: ['api_keys', 'passwords', 'personal_data'],
                backup_encryption: true,
                key_escrow: true,
                audit_logging: true
            }
        };
    }

    getComplianceFrameworks() {
        return {
            gdpr: {
                name: 'GDPR (General Data Protection Regulation)',
                status: 'compliant',
                compliance_score: 98,
                last_audit: new Date(Date.now() - 30 * 86400000).toISOString(),
                requirements_met: 47,
                total_requirements: 48,
                data_processing_agreements: true,
                consent_management: true,
                right_to_be_forgotten: true,
                data_portability: true,
                breach_notification: true
            },
            pci_dss: {
                name: 'PCI DSS (Payment Card Industry Data Security Standard)',
                status: 'compliant',
                compliance_score: 96,
                last_audit: new Date(Date.now() - 90 * 86400000).toISOString(),
                requirements_met: 11,
                total_requirements: 12,
                network_security: true,
                data_protection: true,
                vulnerability_management: true,
                access_control: true,
                monitoring: true
            },
            iso27001: {
                name: 'ISO 27001 (Information Security Management)',
                status: 'in_progress',
                compliance_score: 87,
                last_audit: new Date(Date.now() - 180 * 86400000).toISOString(),
                requirements_met: 98,
                total_requirements: 114,
                isms_implemented: true,
                risk_assessment: true,
                security_controls: true,
                continuous_improvement: true,
                certification_target: new Date(Date.now() + 90 * 86400000).toISOString()
            },
            soc2: {
                name: 'SOC 2 Type II',
                status: 'compliant',
                compliance_score: 94,
                last_audit: new Date(Date.now() - 60 * 86400000).toISOString(),
                trust_services_criteria: {
                    security: true,
                    availability: true,
                    processing_integrity: true,
                    confidentiality: true,
                    privacy: true
                },
                audit_period: '12 months',
                next_audit: new Date(Date.now() + 180 * 86400000).toISOString()
            }
        };
    }

    async initialize() {
        console.log('üîÑ Initializing Advanced Security Module...');
        
        try {
            // Generate security audit logs
            this.generateAuditLogs();
            
            // Generate security alerts
            this.generateSecurityAlerts();
            
            // Scan for vulnerabilities
            await this.performVulnerabilityScan();
            
            // Initialize real-time monitoring
            this.initializeSecurityMonitoring();
            
            this.initialized = true;
            console.log('‚úÖ Advanced Security Module initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Error initializing Advanced Security Module:', error);
        }
    }

    generateAuditLogs() {
        const actions = [
            'user_login', 'user_logout', 'admin_access', 'config_change', 'data_export',
            'api_key_generated', 'password_changed', 'permission_modified', 'backup_created',
            'security_scan', 'threat_detected', 'encryption_updated', 'compliance_check'
        ];
        
        const severities = ['info', 'warning', 'error', 'critical'];
        const statuses = ['success', 'failed', 'pending'];
        
        // Generate last 200 audit entries
        for (let i = 0; i < 200; i++) {
            const action = actions[Math.floor(Math.random() * actions.length)];
            const severity = severities[Math.floor(Math.random() * severities.length)];
            const status = statuses[Math.floor(Math.random() * statuses.length)];
            
            this.auditLogs.push({
                id: `audit_${i}`,
                timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
                action: action,
                severity: severity,
                status: status,
                user_id: `user_${Math.floor(Math.random() * 10) + 1}`,
                ip_address: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
                user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                resource: action.includes('api') ? 'api_endpoint' : action.includes('admin') ? 'admin_panel' : 'web_interface',
                details: `${action} performed with ${status} status`,
                risk_score: Math.floor(Math.random() * 100),
                compliance_relevant: Math.random() > 0.3
            });
        }
        
        this.auditLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }

    generateSecurityAlerts() {
        const alertTypes = [
            'failed_login_attempts', 'suspicious_api_activity', 'unusual_trading_pattern',
            'potential_malware', 'brute_force_attack', 'privilege_escalation',
            'data_exfiltration_attempt', 'configuration_drift', 'certificate_expiry',
            'compliance_violation', 'anomalous_behavior', 'geo_location_anomaly'
        ];
        
        const severities = ['low', 'medium', 'high', 'critical'];
        const statuses = ['open', 'investigating', 'resolved', 'false_positive'];
        
        // Generate recent security alerts
        for (let i = 0; i < 25; i++) {
            const alertType = alertTypes[Math.floor(Math.random() * alertTypes.length)];
            const severity = severities[Math.floor(Math.random() * severities.length)];
            const status = statuses[Math.floor(Math.random() * statuses.length)];
            
            this.securityAlerts.push({
                id: `alert_${i}`,
                timestamp: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
                type: alertType,
                severity: severity,
                status: status,
                title: `${alertType.replace(/_/g, ' ').toUpperCase()} Detected`,
                description: `Security alert for ${alertType} with ${severity} severity level`,
                affected_systems: ['trading_engine', 'user_management', 'api_gateway'][Math.floor(Math.random() * 3)],
                source_ip: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
                detection_method: ['rule_based', 'ml_anomaly', 'signature_match', 'behavioral_analysis'][Math.floor(Math.random() * 4)],
                mitigation_steps: ['Block IP', 'Increase monitoring', 'User notification', 'System lockdown'][Math.floor(Math.random() * 4)],
                false_positive_probability: Math.random() * 0.3
            });
        }
        
        this.securityAlerts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }

    async performVulnerabilityScan() {
        console.log('üîç Performing vulnerability scan...');
        
        const vulnerabilityTypes = [
            'SQL Injection', 'Cross-Site Scripting (XSS)', 'Cross-Site Request Forgery (CSRF)',
            'Insecure Direct Object References', 'Security Misconfiguration', 'Sensitive Data Exposure',
            'Missing Function Level Access Control', 'Using Components with Known Vulnerabilities',
            'Unvalidated Redirects and Forwards', 'Broken Authentication and Session Management'
        ];
        
        const severities = ['Low', 'Medium', 'High', 'Critical'];
        const statuses = ['Open', 'In Progress', 'Fixed', 'Accepted Risk'];
        
        // Generate vulnerability scan results
        for (let i = 0; i < 15; i++) {
            const vulnType = vulnerabilityTypes[Math.floor(Math.random() * vulnerabilityTypes.length)];
            const severity = severities[Math.floor(Math.random() * severities.length)];
            const status = statuses[Math.floor(Math.random() * statuses.length)];
            
            this.vulnerabilities.push({
                id: `vuln_${i}`,
                cve_id: `CVE-2024-${Math.floor(Math.random() * 9000) + 1000}`,
                title: vulnType,
                severity: severity,
                status: status,
                cvss_score: (Math.random() * 10).toFixed(1),
                description: `${vulnType} vulnerability detected in the system`,
                affected_component: ['Web Application', 'API Gateway', 'Database', 'Authentication System'][Math.floor(Math.random() * 4)],
                discovery_date: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString(),
                remediation_effort: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
                exploit_probability: Math.random(),
                business_impact: ['Low', 'Medium', 'High', 'Critical'][Math.floor(Math.random() * 4)]
            });
        }
        
        this.vulnerabilities.sort((a, b) => parseFloat(b.cvss_score) - parseFloat(a.cvss_score));
    }

    initializeSecurityMonitoring() {
        console.log('üìä Initializing security monitoring...');
        // In real implementation, this would set up real-time monitoring
    }

    getContent() {
        return `
        <div class="space-y-6">
            <!-- Header -->
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-2xl font-bold text-white flex items-center">
                        <i class="fas fa-shield-alt text-red-400 mr-3"></i>
                        ÿßŸÖŸÜ€åÿ™ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá
                    </h2>
                    <p class="text-gray-400 mt-1">ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ÿßŸÖŸÜ€åÿ™ÿå ÿ™ÿ¥ÿÆ€åÿµ ÿ™ŸáÿØ€åÿØÿå ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å Ÿà ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å</p>
                </div>
                <div class="flex gap-2">
                    <button onclick="securityModule.runSecurityScan()" 
                            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center gap-2">
                        <i class="fas fa-search"></i>ÿßÿ≥⁄©ŸÜ ÿßŸÖŸÜ€åÿ™€å
                    </button>
                    <button onclick="securityModule.generateSecurityReport()" 
                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
                        <i class="fas fa-file-alt"></i>⁄Øÿ≤ÿßÿ±ÿ¥ ÿßŸÖŸÜ€åÿ™€å
                    </button>
                </div>
            </div>

            <!-- Security Overview -->
            ${this.getSecurityOverview()}

            <!-- Security Tabs -->
            <div class="bg-gray-800 rounded-lg border border-gray-700">
                <div class="flex border-b border-gray-700 overflow-x-auto" id="security-tabs">
                    <button onclick="securityModule.switchSecurityTab('dashboard')" 
                            class="security-tab px-6 py-4 text-sm font-medium whitespace-nowrap flex items-center gap-2 text-blue-400 border-b-2 border-blue-400">
                        <i class="fas fa-tachometer-alt"></i>ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ÿßŸÖŸÜ€åÿ™
                    </button>
                    <button onclick="securityModule.switchSecurityTab('threats')" 
                            class="security-tab px-6 py-4 text-sm font-medium whitespace-nowrap flex items-center gap-2 text-gray-400 hover:text-white">
                        <i class="fas fa-exclamation-triangle"></i>ÿ™ÿ¥ÿÆ€åÿµ ÿ™ŸáÿØ€åÿØ
                    </button>
                    <button onclick="securityModule.switchSecurityTab('audit')" 
                            class="security-tab px-6 py-4 text-sm font-medium whitespace-nowrap flex items-center gap-2 text-gray-400 hover:text-white">
                        <i class="fas fa-clipboard-check"></i>ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å
                    </button>
                    <button onclick="securityModule.switchSecurityTab('encryption')" 
                            class="security-tab px-6 py-4 text-sm font-medium whitespace-nowrap flex items-center gap-2 text-gray-400 hover:text-white">
                        <i class="fas fa-lock"></i>ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å
                    </button>
                    <button onclick="securityModule.switchSecurityTab('compliance')" 
                            class="security-tab px-6 py-4 text-sm font-medium whitespace-nowrap flex items-center gap-2 text-gray-400 hover:text-white">
                        <i class="fas fa-balance-scale"></i>ÿßŸÜÿ∑ÿ®ÿßŸÇ
                    </button>
                </div>

                <!-- Tab Content -->
                <div class="p-6" id="security-tab-content">
                    ${this.getDashboardTab()}
                </div>
            </div>
        </div>`;
    }

    getSecurityOverview() {
        const overview = this.securityDashboard.overview;
        const metrics = this.securityDashboard.metrics;
        
        return `
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="bg-gray-800 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="p-2 ${overview.security_score >= 90 ? 'bg-green-600' : overview.security_score >= 70 ? 'bg-yellow-600' : 'bg-red-600'} rounded-lg">
                        <i class="fas fa-shield-alt text-white"></i>
                    </div>
                    <div class="mr-3">
                        <p class="text-sm text-gray-400">ÿßŸÖÿ™€åÿßÿ≤ ÿßŸÖŸÜ€åÿ™</p>
                        <p class="text-2xl font-bold text-white">${overview.security_score}/100</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="p-2 ${overview.active_threats === 0 ? 'bg-green-600' : 'bg-red-600'} rounded-lg">
                        <i class="fas fa-exclamation-triangle text-white"></i>
                    </div>
                    <div class="mr-3">
                        <p class="text-sm text-gray-400">ÿ™ŸáÿØ€åÿØÿßÿ™ ŸÅÿπÿßŸÑ</p>
                        <p class="text-2xl font-bold text-white">${overview.active_threats}</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-600 rounded-lg">
                        <i class="fas fa-shield text-white"></i>
                    </div>
                    <div class="mr-3">
                        <p class="text-sm text-gray-400">ÿ≠ŸÖŸÑÿßÿ™ ŸÖÿ≥ÿØŸàÿØ ÿ¥ÿØŸá</p>
                        <p class="text-2xl font-bold text-white">${overview.blocked_attacks.toLocaleString()}</p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="p-2 ${overview.compliance_score >= 95 ? 'bg-green-600' : 'bg-yellow-600'} rounded-lg">
                        <i class="fas fa-balance-scale text-white"></i>
                    </div>
                    <div class="mr-3">
                        <p class="text-sm text-gray-400">ÿßŸÜÿ∑ÿ®ÿßŸÇ</p>
                        <p class="text-2xl font-bold text-white">${overview.compliance_score}%</p>
                    </div>
                </div>
            </div>
        </div>`;
    }

    getDashboardTab() {
        return `
        <div class="space-y-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Security Metrics -->
                <div class="bg-gray-900 rounded-lg p-6">
                    <h3 class="text-xl font-semibold text-white mb-4 flex items-center">
                        <i class="fas fa-chart-line text-blue-400 mr-2"></i>
                        ŸÖÿ™ÿ±€å⁄©‚ÄåŸáÿß€å ÿßŸÖŸÜ€åÿ™€å (24 ÿ≥ÿßÿπÿ™ ⁄Øÿ∞ÿ¥ÿ™Ÿá)
                    </h3>
                    <div class="space-y-3">
                        ${this.getSecurityMetricsCards()}
                    </div>
                </div>

                <!-- Recent Security Activities -->
                <div class="bg-gray-900 rounded-lg p-6">
                    <h3 class="text-xl font-semibold text-white mb-4 flex items-center">
                        <i class="fas fa-history text-green-400 mr-2"></i>
                        ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ÿßŸÖŸÜ€åÿ™€å ÿßÿÆ€åÿ±
                    </h3>
                    <div class="space-y-3 max-h-64 overflow-y-auto">
                        ${this.securityDashboard.recent_activities.map(activity => this.getActivityCard(activity)).join('')}
                    </div>
                </div>
            </div>

            <!-- System Status -->
            <div class="bg-gray-900 rounded-lg p-6">
                <h3 class="text-xl font-semibold text-white mb-4 flex items-center">
                    <i class="fas fa-server text-purple-400 mr-2"></i>
                    Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåŸáÿß€å ÿßŸÖŸÜ€åÿ™€å
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    ${this.getSecuritySystemsStatus()}
                </div>
            </div>
        </div>`;
    }

    getSecurityMetricsCards() {
        const metrics = this.securityDashboard.metrics;
        
        return Object.entries(metrics).map(([key, value]) => {
            const metricName = {
                'failed_logins_24h': 'Ÿàÿ±ŸàÿØ ŸÜÿßŸÖŸàŸÅŸÇ',
                'suspicious_ips_blocked': 'IP ŸÖÿ¥⁄©Ÿà⁄© ŸÖÿ≥ÿØŸàÿØ',
                'api_rate_limit_violations': 'ŸÜŸÇÿ∂ ŸÖÿ≠ÿØŸàÿØ€åÿ™ API',
                'unusual_trading_patterns': 'ÿßŸÑ⁄ØŸà€å ŸÖÿπÿßŸÖŸÑÿßÿ™€å ÿ∫€åÿ±ÿπÿßÿØ€å',
                'malware_detections': 'ÿ™ÿ¥ÿÆ€åÿµ ÿ®ÿØÿßŸÅÿ≤ÿßÿ±',
                'phishing_attempts': 'ÿ™ŸÑÿßÿ¥ ŸÅ€åÿ¥€åŸÜ⁄Ø',
                'data_breaches': 'ŸÜŸÇÿ∂ ÿØÿßÿØŸá',
                'privilege_escalations': 'ÿßÿ±ÿ™ŸÇÿß€å ŸÖÿ¨Ÿàÿ≤'
            }[key] || key;
            
            const isGood = value === 0;
            const color = isGood ? 'text-green-400' : value < 10 ? 'text-yellow-400' : 'text-red-400';
            
            return `
            <div class="flex justify-between items-center py-2 border-b border-gray-700 last:border-0">
                <span class="text-gray-300 text-sm">${metricName}:</span>
                <span class="${color} font-semibold">${value}</span>
            </div>`;
        }).join('');
    }

    getActivityCard(activity) {
        const severityColor = {
            'info': 'text-blue-400',
            'low': 'text-green-400',
            'medium': 'text-yellow-400',
            'high': 'text-red-400',
            'critical': 'text-red-600'
        }[activity.severity] || 'text-gray-400';
        
        const timestamp = new Date(activity.timestamp).toLocaleString('fa-IR');
        
        return `
        <div class="bg-gray-800 rounded p-3">
            <div class="flex justify-between items-start mb-2">
                <h4 class="text-white text-sm font-semibold">${activity.type.replace(/_/g, ' ')}</h4>
                <span class="${severityColor} text-xs">${activity.severity}</span>
            </div>
            <p class="text-gray-300 text-xs mb-2">${activity.description}</p>
            <div class="flex justify-between items-center text-xs text-gray-500">
                <span>ÿßŸÇÿØÿßŸÖ: ${activity.action_taken}</span>
                <span>${timestamp}</span>
            </div>
        </div>`;
    }

    getSecuritySystemsStatus() {
        return Object.values(this.threatDetection).map(system => {
            const statusColor = system.status === 'active' ? 'text-green-400' : 'text-red-400';
            const statusIcon = system.status === 'active' ? 'fa-check-circle' : 'fa-times-circle';
            
            return `
            <div class="bg-gray-800 rounded-lg p-4">
                <div class="flex items-center justify-between mb-2">
                    <h4 class="text-white font-semibold text-sm">${system.name}</h4>
                    <i class="fas ${statusIcon} ${statusColor}"></i>
                </div>
                <p class="text-gray-400 text-xs mb-2">ŸÜÿ≥ÿÆŸá: ${system.version}</p>
                <div class="text-xs text-gray-500">
                    ${system.detection_rate ? `ŸÜÿ±ÿÆ ÿ™ÿ¥ÿÆ€åÿµ: ${system.detection_rate}%` : ''}
                    ${system.threats_detected !== undefined ? `ÿ™ŸáÿØ€åÿØÿßÿ™: ${system.threats_detected}` : ''}
                </div>
            </div>`;
        }).join('');
    }

    getThreatsTab() {
        return `
        <div class="space-y-6">
            <div class="flex items-center justify-between">
                <h3 class="text-xl font-semibold text-white">ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåŸáÿß€å ÿ™ÿ¥ÿÆ€åÿµ ÿ™ŸáÿØ€åÿØ</h3>
                <div class="flex gap-2">
                    <select class="px-3 py-2 bg-gray-700 text-white rounded border border-gray-600 text-sm">
                        <option value="">ŸáŸÖŸá ÿ¥ÿØÿ™‚ÄåŸáÿß</option>
                        <option value="critical">ÿ®ÿ≠ÿ±ÿßŸÜ€å</option>
                        <option value="high">ÿ®ÿßŸÑÿß</option>
                        <option value="medium">ŸÖÿ™Ÿàÿ≥ÿ∑</option>
                        <option value="low">Ÿæÿß€å€åŸÜ</option>
                    </select>
                    <button onclick="securityModule.refreshThreats()" 
                            class="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                        <i class="fas fa-refresh mr-1"></i>ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å
                    </button>
                </div>
            </div>

            <!-- Threat Detection Systems -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                ${Object.values(this.threatDetection).map(system => this.getThreatSystemCard(system)).join('')}
            </div>

            <!-- Security Alerts -->
            <div class="bg-gray-900 rounded-lg p-6">
                <h3 class="text-xl font-semibold text-white mb-4">Ÿáÿ¥ÿØÿßÿ±Ÿáÿß€å ÿßŸÖŸÜ€åÿ™€å</h3>
                <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead class="bg-gray-800">
                            <tr>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿ≤ŸÖÿßŸÜ</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ŸÜŸàÿπ ÿ™ŸáÿØ€åÿØ</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿ¥ÿØÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">Ÿàÿ∂ÿπ€åÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿπŸÖŸÑ€åÿßÿ™</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-700">
                            ${this.securityAlerts.slice(0, 10).map(alert => this.getAlertRow(alert)).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>`;
    }

    getThreatSystemCard(system) {
        const statusColor = system.status === 'active' ? 'text-green-400' : 'text-red-400';
        const lastUpdate = new Date(system.last_update || system.last_scan).toLocaleDateString('fa-IR');
        
        return `
        <div class="bg-gray-800 rounded-lg p-6">
            <div class="flex items-start justify-between mb-4">
                <div>
                    <h4 class="text-lg font-semibold text-white">${system.name}</h4>
                    <p class="text-sm ${statusColor}">${system.status === 'active' ? 'ŸÅÿπÿßŸÑ' : 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}</p>
                </div>
                <span class="text-xs bg-gray-700 px-2 py-1 rounded">v${system.version}</span>
            </div>
            
            <div class="space-y-2 text-sm">
                ${system.detection_rate ? `
                <div class="flex justify-between">
                    <span class="text-gray-400">ŸÜÿ±ÿÆ ÿ™ÿ¥ÿÆ€åÿµ:</span>
                    <span class="text-white">${system.detection_rate}%</span>
                </div>` : ''}
                
                ${system.threats_detected !== undefined ? `
                <div class="flex justify-between">
                    <span class="text-gray-400">ÿ™ŸáÿØ€åÿØÿßÿ™ ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿ¥ÿØŸá:</span>
                    <span class="text-white">${system.threats_detected}</span>
                </div>` : ''}
                
                ${system.rules_count ? `
                <div class="flex justify-between">
                    <span class="text-gray-400">ŸÇŸàÿßŸÜ€åŸÜ:</span>
                    <span class="text-white">${system.rules_count.toLocaleString()}</span>
                </div>` : ''}
                
                <div class="flex justify-between">
                    <span class="text-gray-400">ÿ¢ÿÆÿ±€åŸÜ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å:</span>
                    <span class="text-white">${lastUpdate}</span>
                </div>
            </div>
            
            <div class="mt-4 pt-3 border-t border-gray-700">
                <div class="flex gap-2">
                    <button onclick="securityModule.configureSystem('${system.id}')" 
                            class="flex-1 px-3 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                        ÿ™ŸÜÿ∏€åŸÖ
                    </button>
                    <button onclick="securityModule.updateSystem('${system.id}')" 
                            class="flex-1 px-3 py-2 bg-green-600 text-white rounded text-sm hover:bg-green-700">
                        ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å
                    </button>
                </div>
            </div>
        </div>`;
    }

    getAlertRow(alert) {
        const severityColor = {
            'low': 'text-green-400',
            'medium': 'text-yellow-400',
            'high': 'text-orange-400',
            'critical': 'text-red-400'
        }[alert.severity] || 'text-gray-400';
        
        const statusColor = {
            'open': 'text-red-400',
            'investigating': 'text-yellow-400',
            'resolved': 'text-green-400',
            'false_positive': 'text-gray-400'
        }[alert.status] || 'text-gray-400';
        
        const timestamp = new Date(alert.timestamp).toLocaleString('fa-IR');
        
        return `
        <tr class="hover:bg-gray-800">
            <td class="px-3 py-2 text-white">${timestamp}</td>
            <td class="px-3 py-2 text-white">${alert.title}</td>
            <td class="px-3 py-2">
                <span class="${severityColor} font-semibold">${alert.severity}</span>
            </td>
            <td class="px-3 py-2">
                <span class="${statusColor}">${alert.status}</span>
            </td>
            <td class="px-3 py-2">
                <div class="flex gap-1">
                    <button onclick="securityModule.investigateAlert('${alert.id}')" 
                            class="px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700">
                        <i class="fas fa-search"></i>
                    </button>
                    <button onclick="securityModule.resolveAlert('${alert.id}')" 
                            class="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </td>
        </tr>`;
    }

    getAuditTab() {
        return `
        <div class="space-y-6">
            <div class="flex items-center justify-between">
                <h3 class="text-xl font-semibold text-white">ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å</h3>
                <div class="flex gap-2">
                    <input type="date" class="px-3 py-2 bg-gray-700 text-white rounded border border-gray-600 text-sm">
                    <select class="px-3 py-2 bg-gray-700 text-white rounded border border-gray-600 text-sm">
                        <option value="">ŸáŸÖŸá ÿßÿπŸÖÿßŸÑ</option>
                        <option value="login">Ÿàÿ±ŸàÿØ</option>
                        <option value="config">ÿ™ÿ∫€å€åÿ± ÿ™ŸÜÿ∏€åŸÖÿßÿ™</option>
                        <option value="admin">ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÖÿØ€åÿ±</option>
                        <option value="api">ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ API</option>
                    </select>
                    <button onclick="securityModule.exportAuditLogs()" 
                            class="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
                        <i class="fas fa-download mr-1"></i>ÿÆÿ±Ÿàÿ¨€å
                    </button>
                </div>
            </div>
            
            <div class="bg-gray-900 rounded-lg overflow-hidden">
                <div class="overflow-x-auto max-h-96">
                    <table class="w-full text-sm">
                        <thead class="bg-gray-800 sticky top-0">
                            <tr>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿ≤ŸÖÿßŸÜ</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">⁄©ÿßÿ±ÿ®ÿ±</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿπŸÖŸÑ</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿ¥ÿØÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">Ÿàÿ∂ÿπ€åÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">IP</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-700">
                            ${this.auditLogs.slice(0, 30).map(log => this.getAuditLogRow(log)).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>`;
    }

    getAuditLogRow(log) {
        const severityColor = {
            'info': 'text-blue-400',
            'warning': 'text-yellow-400',
            'error': 'text-red-400',
            'critical': 'text-red-600'
        }[log.severity] || 'text-gray-400';
        
        const statusColor = {
            'success': 'text-green-400',
            'failed': 'text-red-400',
            'pending': 'text-yellow-400'
        }[log.status] || 'text-gray-400';
        
        const timestamp = new Date(log.timestamp).toLocaleString('fa-IR');
        
        return `
        <tr class="hover:bg-gray-800">
            <td class="px-3 py-2 text-white">${timestamp}</td>
            <td class="px-3 py-2 text-gray-300">${log.user_id}</td>
            <td class="px-3 py-2 text-white">${log.action}</td>
            <td class="px-3 py-2">
                <span class="${severityColor}">${log.severity}</span>
            </td>
            <td class="px-3 py-2">
                <span class="${statusColor}">${log.status}</span>
            </td>
            <td class="px-3 py-2 text-gray-300">${log.ip_address}</td>
        </tr>`;
    }

    getEncryptionTab() {
        return `
        <div class="space-y-6">
            <div class="flex items-center justify-between">
                <h3 class="text-xl font-semibold text-white">ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å</h3>
                <button onclick="securityModule.rotateKeys()" 
                        class="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 text-sm">
                    <i class="fas fa-key mr-2"></i>⁄Üÿ±ÿÆÿ¥ ⁄©ŸÑ€åÿØŸáÿß
                </button>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                ${Object.entries(this.encryptionManagement).map(([key, config]) => this.getEncryptionCard(key, config)).join('')}
            </div>
        </div>`;
    }

    getEncryptionCard(type, config) {
        const typeNames = {
            'data_at_rest': 'ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸá',
            'data_in_transit': 'ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ™ŸÇÿßŸÑ',
            'api_security': 'ÿßŸÖŸÜ€åÿ™ API',
            'database_encryption': 'ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ÿØ€åÿ™ÿßÿ®€åÿ≥'
        };
        
        const typeName = typeNames[type] || type;
        
        return `
        <div class="bg-gray-900 rounded-lg p-6">
            <h4 class="text-lg font-semibold text-white mb-4">${typeName}</h4>
            
            <div class="space-y-3 text-sm">
                ${Object.entries(config).map(([key, value]) => {
                    if (typeof value === 'boolean') {
                        return `
                        <div class="flex justify-between items-center">
                            <span class="text-gray-400">${key.replace(/_/g, ' ')}:</span>
                            <span class="${value ? 'text-green-400' : 'text-red-400'}">
                                <i class="fas ${value ? 'fa-check' : 'fa-times'}"></i>
                            </span>
                        </div>`;
                    } else if (key.includes('expiry') || key.includes('rotation')) {
                        const date = new Date(value).toLocaleDateString('fa-IR');
                        return `
                        <div class="flex justify-between">
                            <span class="text-gray-400">${key.replace(/_/g, ' ')}:</span>
                            <span class="text-white">${date}</span>
                        </div>`;
                    } else if (Array.isArray(value)) {
                        return `
                        <div class="flex justify-between">
                            <span class="text-gray-400">${key.replace(/_/g, ' ')}:</span>
                            <span class="text-white">${value.length} ŸÖŸàÿ±ÿØ</span>
                        </div>`;
                    } else {
                        return `
                        <div class="flex justify-between">
                            <span class="text-gray-400">${key.replace(/_/g, ' ')}:</span>
                            <span class="text-white">${value}</span>
                        </div>`;
                    }
                }).join('')}
            </div>
        </div>`;
    }

    getComplianceTab() {
        return `
        <div class="space-y-6">
            <div class="flex items-center justify-between">
                <h3 class="text-xl font-semibold text-white">⁄Üÿßÿ±⁄ÜŸàÿ®‚ÄåŸáÿß€å ÿßŸÜÿ∑ÿ®ÿßŸÇ</h3>
                <button onclick="securityModule.runComplianceAudit()" 
                        class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm">
                    <i class="fas fa-clipboard-check mr-2"></i>ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å ÿßŸÜÿ∑ÿ®ÿßŸÇ
                </button>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                ${Object.values(this.compliance).map(framework => this.getComplianceCard(framework)).join('')}
            </div>

            <!-- Vulnerability Assessment -->
            <div class="bg-gray-900 rounded-lg p-6">
                <h3 class="text-xl font-semibold text-white mb-4 flex items-center">
                    <i class="fas fa-bug text-red-400 mr-2"></i>
                    ÿßÿ±ÿ≤€åÿßÿ®€å ÿ¢ÿ≥€åÿ®‚ÄåŸæÿ∞€åÿ±€å
                </h3>
                <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead class="bg-gray-800">
                            <tr>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">CVE ID</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿπŸÜŸàÿßŸÜ</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿ¥ÿØÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿßŸÖÿ™€åÿßÿ≤ CVSS</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">Ÿàÿ∂ÿπ€åÿ™</th>
                                <th class="px-3 py-2 text-right text-xs font-medium text-gray-300">ÿπŸÖŸÑ€åÿßÿ™</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-700">
                            ${this.vulnerabilities.slice(0, 10).map(vuln => this.getVulnerabilityRow(vuln)).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>`;
    }

    getComplianceCard(framework) {
        const statusColor = {
            'compliant': 'text-green-400',
            'in_progress': 'text-yellow-400',
            'non_compliant': 'text-red-400'
        }[framework.status] || 'text-gray-400';
        
        const lastAudit = new Date(framework.last_audit).toLocaleDateString('fa-IR');
        
        return `
        <div class="bg-gray-800 rounded-lg p-6">
            <div class="flex items-start justify-between mb-4">
                <div>
                    <h4 class="text-lg font-semibold text-white">${framework.name}</h4>
                    <p class="text-sm ${statusColor}">
                        ${framework.status === 'compliant' ? 'ŸÖŸÜÿ∑ÿ®ŸÇ' : 
                          framework.status === 'in_progress' ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß' : 'ÿ∫€åÿ±ŸÖŸÜÿ∑ÿ®ŸÇ'}
                    </p>
                </div>
                <div class="text-right">
                    <div class="text-2xl font-bold text-white">${framework.compliance_score}%</div>
                    <div class="text-xs text-gray-400">ÿßŸÖÿ™€åÿßÿ≤ ÿßŸÜÿ∑ÿ®ÿßŸÇ</div>
                </div>
            </div>
            
            <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                    <span class="text-gray-400">ÿßŸÑÿ≤ÿßŸÖÿßÿ™ ÿ™ÿ≠ŸÇŸÇ €åÿßŸÅÿ™Ÿá:</span>
                    <span class="text-white">${framework.requirements_met}/${framework.total_requirements}</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-400">ÿ¢ÿÆÿ±€åŸÜ ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å:</span>
                    <span class="text-white">${lastAudit}</span>
                </div>
                ${framework.certification_target ? `
                <div class="flex justify-between">
                    <span class="text-gray-400">ŸáÿØŸÅ ⁄ØŸàÿßŸá€åŸÜÿßŸÖŸá:</span>
                    <span class="text-white">${new Date(framework.certification_target).toLocaleDateString('fa-IR')}</span>
                </div>` : ''}
            </div>
            
            <!-- Progress Bar -->
            <div class="mt-4">
                <div class="w-full bg-gray-700 rounded-full h-2">
                    <div class="h-2 rounded-full ${framework.compliance_score >= 95 ? 'bg-green-500' : framework.compliance_score >= 80 ? 'bg-yellow-500' : 'bg-red-500'}" 
                         style="width: ${framework.compliance_score}%"></div>
                </div>
            </div>
        </div>`;
    }

    getVulnerabilityRow(vuln) {
        const severityColor = {
            'Low': 'text-green-400',
            'Medium': 'text-yellow-400',
            'High': 'text-orange-400',
            'Critical': 'text-red-400'
        }[vuln.severity] || 'text-gray-400';
        
        const statusColor = {
            'Open': 'text-red-400',
            'In Progress': 'text-yellow-400',
            'Fixed': 'text-green-400',
            'Accepted Risk': 'text-gray-400'
        }[vuln.status] || 'text-gray-400';
        
        return `
        <tr class="hover:bg-gray-800">
            <td class="px-3 py-2 text-blue-400">${vuln.cve_id}</td>
            <td class="px-3 py-2 text-white">${vuln.title}</td>
            <td class="px-3 py-2">
                <span class="${severityColor} font-semibold">${vuln.severity}</span>
            </td>
            <td class="px-3 py-2 text-white">${vuln.cvss_score}</td>
            <td class="px-3 py-2">
                <span class="${statusColor}">${vuln.status}</span>
            </td>
            <td class="px-3 py-2">
                <div class="flex gap-1">
                    <button onclick="securityModule.viewVulnerability('${vuln.id}')" 
                            class="px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button onclick="securityModule.fixVulnerability('${vuln.id}')" 
                            class="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700">
                        <i class="fas fa-wrench"></i>
                    </button>
                </div>
            </td>
        </tr>`;
    }

    // Tab Management
    switchSecurityTab(tabName) {
        console.log('üîÑ Switching security tab to:', tabName);
        
        // Update tab styles
        document.querySelectorAll('.security-tab').forEach(tab => {
            tab.classList.remove('text-blue-400', 'border-b-2', 'border-blue-400');
            tab.classList.add('text-gray-400');
        });
        
        const activeTab = document.querySelector(`[onclick="securityModule.switchSecurityTab('${tabName}')"]`);
        if (activeTab) {
            activeTab.classList.remove('text-gray-400');
            activeTab.classList.add('text-blue-400', 'border-b-2', 'border-blue-400');
        }
        
        // Update content
        const container = document.getElementById('security-tab-content');
        if (container) {
            switch (tabName) {
                case 'dashboard':
                    container.innerHTML = this.getDashboardTab();
                    break;
                case 'threats':
                    container.innerHTML = this.getThreatsTab();
                    break;
                case 'audit':
                    container.innerHTML = this.getAuditTab();
                    break;
                case 'encryption':
                    container.innerHTML = this.getEncryptionTab();
                    break;
                case 'compliance':
                    container.innerHTML = this.getComplianceTab();
                    break;
            }
        }
    }

    // Security Operations
    runSecurityScan() {
        console.log('üîç Running security scan...');
        alert('üîç ÿßÿ≥⁄©ŸÜ ÿßŸÖŸÜ€åÿ™€å ÿ¨ÿßŸÖÿπ ÿ¢ÿ∫ÿßÿ≤ ÿ¥ÿØ. ŸÜÿ™ÿß€åÿ¨ ÿØÿ± ÿ™ÿ® ÿ™ÿ¥ÿÆ€åÿµ ÿ™ŸáÿØ€åÿØ ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.');
    }

    generateSecurityReport() {
        console.log('üìä Generating security report...');
        alert('üìä ⁄Øÿ≤ÿßÿ±ÿ¥ ÿßŸÖŸÜ€åÿ™€å ÿ¨ÿßŸÖÿπ ÿØÿ± ÿ≠ÿßŸÑ ÿ™ŸàŸÑ€åÿØ ÿßÿ≥ÿ™. ŸÅÿß€åŸÑ PDF ÿ®Ÿá ÿ≤ŸàÿØ€å ÿ¢ŸÖÿßÿØŸá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.');
    }

    refreshThreats() {
        console.log('üîÑ Refreshing threat data...');
        this.generateSecurityAlerts();
        this.switchSecurityTab('threats');
    }

    configureSystem(systemId) {
        const system = this.threatDetection[systemId];
        console.log('‚öôÔ∏è Configuring system:', system.name);
        alert(`‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ${system.name} ÿØÿ± ŸÜÿ≥ÿÆŸá‚ÄåŸáÿß€å ÿ¢ÿ™€å ÿßÿ∂ÿßŸÅŸá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.`);
    }

    updateSystem(systemId) {
        const system = this.threatDetection[systemId];
        console.log('üì• Updating system:', system.name);
        alert(`üì• ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ${system.name} ÿ¢ÿ∫ÿßÿ≤ ÿ¥ÿØ.`);
    }

    investigateAlert(alertId) {
        console.log('üîç Investigating alert:', alertId);
        alert('üîç ÿ®ÿ±ÿ±ÿ≥€å ÿ™ŸÅÿµ€åŸÑ€å Ÿáÿ¥ÿØÿßÿ± ÿ¢ÿ∫ÿßÿ≤ ÿ¥ÿØ.');
    }

    resolveAlert(alertId) {
        console.log('‚úÖ Resolving alert:', alertId);
        const alert = this.securityAlerts.find(a => a.id === alertId);
        if (alert) {
            alert.status = 'resolved';
            this.switchSecurityTab('threats');
        }
    }

    exportAuditLogs() {
        console.log('üì• Exporting audit logs...');
        alert('üì• ÿÆÿ±Ÿàÿ¨€å ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å ÿØÿ± ÿ≠ÿßŸÑ ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿßÿ≥ÿ™.');
    }

    rotateKeys() {
        console.log('üîÑ Rotating encryption keys...');
        alert('üîÑ ⁄Üÿ±ÿÆÿ¥ ⁄©ŸÑ€åÿØŸáÿß€å ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ÿ¢ÿ∫ÿßÿ≤ ÿ¥ÿØ. ÿß€åŸÜ ÿπŸÖŸÑ€åÿßÿ™ ⁄ÜŸÜÿØ ÿØŸÇ€åŸÇŸá ÿ∑ŸàŸÑ ŸÖ€å‚Äå⁄©ÿ¥ÿØ.');
    }

    runComplianceAudit() {
        console.log('üìã Running compliance audit...');
        alert('üìã ÿ≠ÿ≥ÿßÿ®ÿ±ÿ≥€å ÿßŸÜÿ∑ÿ®ÿßŸÇ ÿ¨ÿßŸÖÿπ ÿ¢ÿ∫ÿßÿ≤ ÿ¥ÿØ. ŸÜÿ™ÿß€åÿ¨ ÿØÿ± ⁄ÜŸÜÿØ ÿ≥ÿßÿπÿ™ ÿ¢€åŸÜÿØŸá ÿ¢ŸÖÿßÿØŸá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.');
    }

    viewVulnerability(vulnId) {
        const vuln = this.vulnerabilities.find(v => v.id === vulnId);
        console.log('üëÅÔ∏è Viewing vulnerability:', vuln.title);
        alert(`üëÅÔ∏è ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ¢ÿ≥€åÿ®‚ÄåŸæÿ∞€åÿ±€å: ${vuln.title}\n\nCVE ID: ${vuln.cve_id}\nCVSS Score: ${vuln.cvss_score}\nStatus: ${vuln.status}`);
    }

    fixVulnerability(vulnId) {
        console.log('üîß Fixing vulnerability:', vulnId);
        const vuln = this.vulnerabilities.find(v => v.id === vulnId);
        if (vuln) {
            vuln.status = 'In Progress';
            this.switchSecurityTab('compliance');
        }
    }
}

// Register module globally
window.TitanModules = window.TitanModules || {};
window.TitanModules.AdvancedSecurityModule = AdvancedSecurityModule;

// Create global instance
window.securityModule = null;

console.log('‚úÖ Advanced Security Module registered successfully');