// AI Tab Module - TITAN Trading System
// Complete AI Management & Analytics Dashboard

export default class AITab {
    constructor(settings) {
        this.settings = settings.ai || {};
        this.state = {
            agents: [],
            artemis: null,
            systemMetrics: {},
            selectedAgent: null,
            currentView: 'management',
            refreshInterval: null,
            trainingSession: null
        };
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 01 (Technical Analysis)
    // =============================================================================
    
    async loadAgent01Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent01Status = result.data;
                console.log('‚úÖ Agent 01 status loaded:', result.data);
                
                // Try to sync with actual Agent 01 instance if available
                if (window.TechnicalAnalysisAgent && window.agent01Instance) {
                    const agentStatus = window.agent01Instance.getStatus();
                    console.log('üîÑ Syncing with Agent 01 instance:', agentStatus);
                    
                    // Update backend data with real agent data
                    result.data.realTimeData = {
                        localPerformance: agentStatus.performance,
                        activeConnections: agentStatus.connections?.length || 0,
                        currentAnalysis: agentStatus.currentAnalysis,
                        systemLoad: agentStatus.systemLoad
                    };
                }
                
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 01 status:', error);
            throw error;
        }
    }

    async startAgent01Analysis(symbol = 'BTC/USDT', timeframe = '1h') {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/analyze', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ symbol, timeframe })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 01 analysis completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error starting Agent 01 analysis:', error);
            throw error;
        }
    }

    async loadAgent01History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 01 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 01 history:', error);
            throw error;
        }
    }

    async controlAgent01(action) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 01 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 01:', error);
            throw error;
        }
    }

    async loadAgent01Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 01 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 01 config:', error);
            throw error;
        }
    }

    async updateAgent01Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/01/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 01 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 01 config:', error);
            throw error;
        }
    }

    render() {
        return `
            <div class="space-y-6">
                <!-- AI Management Header -->
                <div class="bg-gradient-to-r from-purple-900 via-blue-900 to-indigo-900 rounded-lg p-6 border border-purple-500">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-2xl font-bold text-white flex items-center">
                                <i class="fas fa-brain text-purple-400 text-3xl ml-3"></i>
                                ŸÖÿØ€åÿ±€åÿ™ ŸáŸàÿ¥ ŸÖÿµŸÜŸàÿπ€å TITAN
                            </h3>
                            <p class="text-purple-200 mt-2">ÿ≥€åÿ≥ÿ™ŸÖ ÿ¨ÿßŸÖÿπ ÿ¢ŸÜÿßŸÑ€åÿ™€å⁄©ÿ≥ÿå ÿ¢ŸÖŸàÿ≤ÿ¥ Ÿà ŸÖÿØ€åÿ±€åÿ™ AI</p>
                        </div>
                        <div class="flex items-center space-x-3 space-x-reverse">
                            <button onclick="aiTabInstance.createBackup()" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-save mr-2"></i>
                                Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ‚Äå⁄Ø€åÿ±€å
                            </button>
                            <button onclick="aiTabInstance.startTraining()" 
                                    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-graduation-cap mr-2"></i>
                                ÿ¥ÿ±Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥
                            </button>
                        </div>
                    </div>
                </div>

                <!-- AI Management Navigation Tabs -->
                <div class="flex space-x-1 space-x-reverse bg-gray-800 rounded-lg p-1 mb-6">
                    <button onclick="aiTabInstance.switchView('management')" 
                            class="ai-management-nav-tab active px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-tachometer-alt mr-2"></i>
                        ŸÜŸÖÿß€å ⁄©ŸÑ€å
                    </button>
                    <button onclick="aiTabInstance.switchView('agents')" 
                            class="ai-management-nav-tab px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-users mr-2"></i>
                        15 ÿß€åÿ¨ŸÜÿ™ AI
                    </button>
                    <button onclick="aiTabInstance.switchView('training')" 
                            class="ai-management-nav-tab px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-graduation-cap mr-2"></i>
                        ÿ¢ŸÖŸàÿ≤ÿ¥ Ÿà €åÿßÿØ⁄Ø€åÿ±€å
                    </button>
                    <button onclick="aiTabInstance.switchView('analytics')" 
                            class="ai-management-nav-tab px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-chart-line mr-2"></i>
                        ÿ¢ŸÜÿßŸÑ€åÿ™€å⁄©ÿ≥ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá
                    </button>
                    <button onclick="aiTabInstance.switchView('config')" 
                            class="ai-management-nav-tab px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        <i class="fas fa-cogs mr-2"></i>
                        Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å API
                    </button>
                </div>

                <!-- AI Content Area -->
                <div id="ai-management-content-area">
                    <!-- Content will be loaded here -->
                </div>

                <style>
                    .ai-management-nav-tab {
                        color: #9CA3AF;
                        background: transparent;
                    }
                    .ai-management-nav-tab:hover {
                        color: #E5E7EB;
                        background: #374151;
                    }
                    .ai-management-nav-tab.active {
                        color: #FFFFFF;
                        background: #3B82F6;
                    }
                    
                    .ai-agent-card {
                        transition: all 0.3s ease;
                    }
                    .ai-agent-card:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
                    }
                    
                    .progress-ring {
                        transform: rotate(-90deg);
                    }
                    
                    .ai-metric-card {
                        background: linear-gradient(135deg, #1F2937 0%, #374151 100%);
                        border: 1px solid #4B5563;
                    }
                </style>
            </div>
        `;
    }

    initialize() {
        console.log('üß† Initializing AI Management Tab...');
        this.loadAIData();
        this.setupAutoRefresh();
        
        // Load initial view after a short delay to ensure DOM is ready
        setTimeout(() => {
            this.switchView('management');
        }, 100);

        // Set up toggle functionality for API services
        this.setupToggleHandlers();
        
        // Initialize range sliders
        this.setupRangeSliders();
        
        // Set up strategy toggles
        this.setupStrategyHandlers();
    }

    // Load AI system data
    async loadAIData() {
        try {
            // Get AI overview data from real API
            const overviewResponse = await axios.get('/api/ai/overview', {
                headers: { 'Authorization': `Bearer ${window.authToken}` }
            });
            
            if (overviewResponse.data.success) {
                const data = overviewResponse.data.data;
                this.state.artemis = data.artemis;
                this.state.agents = data.agents;
                this.state.systemMetrics = data.systemMetrics;
            }
            
            console.log('‚úÖ AI data loaded successfully');
        } catch (error) {
            console.error('‚ùå Error loading AI data:', error);
            
            // Fallback to mock data if API fails
            this.state.artemis = {
                status: 'active',
                intelligence: {
                    overallIQ: 165,
                    emotionalIQ: 87,
                    strategicThinking: 92,
                    adaptability: 89
                },
                externalProviders: {
                    openai: { status: true, performance: 94, usage: 1247 },
                    anthropic: { status: true, performance: 91, usage: 832 },
                    google: { status: false, performance: 0, usage: 0 }
                },
                collectiveIntelligence: {
                    swarmEfficiency: 93,
                    knowledgeSharing: 87,
                    consensusAccuracy: 95,
                    emergentCapabilities: ['ÿ™ÿ≠ŸÑ€åŸÑ Ÿæ€å⁄Ü€åÿØŸá', 'Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ÿ™ÿ±ŸÜÿØŸáÿß', 'ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å ÿÆŸàÿØ⁄©ÿßÿ±', 'ÿ™ÿ∑ÿ®€åŸÇ ÿ±ŸÅÿ™ÿßÿ±€å']
                }
            };
            
            // Mock agents data as fallback
            this.state.agents = this.generateMockAgents();
        }
    }

    // Generate mock agents for demonstration
    generateMockAgents() {
        const specializations = [
            'ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá', 'ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄© Ÿà ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà', 'ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™', 'ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿßŸÑ⁄ØŸà',
            'Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ŸÇ€åŸÖÿ™', 'ÿ¢ÿ±ÿ®€åÿ™ÿ±ÿß⁄ò', 'ÿ™ÿ≠ŸÑ€åŸÑ ŸÜŸÇÿØ€åŸÜ⁄Ø€å', 'ŸÖÿØ€åÿ±€åÿ™ ŸæŸàÿ±ÿ™ŸÅŸàŸÑ€åŸà',
            'ÿ™ÿ¥ÿÆ€åÿµ ÿ™ÿ±ŸÜÿØŸáÿß', 'ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å', 'ŸÖÿØ€åÿ±€åÿ™ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™', 'ÿ¢ŸÜÿßŸÑ€åÿ≤ ŸÅÿßŸÜÿØÿßŸÖŸÜÿ™ÿßŸÑ',
            'ŸáŸàÿ¥ ÿ®ÿßÿ≤ÿßÿ±', 'ÿ™ÿ≠ŸÑ€åŸÑ ÿ≠ÿ¨ŸÖ', 'ÿ™ÿß€åŸÖ‚Äåÿ®ŸÜÿØ€å ŸÖÿπÿßŸÖŸÑÿßÿ™'
        ];

        const capabilities = [
            'ÿ™ÿ≠ŸÑ€åŸÑ ⁄Üÿßÿ±ÿ™', 'ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ±€åÿ≥⁄©', 'Ÿæÿ±ÿØÿßÿ≤ÿ¥ ŸÖÿ™ŸÜ', 'ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿ≥€å⁄ØŸÜÿßŸÑ',
            '€åÿßÿØ⁄Ø€åÿ±€å ŸÖÿßÿ¥€åŸÜ', 'ÿ¢ŸÜÿßŸÑ€åÿ≤ ÿØÿßÿØŸá', 'Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å', 'ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å',
            'ÿ™ÿµŸÖ€åŸÖ‚Äå⁄Ø€åÿ±€å', 'ÿ™ÿ∑ÿ®€åŸÇ ÿ≥ÿ±€åÿπ', 'ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™', 'ŸÖÿØ€åÿ±€åÿ™ ÿ≤ŸÖÿßŸÜ'
        ];

        const agents = [];
        for (let i = 1; i <= 15; i++) {
            let accuracy, successRate, status, experienceLevel;
            
            // Special configuration for implemented agents
            if (i === 1) {
                // Agent 01: Technical Analysis - Real implementation
                accuracy = 85 + Math.random() * 10; // Higher accuracy for real agent
                successRate = 80 + Math.random() * 15;
                status = 'active';
                experienceLevel = 'expert';
            } else if (i === 2) {
                // Agent 02: Risk Management - Real implementation
                accuracy = 87 + Math.random() * 8; // Higher accuracy for real agent
                successRate = 82 + Math.random() * 13;
                status = 'active';
                experienceLevel = 'expert';
            } else {
                // Mock agents
                accuracy = 75 + Math.random() * 20;
                successRate = 70 + Math.random() * 25;
                const statuses = ['active', 'training', 'offline'];
                status = statuses[Math.floor(Math.random() * 3)];
                const experienceLevels = ['beginner', 'intermediate', 'advanced', 'expert'];
                experienceLevel = experienceLevels[Math.floor(Math.random() * 4)];
            }
            
            agents.push({
                id: `agent_${i.toString().padStart(2, '0')}`,
                name: `ÿß€åÿ¨ŸÜÿ™ AI ${i}`,
                specialization: specializations[i - 1],
                status: status,
                performance: {
                    accuracy: accuracy,
                    successRate: successRate,
                    trainingProgress: i <= 2 ? 95 + Math.random() * 5 : Math.floor(Math.random() * 100), // Higher training progress for real agents
                    totalDecisions: i <= 2 ? Math.floor(5000 + Math.random() * 45000) : Math.floor(1000 + Math.random() * 50000), // More decisions for real agents
                    experienceLevel: experienceLevel,
                    createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
                    lastTraining: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
                    lastUpdate: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString()
                },
                learning: {
                    currentlyLearning: i <= 2 ? false : Math.random() > 0.7, // Real agents aren't currently learning (they're operational)
                    hoursLearned: i <= 2 ? Math.floor(1500 + Math.random() * 1000) : Math.floor(100 + Math.random() * 2000), // More training for real agents
                    knowledgeBase: i <= 2 ? Math.floor(2048 + Math.random() * 2048) * 1024 : Math.floor(512 + Math.random() * 4096) * 1024, // Larger knowledge base for real agents
                    totalSessions: i <= 2 ? Math.floor(200 + Math.random() * 300) : Math.floor(50 + Math.random() * 200) // More sessions for real agents
                },
                capabilities: i === 1 ? 
                    ['ÿ™ÿ≠ŸÑ€åŸÑ ⁄Üÿßÿ±ÿ™', 'ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿ≥€å⁄ØŸÜÿßŸÑ', '€åÿßÿØ⁄Ø€åÿ±€å ŸÖÿßÿ¥€åŸÜ', 'Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å', 'ÿ¢ŸÜÿßŸÑ€åÿ≤ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ', 'ÿ™ÿ¥ÿÆ€åÿµ ÿßŸÑ⁄ØŸà'] :
                    i === 2 ?
                    ['ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ±€åÿ≥⁄©', 'ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà', 'ŸÖÿØ€åÿ±€åÿ™ ÿ≤ŸÖÿßŸÜ', 'ÿ™ÿµŸÖ€åŸÖ‚Äå⁄Ø€åÿ±€å', '€åÿßÿØ⁄Ø€åÿ±€å ŸÖÿßÿ¥€åŸÜ', 'ÿ¢ŸÜÿßŸÑ€åÿ≤ ÿ±€åÿ≥⁄©'] :
                    capabilities.sort(() => 0.5 - Math.random()).slice(0, 3 + Math.floor(Math.random() * 4))
            });
        }
        return agents;
    }

    // Setup auto refresh
    setupAutoRefresh() {
        // Refresh every 15 seconds
        this.state.refreshInterval = setInterval(() => {
            this.loadAIData();
            this.updateCurrentView();
        }, 15000);
    }

    // Update current view
    updateCurrentView() {
        if (this.state.currentView === 'management') {
            this.renderManagementView();
        } else if (this.state.currentView === 'agents') {
            this.renderAgentsView();
        } else if (this.state.currentView === 'training') {
            this.renderTrainingView();
        } else if (this.state.currentView === 'analytics') {
            this.renderAnalyticsView();
        } else if (this.state.currentView === 'config') {
            this.renderConfigView();
        }
    }

    // Switch between different views
    switchView(viewName) {
        this.state.currentView = viewName;
        
        // Update tab active state
        document.querySelectorAll('.ai-management-nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Find and activate the correct tab
        document.querySelectorAll('.ai-management-nav-tab').forEach(tab => {
            const tabText = tab.textContent.trim();
            if ((viewName === 'management' && tabText.includes('ŸÜŸÖÿß€å ⁄©ŸÑ€å')) ||
                (viewName === 'agents' && tabText.includes('ÿß€åÿ¨ŸÜÿ™')) ||
                (viewName === 'training' && tabText.includes('ÿ¢ŸÖŸàÿ≤ÿ¥')) ||
                (viewName === 'analytics' && tabText.includes('ÿ¢ŸÜÿßŸÑ€åÿ™€å⁄©ÿ≥')) ||
                (viewName === 'config' && tabText.includes('Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å'))) {
                tab.classList.add('active');
            }
        });
        
        // Render the selected view
        this.updateCurrentView();
    }

    // Render management overview
    renderManagementView() {
        const artemis = this.state.artemis;
        if (!artemis) {
            document.getElementById('ai-management-content-area').innerHTML = '<div class="text-center text-gray-400">ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å...</div>';
            return;
        }
        
        const activeAgents = this.state.agents.filter(a => a.status === 'active').length;
        const learningAgents = this.state.agents.filter(a => a.learning.currentlyLearning).length;
        const avgAccuracy = this.state.agents.length > 0 ? 
            (this.state.agents.reduce((sum, a) => sum + a.performance.accuracy, 0) / this.state.agents.length).toFixed(1) : 0;
        
        const content = `
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                <!-- Artemis Mother AI Status -->
                <div class="lg:col-span-2 bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center">
                            <div class="w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center mr-4">
                                <i class="fas fa-brain text-white text-xl"></i>
                            </div>
                            <div>
                                <h2 class="text-xl font-bold text-white">ÿ¢ÿ±ÿ™ŸÖ€åÿ≥ - ŸÖÿ∫ÿ≤ ŸÖÿ±⁄©ÿ≤€å</h2>
                                <p class="text-gray-400">Mother AI Controller</p>
                            </div>
                        </div>
                        <div class="flex items-center">
                            <div class="w-3 h-3 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                            <span class="text-green-400 font-medium">${artemis.status === 'active' ? 'ŸÅÿπÿßŸÑ' : artemis.status}</span>
                        </div>
                    </div>
                    
                    <!-- Intelligence Metrics -->
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div class="ai-metric-card rounded-lg p-4">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">IQ ⁄©ŸÑ€å</span>
                                <span class="text-2xl font-bold text-purple-400">${artemis.intelligence.overallIQ}</span>
                            </div>
                            <div class="w-full bg-gray-600 rounded-full h-2 mt-2">
                                <div class="bg-purple-400 h-2 rounded-full" style="width: ${(artemis.intelligence.overallIQ / 200) * 100}%"></div>
                            </div>
                        </div>
                        <div class="ai-metric-card rounded-lg p-4">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">ŸáŸàÿ¥ ÿπÿßÿ∑ŸÅ€å</span>
                                <span class="text-2xl font-bold text-blue-400">${artemis.intelligence.emotionalIQ}</span>
                            </div>
                            <div class="w-full bg-gray-600 rounded-full h-2 mt-2">
                                <div class="bg-blue-400 h-2 rounded-full" style="width: ${artemis.intelligence.emotionalIQ}%"></div>
                            </div>
                        </div>
                        <div class="ai-metric-card rounded-lg p-4">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">ÿ™ŸÅ⁄©ÿ± ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å⁄©</span>
                                <span class="text-2xl font-bold text-green-400">${artemis.intelligence.strategicThinking}</span>
                            </div>
                            <div class="w-full bg-gray-600 rounded-full h-2 mt-2">
                                <div class="bg-green-400 h-2 rounded-full" style="width: ${artemis.intelligence.strategicThinking}%"></div>
                            </div>
                        </div>
                        <div class="ai-metric-card rounded-lg p-4">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">ÿßŸÜÿ∑ÿ®ÿßŸÇ‚ÄåŸæÿ∞€åÿ±€å</span>
                                <span class="text-2xl font-bold text-yellow-400">${artemis.intelligence.adaptability}</span>
                            </div>
                            <div class="w-full bg-gray-600 rounded-full h-2 mt-2">
                                <div class="bg-yellow-400 h-2 rounded-full" style="width: ${artemis.intelligence.adaptability}%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- External Providers Status -->
                    <div class="border-t border-gray-700 pt-4">
                        <h3 class="text-lg font-semibold text-white mb-4">ÿßÿ±ÿßÿ¶Ÿá‚ÄåÿØŸáŸÜÿØ⁄ØÿßŸÜ ÿÆÿßÿ±ÿ¨€å</h3>
                        <div class="grid grid-cols-3 gap-4">
                            ${Object.entries(artemis.externalProviders).map(([provider, data]) => `
                                <div class="bg-gray-700 rounded-lg p-3">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-gray-300 font-medium">${provider.toUpperCase()}</span>
                                        <div class="w-2 h-2 bg-${data.status ? 'green' : 'red'}-400 rounded-full"></div>
                                    </div>
                                    <div class="text-sm text-gray-400">ÿπŸÖŸÑ⁄©ÿ±ÿØ: ${data.performance}%</div>
                                    <div class="text-sm text-gray-400">ÿßÿ≥ÿ™ŸÅÿßÿØŸá: ${data.usage.toLocaleString()}</div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
                
                <!-- System Summary -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h2 class="text-xl font-bold text-white mb-6">ÿÆŸÑÿßÿµŸá ÿ≥€åÿ≥ÿ™ŸÖ</h2>
                    
                    <!-- Key Metrics -->
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <span class="text-gray-400">⁄©ŸÑ ÿß€åÿ¨ŸÜÿ™‚ÄåŸáÿß</span>
                            <span class="text-2xl font-bold text-white">${this.state.agents.length}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-400">ÿß€åÿ¨ŸÜÿ™‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ</span>
                            <span class="text-2xl font-bold text-green-400">${activeAgents}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-400">ÿØÿ± ÿ≠ÿßŸÑ €åÿßÿØ⁄Ø€åÿ±€å</span>
                            <span class="text-2xl font-bold text-blue-400">${learningAgents}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-400">ÿØŸÇÿ™ ŸÖÿ™Ÿàÿ≥ÿ∑</span>
                            <span class="text-2xl font-bold text-purple-400">${avgAccuracy}%</span>
                        </div>
                    </div>
                    
                    <!-- Collective Intelligence -->
                    <div class="mt-6 pt-4 border-t border-gray-700">
                        <h3 class="text-lg font-semibold text-white mb-4">ŸáŸàÿ¥ ÿ¨ŸÖÿπ€å</h3>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">⁄©ÿßÿ±ÿß€å€å ÿßÿ≤ÿØÿ≠ÿßŸÖ</span>
                                <span class="text-green-400 font-bold">${artemis.collectiveIntelligence.swarmEfficiency}%</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿØÿßŸÜÿ¥</span>
                                <span class="text-blue-400 font-bold">${artemis.collectiveIntelligence.knowledgeSharing}%</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-gray-400 text-sm">ÿØŸÇÿ™ ÿßÿ¨ŸÖÿßÿπ</span>
                                <span class="text-purple-400 font-bold">${artemis.collectiveIntelligence.consensusAccuracy}%</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Emergent Capabilities -->
                    <div class="mt-4">
                        <h4 class="text-sm font-semibold text-gray-300 mb-2">ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ŸÜŸàÿ∏ŸáŸàÿ±</h4>
                        <div class="flex flex-wrap gap-2">
                            ${artemis.collectiveIntelligence.emergentCapabilities.map(capability => `
                                <span class="px-2 py-1 bg-purple-900 text-purple-300 text-xs rounded-full">
                                    ${capability}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Top Performing Agents -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™‚ÄåŸáÿß€å ÿ®ÿ±ÿ™ÿ±</h2>
                    <button onclick="aiTabInstance.switchView('agents')" 
                            class="text-blue-400 hover:text-blue-300 text-sm">
                        ŸÖÿ¥ÿßŸáÿØŸá ŸáŸÖŸá ‚Üí
                    </button>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    ${this.state.agents
                        .sort((a, b) => b.performance.accuracy - a.performance.accuracy)
                        .slice(0, 6)
                        .map(agent => `
                            <div class="ai-agent-card bg-gray-700 rounded-lg p-4 cursor-pointer" 
                                 onclick="aiTabInstance.selectAgent('${agent.id}')">
                                <div class="flex items-center justify-between mb-3">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mr-3">
                                            <span class="text-white text-xs font-bold">${agent.id.split('_')[1]}</span>
                                        </div>
                                        <div>
                                            <h3 class="text-white font-semibold text-sm">${agent.name}</h3>
                                            <p class="text-gray-400 text-xs">${agent.specialization}</p>
                                        </div>
                                    </div>
                                    <div class="w-2 h-2 bg-${agent.status === 'active' ? 'green' : agent.status === 'training' ? 'yellow' : 'red'}-400 rounded-full"></div>
                                </div>
                                
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-400 text-sm">ÿØŸÇÿ™</span>
                                    <span class="text-green-400 font-bold">${agent.performance.accuracy.toFixed(1)}%</span>
                                </div>
                                
                                <div class="w-full bg-gray-600 rounded-full h-2 mt-2">
                                    <div class="bg-green-400 h-2 rounded-full" style="width: ${agent.performance.accuracy}%"></div>
                                </div>
                                
                                <div class="mt-3 flex justify-between text-xs text-gray-400">
                                    <span>ÿ™ÿµŸÖ€åŸÖÿßÿ™: ${agent.performance.totalDecisions.toLocaleString()}</span>
                                    <span>ÿ≥ÿ∑ÿ≠: ${agent.performance.experienceLevel}</span>
                                </div>
                            </div>
                        `).join('')}
                </div>
            </div>
        `;
        
        document.getElementById('ai-management-content-area').innerHTML = content;
    }

    // Render agents view
    renderAgentsView() {
        const content = `
            <div class="space-y-6">
                <!-- Filters and Controls -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4 space-x-reverse">
                            <select id="agent-status-filter" onchange="aiTabInstance.filterAgents()" 
                                    class="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm">
                                <option value="all">ŸáŸÖŸá Ÿàÿ∂ÿπ€åÿ™‚ÄåŸáÿß</option>
                                <option value="active">ŸÅÿπÿßŸÑ</option>
                                <option value="training">ÿØÿ± ÿ≠ÿßŸÑ ÿ¢ŸÖŸàÿ≤ÿ¥</option>
                                <option value="offline">ÿ¢ŸÅŸÑÿß€åŸÜ</option>
                            </select>
                            <select id="agent-level-filter" onchange="aiTabInstance.filterAgents()" 
                                    class="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm">
                                <option value="all">ŸáŸÖŸá ÿ≥ÿ∑Ÿàÿ≠</option>
                                <option value="expert">ÿÆÿ®ÿ±Ÿá</option>
                                <option value="advanced">Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá</option>
                                <option value="intermediate">ŸÖÿ™Ÿàÿ≥ÿ∑</option>
                                <option value="beginner">ŸÖÿ®ÿ™ÿØ€å</option>
                            </select>
                        </div>
                        <div class="flex items-center space-x-2 space-x-reverse">
                            <button onclick="aiTabInstance.startMassTraining()" 
                                    class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                                <i class="fas fa-graduation-cap mr-1"></i>
                                ÿ¢ŸÖŸàÿ≤ÿ¥ ⁄Øÿ±ŸàŸá€å
                            </button>
                            <button onclick="aiTabInstance.toggleAllAgents()" 
                                    class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors">
                                <i class="fas fa-power-off mr-1"></i>
                                ŸÅÿπÿßŸÑ/ÿ∫€åÿ±ŸÅÿπÿßŸÑ ŸáŸÖŸá
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Agents Grid -->
                <div id="agents-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    ${this.renderAgentCards()}
                </div>
            </div>
        `;
        
        document.getElementById('ai-management-content-area').innerHTML = content;
    }

    // Render individual agent cards
    renderAgentCards() {
        return this.state.agents.map(agent => `
            <div class="ai-agent-card bg-gray-800 rounded-lg border border-gray-700 p-6">
                <!-- Header -->
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mr-3">
                            <span class="text-white font-bold">${agent.id.split('_')[1]}</span>
                        </div>
                        <div>
                            <h3 class="text-white font-bold">${agent.name}</h3>
                            <p class="text-gray-400 text-sm">${agent.specialization}</p>
                        </div>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-${agent.status === 'active' ? 'green' : agent.status === 'training' ? 'yellow' : 'red'}-400 rounded-full mr-2"></div>
                        <span class="text-${agent.status === 'active' ? 'green' : agent.status === 'training' ? 'yellow' : 'red'}-400 text-sm font-medium">
                            ${agent.status === 'active' ? 'ŸÅÿπÿßŸÑ' : agent.status === 'training' ? 'ÿ¢ŸÖŸàÿ≤ÿ¥' : 'ÿ¢ŸÅŸÑÿß€åŸÜ'}
                        </span>
                    </div>
                </div>
                
                <!-- Performance Metrics -->
                <div class="space-y-3 mb-4">
                    <!-- Accuracy -->
                    <div>
                        <div class="flex justify-between text-sm mb-1">
                            <span class="text-gray-400">ÿØŸÇÿ™</span>
                            <span class="text-green-400 font-bold">${agent.performance.accuracy.toFixed(1)}%</span>
                        </div>
                        <div class="w-full bg-gray-600 rounded-full h-2">
                            <div class="bg-green-400 h-2 rounded-full" style="width: ${agent.performance.accuracy}%"></div>
                        </div>
                    </div>
                    
                    <!-- Training Progress -->
                    <div>
                        <div class="flex justify-between text-sm mb-1">
                            <span class="text-gray-400">Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿ¢ŸÖŸàÿ≤ÿ¥</span>
                            <span class="text-blue-400 font-bold">${agent.performance.trainingProgress}%</span>
                        </div>
                        <div class="w-full bg-gray-600 rounded-full h-2">
                            <div class="bg-blue-400 h-2 rounded-full" style="width: ${agent.performance.trainingProgress}%"></div>
                        </div>
                    </div>
                    
                    <!-- Success Rate -->
                    <div>
                        <div class="flex justify-between text-sm mb-1">
                            <span class="text-gray-400">ŸÜÿ±ÿÆ ŸÖŸàŸÅŸÇ€åÿ™</span>
                            <span class="text-purple-400 font-bold">${agent.performance.successRate.toFixed(1)}%</span>
                        </div>
                        <div class="w-full bg-gray-600 rounded-full h-2">
                            <div class="bg-purple-400 h-2 rounded-full" style="width: ${agent.performance.successRate}%"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Statistics -->
                <div class="grid grid-cols-2 gap-3 mb-4">
                    <div class="bg-gray-700 rounded-lg p-3 text-center">
                        <div class="text-lg font-bold text-white">${agent.performance.totalDecisions.toLocaleString()}</div>
                        <div class="text-xs text-gray-400">ÿ™ÿµŸÖ€åŸÖÿßÿ™</div>
                    </div>
                    <div class="bg-gray-700 rounded-lg p-3 text-center">
                        <div class="text-lg font-bold text-white">${agent.learning.hoursLearned.toFixed(0)}</div>
                        <div class="text-xs text-gray-400">ÿ≥ÿßÿπÿ™ €åÿßÿØ⁄Ø€åÿ±€å</div>
                    </div>
                    <div class="bg-gray-700 rounded-lg p-3 text-center">
                        <div class="text-lg font-bold text-white">${(agent.learning.knowledgeBase / 1024).toFixed(1)}MB</div>
                        <div class="text-xs text-gray-400">ÿØÿßŸÜÿ¥ ÿ∞ÿÆ€åÿ±Ÿá</div>
                    </div>
                    <div class="bg-gray-700 rounded-lg p-3 text-center">
                        <div class="text-lg font-bold text-${agent.performance.experienceLevel === 'expert' ? 'green' : agent.performance.experienceLevel === 'advanced' ? 'blue' : agent.performance.experienceLevel === 'intermediate' ? 'yellow' : 'gray'}-400">
                            ${agent.performance.experienceLevel === 'expert' ? 'ÿÆÿ®ÿ±Ÿá' : 
                              agent.performance.experienceLevel === 'advanced' ? 'Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá' :
                              agent.performance.experienceLevel === 'intermediate' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : 'ŸÖÿ®ÿ™ÿØ€å'}
                        </div>
                        <div class="text-xs text-gray-400">ÿ≥ÿ∑ÿ≠</div>
                    </div>
                </div>
                
                <!-- Capabilities -->
                <div class="mb-4">
                    <h4 class="text-sm font-semibold text-gray-300 mb-2">ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß</h4>
                    <div class="flex flex-wrap gap-1">
                        ${agent.capabilities.slice(0, 3).map(capability => `
                            <span class="px-2 py-1 bg-blue-900 text-blue-300 text-xs rounded-full">
                                ${capability}
                            </span>
                        `).join('')}
                        ${agent.capabilities.length > 3 ? `<span class="px-2 py-1 bg-gray-600 text-gray-300 text-xs rounded-full">+${agent.capabilities.length - 3}</span>` : ''}
                    </div>
                </div>
                
                <!-- Actions -->
                <div class="flex space-x-2 space-x-reverse">
                    ${agent.id === 'agent_01' ? `
                    <button onclick="aiTabInstance.showAgent01Details()" 
                            class="flex-1 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-cogs mr-1"></i>
                        ŸæŸÜŸÑ ⁄©ŸÜÿ™ÿ±ŸÑ
                    </button>
                    ` : agent.id === 'agent_02' ? `
                    <button onclick="aiTabInstance.showAgent02Details()" 
                            class="flex-1 px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-shield-alt mr-1"></i>
                        ŸæŸÜŸÑ ÿ±€åÿ≥⁄©
                    </button>
                    ` : agent.id === 'agent_03' ? `
                    <button onclick="aiTabInstance.showAgent03Details()" 
                            class="flex-1 px-3 py-2 bg-pink-600 hover:bg-pink-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-heart mr-1"></i>
                        ŸæŸÜŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™
                    </button>
                    ` : agent.id === 'agent_04' ? `
                    <button onclick="aiTabInstance.showAgent04Details()" 
                            class="flex-1 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-chart-pie mr-1"></i>
                        ŸæŸÜŸÑ Ÿæÿ±ÿ™ŸÅŸà
                    </button>
                    ` : agent.id === 'agent_05' ? `
                    <button onclick="aiTabInstance.showAgent05Details()" 
                            class="flex-1 px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-exchange-alt mr-1"></i>
                        ŸæŸÜŸÑ ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ±
                    </button>
                    ` : agent.id === 'agent_06' ? `
                    <button onclick="aiTabInstance.showAgent06Details()" 
                            class="flex-1 px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-robot mr-1"></i>
                        ŸæŸÜŸÑ ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄©
                    </button>
                    ` : agent.id === 'agent_07' ? `
                    <button onclick="aiTabInstance.showAgent07Details()" 
                            class="flex-1 px-3 py-2 bg-teal-600 hover:bg-teal-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-newspaper mr-1"></i>
                        ŸæŸÜŸÑ ÿßÿÆÿ®ÿßÿ±
                    </button>
                    ` : `
                    <button onclick="aiTabInstance.toggleAgentStatus('${agent.id}')" 
                            class="flex-1 px-3 py-2 bg-${agent.status === 'active' ? 'red' : 'green'}-600 hover:bg-${agent.status === 'active' ? 'red' : 'green'}-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-power-off mr-1"></i>
                        ${agent.status === 'active' ? 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ' : 'ŸÅÿπÿßŸÑ'}
                    `}
                    </button>
                    <button onclick="aiTabInstance.startAgentTraining('${agent.id}')" 
                            class="flex-1 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-graduation-cap mr-1"></i>
                        ÿ¢ŸÖŸàÿ≤ÿ¥
                    </button>
                    <button onclick="aiTabInstance.viewAgentDetails('${agent.id}')" 
                            class="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
                        <i class="fas fa-info-circle"></i>
                    </button>
                </div>
                
                <!-- Last Update -->
                <div class="mt-3 pt-3 border-t border-gray-700 text-xs text-gray-400 text-center">
                    ÿ¢ÿÆÿ±€åŸÜ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å: ${new Date(agent.performance.lastUpdate).toLocaleString('fa-IR')}
                </div>
            </div>
        `).join('');
    }

    // Render training view
    renderTrainingView() {
        const content = `
            <div class="space-y-6">
                <!-- Training Controls -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-bold text-white">ŸÖÿ±⁄©ÿ≤ ÿ¢ŸÖŸàÿ≤ÿ¥ ŸáŸàÿ¥ ŸÖÿµŸÜŸàÿπ€å</h2>
                        <div class="flex items-center space-x-2 space-x-reverse">
                            <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                            <span class="text-green-400 text-sm">ÿ≥€åÿ≥ÿ™ŸÖ ÿ¢ŸÖÿßÿØŸá</span>
                        </div>
                    </div>
                    
                    <!-- Quick Training Options -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <button onclick="aiTabInstance.quickTraining('individual')" 
                                class="p-4 bg-blue-600 hover:bg-blue-700 rounded-lg text-white transition-colors">
                            <i class="fas fa-user text-2xl mb-2"></i>
                            <div class="font-semibold">ÿ¢ŸÖŸàÿ≤ÿ¥ ŸÅÿ±ÿØ€å</div>
                            <div class="text-sm opacity-80">ÿ®Ÿáÿ®ŸàÿØ €å⁄© ÿß€åÿ¨ŸÜÿ™</div>
                        </button>
                        <button onclick="aiTabInstance.quickTraining('collective')" 
                                class="p-4 bg-purple-600 hover:bg-purple-700 rounded-lg text-white transition-colors">
                            <i class="fas fa-users text-2xl mb-2"></i>
                            <div class="font-semibold">ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ¨ŸÖÿπ€å</div>
                            <div class="text-sm opacity-80">ÿ®Ÿáÿ®ŸàÿØ ⁄©ŸÑ ÿ™€åŸÖ</div>
                        </button>
                        <button onclick="aiTabInstance.quickTraining('cross')" 
                                class="p-4 bg-green-600 hover:bg-green-700 rounded-lg text-white transition-colors">
                            <i class="fas fa-exchange-alt text-2xl mb-2"></i>
                            <div class="font-semibold">ÿ¢ŸÖŸàÿ≤ÿ¥ ŸÖÿ™ŸÇÿßÿ®ŸÑ</div>
                            <div class="text-sm opacity-80">ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿØÿßŸÜÿ¥</div>
                        </button>
                    </div>
                    
                    <!-- Custom Training Setup -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-semibold text-white mb-4">ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ≥ŸÅÿßÿ±ÿ¥€å</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-300 text-sm mb-2">ÿßŸÜÿ™ÿÆÿßÿ® ÿß€åÿ¨ŸÜÿ™‚ÄåŸáÿß</label>
                                <select multiple id="training-agents" class="w-full bg-gray-600 border border-gray-500 rounded-lg px-3 py-2 text-white text-sm h-24">
                                    ${this.state.agents.map(agent => `
                                        <option value="${agent.id}">${agent.name} (${agent.performance.experienceLevel})</option>
                                    `).join('')}
                                </select>
                            </div>
                            <div>
                                <label class="block text-gray-300 text-sm mb-2">ŸÖŸàÿ∂Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥</label>
                                <select id="training-topic" class="w-full bg-gray-600 border border-gray-500 rounded-lg px-3 py-2 text-white text-sm mb-3">
                                    <option value="market_analysis">ÿ™ÿ≠ŸÑ€åŸÑ ÿ®ÿßÿ≤ÿßÿ±</option>
                                    <option value="risk_management">ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄©</option>
                                    <option value="pattern_recognition">ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿßŸÑ⁄ØŸà</option>
                                    <option value="sentiment_analysis">ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</option>
                                    <option value="decision_making">ÿ™ÿµŸÖ€åŸÖ‚Äå⁄Ø€åÿ±€å</option>
                                    <option value="coordination">ŸáŸÖÿßŸáŸÜ⁄Ø€å ÿ™€åŸÖ€å</option>
                                </select>
                                <button onclick="aiTabInstance.startCustomTraining()" 
                                        class="w-full px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
                                    <i class="fas fa-play mr-2"></i>
                                    ÿ¥ÿ±Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ≥ŸÅÿßÿ±ÿ¥€å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Learning Analytics -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h2 class="text-xl font-bold text-white mb-4">ÿ¢ŸÜÿßŸÑ€åÿ™€å⁄©ÿ≥ €åÿßÿØ⁄Ø€åÿ±€å</h2>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-400">${this.state.agents.reduce((sum, a) => sum + a.learning.hoursLearned, 0).toFixed(0)}</div>
                            <div class="text-sm text-gray-400">ÿ≥ÿßÿπÿ™ €åÿßÿØ⁄Ø€åÿ±€å ⁄©ŸÑ</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-400">${this.state.agents.reduce((sum, a) => sum + a.learning.totalSessions, 0)}</div>
                            <div class="text-sm text-gray-400">ÿ¨ŸÑÿ≥ÿßÿ™ ÿ¢ŸÖŸàÿ≤ÿ¥</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-400">${(this.state.agents.reduce((sum, a) => sum + a.learning.knowledgeBase, 0) / 1024 / 1024).toFixed(1)}GB</div>
                            <div class="text-sm text-gray-400">ÿØÿßŸÜÿ¥ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸá</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-yellow-400">${this.state.agents.filter(a => a.learning.currentlyLearning).length}</div>
                            <div class="text-sm text-gray-400">ÿØÿ± ÿ≠ÿßŸÑ €åÿßÿØ⁄Ø€åÿ±€å</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('ai-management-content-area').innerHTML = content;
    }

    // Render analytics view
    renderAnalyticsView() {
        const content = `
            <div class="space-y-6">
                <!-- Performance Overview -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Charts would go here -->
                    <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                        <h3 class="text-lg font-bold text-white mb-4">ÿ±ŸàŸÜÿØ ÿπŸÖŸÑ⁄©ÿ±ÿØ</h3>
                        <div class="h-64 bg-gray-900 rounded-lg p-4">
                            <canvas id="ai-performance-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                    
                    <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                        <h3 class="text-lg font-bold text-white mb-4">ÿ™Ÿàÿ≤€åÿπ ÿØŸÇÿ™</h3>
                        <div class="h-64 bg-gray-900 rounded-lg p-4">
                            <canvas id="ai-accuracy-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>
                
                <!-- Detailed Analytics -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h2 class="text-xl font-bold text-white mb-4">ÿ™ÿ≠ŸÑ€åŸÑ ÿ¨ÿßŸÖÿπ ÿπŸÖŸÑ⁄©ÿ±ÿØ</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-400">${this.state.agents.reduce((sum, a) => sum + a.learning.hoursLearned, 0).toFixed(0)}</div>
                            <div class="text-sm text-gray-400">ÿ≥ÿßÿπÿ™ €åÿßÿØ⁄Ø€åÿ±€å ⁄©ŸÑ</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-400">${(this.state.agents.reduce((sum, a) => sum + a.performance.accuracy, 0) / this.state.agents.length).toFixed(1)}%</div>
                            <div class="text-sm text-gray-400">ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ÿØŸÇÿ™</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-400">${(this.state.agents.reduce((sum, a) => sum + a.learning.knowledgeBase, 0) / 1024).toFixed(1)}MB</div>
                            <div class="text-sm text-gray-400">Ÿæÿß€å⁄ØÿßŸá ÿØÿßŸÜÿ¥</div>
                        </div>
                        <div class="bg-gray-700 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-yellow-400">8.7%</div>
                            <div class="text-sm text-gray-400">ŸÜÿ±ÿÆ ÿ®Ÿáÿ®ŸàÿØ</div>
                        </div>
                    </div>
                    
                    <!-- Knowledge Distribution -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-semibold text-white mb-4">ÿ™Ÿàÿ≤€åÿπ ÿ≥ÿ∑ÿ≠ ÿØÿßŸÜÿ¥</h3>
                        <div class="grid grid-cols-4 gap-3">
                            <div class="text-center">
                                <div class="text-xl font-bold text-gray-400">${this.state.agents.filter(a => a.performance.experienceLevel === 'beginner').length}</div>
                                <div class="text-sm text-gray-500">ŸÖÿ®ÿ™ÿØ€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-xl font-bold text-yellow-400">${this.state.agents.filter(a => a.performance.experienceLevel === 'intermediate').length}</div>
                                <div class="text-sm text-gray-500">ŸÖÿ™Ÿàÿ≥ÿ∑</div>
                            </div>
                            <div class="text-center">
                                <div class="text-xl font-bold text-blue-400">${this.state.agents.filter(a => a.performance.experienceLevel === 'advanced').length}</div>
                                <div class="text-sm text-gray-500">Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá</div>
                            </div>
                            <div class="text-center">
                                <div class="text-xl font-bold text-green-400">${this.state.agents.filter(a => a.performance.experienceLevel === 'expert').length}</div>
                                <div class="text-sm text-gray-500">ÿÆÿ®ÿ±Ÿá</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('ai-management-content-area').innerHTML = content;
    }

    // Render API configuration view
    renderConfigView() {
        const content = `
            <div class="space-y-6">
                <!-- OpenAI Configuration -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center">
                            <i class="fas fa-brain text-green-400 text-2xl ml-3"></i>
                            <div>
                                <h3 class="text-xl font-bold text-white">OpenAI (GPT)</h3>
                                <p class="text-gray-400">ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ŸÖÿØŸÑ‚ÄåŸáÿß€å GPT ÿ®ÿ±ÿß€å ÿ™ÿ≠ŸÑ€åŸÑ ÿ®ÿßÿ≤ÿßÿ± Ÿà ÿ™ŸàŸÑ€åÿØ ŸÖÿ≠ÿ™Ÿàÿß</p>
                            </div>
                        </div>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="openai-enabled" class="sr-only peer" ${this.settings.openai?.enabled ? 'checked' : ''}>
                            <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                        </label>
                    </div>
                    
                    <div id="openai-config" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-300 mb-2">API Key</label>
                            <input type="password" id="openai-api-key" value="${this.settings.openai?.api_key || ''}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-green-500"
                                   placeholder="sk-...">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">ŸÖÿØŸÑ GPT</label>
                            <select id="openai-model" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-green-500">
                                <option value="gpt-4" ${this.settings.openai?.model === 'gpt-4' ? 'selected' : ''}>GPT-4</option>
                                <option value="gpt-4-turbo" ${this.settings.openai?.model === 'gpt-4-turbo' ? 'selected' : ''}>GPT-4 Turbo</option>
                                <option value="gpt-3.5-turbo" ${this.settings.openai?.model === 'gpt-3.5-turbo' ? 'selected' : ''}>GPT-3.5 Turbo</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Temperature (${this.settings.openai?.temperature || 0.7})</label>
                            <input type="range" id="openai-temperature" min="0" max="1" step="0.1" 
                                   value="${this.settings.openai?.temperature || 0.7}" 
                                   class="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer slider">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Max Tokens</label>
                            <input type="number" id="openai-max-tokens" value="${this.settings.openai?.max_tokens || 2000}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-green-500"
                                   min="1" max="32000">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">ÿØÿ±ÿÆŸàÿßÿ≥ÿ™‚ÄåŸáÿß€å ÿ±Ÿàÿ≤ÿßŸÜŸá</label>
                            <input type="number" id="openai-daily-limit" value="${this.settings.openai?.daily_limit || 1000}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-green-500">
                        </div>
                    </div>
                    
                    <div class="mt-4 flex space-x-2 space-x-reverse">
                        <button onclick="aiTabInstance.testOpenAI()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                            <i class="fas fa-vial mr-2"></i>
                            ÿ™ÿ≥ÿ™ API
                        </button>
                        <button onclick="aiTabInstance.checkOpenAIUsage()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-chart-line mr-2"></i>
                            ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿµÿ±ŸÅ
                        </button>
                    </div>
                </div>

                <!-- Anthropic Claude Configuration -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center">
                            <i class="fas fa-microchip text-orange-400 text-2xl ml-3"></i>
                            <div>
                                <h3 class="text-xl font-bold text-white">Anthropic Claude</h3>
                                <p class="text-gray-400">ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ŸÖÿØŸÑ‚ÄåŸáÿß€å Claude ÿ®ÿ±ÿß€å ÿ™ÿ≠ŸÑ€åŸÑ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá</p>
                            </div>
                        </div>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="anthropic-enabled" class="sr-only peer" ${this.settings.anthropic?.enabled ? 'checked' : ''}>
                            <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-600"></div>
                        </label>
                    </div>
                    
                    <div id="anthropic-config" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-300 mb-2">API Key</label>
                            <input type="password" id="anthropic-api-key" value="${this.settings.anthropic?.api_key || ''}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">ŸÖÿØŸÑ Claude</label>
                            <select id="anthropic-model" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500">
                                <option value="claude-3-opus" ${this.settings.anthropic?.model === 'claude-3-opus' ? 'selected' : ''}>Claude-3 Opus</option>
                                <option value="claude-3-sonnet" ${this.settings.anthropic?.model === 'claude-3-sonnet' ? 'selected' : ''}>Claude-3 Sonnet</option>
                                <option value="claude-3-haiku" ${this.settings.anthropic?.model === 'claude-3-haiku' ? 'selected' : ''}>Claude-3 Haiku</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Max Tokens</label>
                            <input type="number" id="anthropic-max-tokens" value="${this.settings.anthropic?.max_tokens || 4000}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500">
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <button onclick="aiTabInstance.testAnthropic()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
                            <i class="fas fa-vial mr-2"></i>
                            ÿ™ÿ≥ÿ™ API
                        </button>
                    </div>
                </div>

                <!-- Google AI Configuration -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center">
                            <i class="fab fa-google text-blue-400 text-2xl ml-3"></i>
                            <div>
                                <h3 class="text-xl font-bold text-white">Google AI (Gemini)</h3>
                                <p class="text-gray-400">ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ŸÖÿØŸÑ‚ÄåŸáÿß€å Gemini ÿ®ÿ±ÿß€å ÿ™ÿ≠ŸÑ€åŸÑ ⁄ÜŸÜÿØŸàÿ¨Ÿá€å</p>
                            </div>
                        </div>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="google-enabled" class="sr-only peer" ${this.settings.google?.enabled ? 'checked' : ''}>
                            <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        </label>
                    </div>
                    
                    <div id="google-config" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-300 mb-2">API Key</label>
                            <input type="password" id="google-api-key" value="${this.settings.google?.api_key || ''}" 
                                   class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">ŸÖÿØŸÑ Gemini</label>
                            <select id="google-model" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                <option value="gemini-pro" ${this.settings.google?.model === 'gemini-pro' ? 'selected' : ''}>Gemini Pro</option>
                                <option value="gemini-pro-vision" ${this.settings.google?.model === 'gemini-pro-vision' ? 'selected' : ''}>Gemini Pro Vision</option>
                                <option value="gemini-ultra" ${this.settings.google?.model === 'gemini-ultra' ? 'selected' : ''}>Gemini Ultra</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Safety Settings</label>
                            <select id="google-safety" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                <option value="BLOCK_NONE">ÿ®ÿØŸàŸÜ ŸÅ€åŸÑÿ™ÿ±</option>
                                <option value="BLOCK_ONLY_HIGH" selected>ŸÅŸÇÿ∑ ŸÖÿ≠ÿ™Ÿàÿß€å ÿÆÿ∑ÿ±ŸÜÿß⁄©</option>
                                <option value="BLOCK_MEDIUM_AND_ABOVE">ŸÖÿ™Ÿàÿ≥ÿ∑ Ÿà ÿ®ÿßŸÑÿß</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <button onclick="aiTabInstance.testGoogle()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-vial mr-2"></i>
                            ÿ™ÿ≥ÿ™ API
                        </button>
                    </div>
                </div>

                <!-- Trading AI Strategies -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4">
                        <i class="fas fa-chart-line text-purple-400 ml-2"></i>
                        ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å‚ÄåŸáÿß€å AI ŸÖÿπÿßŸÖŸÑÿßÿ™€å
                    </h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-green-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ AI</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="technical-analysis" checked>
                            </div>
                            <p class="text-sm text-gray-400">ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ AI ÿ®ÿ±ÿß€å ÿ™ÿ¥ÿÆ€åÿµ ÿßŸÑ⁄ØŸàŸáÿß€å ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">ÿßÿπÿ™ŸÖÿßÿØ ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤</label>
                                <input type="range" class="w-full h-1 bg-gray-600 rounded-lg mt-1" min="60" max="95" value="80">
                                <span class="text-xs text-green-400">80%</span>
                            </div>
                        </div>
                        
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-blue-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™ ÿ®ÿßÿ≤ÿßÿ±</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="sentiment-analysis" checked>
                            </div>
                            <p class="text-sm text-gray-400">ÿ™ÿ¨ÿ≤€åŸá‚ÄåŸàÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™ ÿßÿ≤ ÿßÿÆÿ®ÿßÿ± Ÿà ÿ±ÿ≥ÿßŸÜŸá‚ÄåŸáÿß</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">Ÿàÿ≤ŸÜ ÿ™ÿ£ÿ´€åÿ±</label>
                                <input type="range" class="w-full h-1 bg-gray-600 rounded-lg mt-1" min="10" max="50" value="25">
                                <span class="text-xs text-blue-400">25%</span>
                            </div>
                        </div>
                        
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-purple-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ŸÇ€åŸÖÿ™ ML</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="price-prediction" checked>
                            </div>
                            <p class="text-sm text-gray-400">ŸÖÿØŸÑ‚ÄåŸáÿß€å €åÿßÿØ⁄Ø€åÿ±€å ŸÖÿßÿ¥€åŸÜ ÿ®ÿ±ÿß€å Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">ÿ®ÿßÿ≤Ÿá ÿ≤ŸÖÿßŸÜ€å</label>
                                <select class="w-full text-xs bg-gray-700 text-white rounded mt-1">
                                    <option>5 ÿØŸÇ€åŸÇŸá</option>
                                    <option selected>15 ÿØŸÇ€åŸÇŸá</option>
                                    <option>1 ÿ≥ÿßÿπÿ™</option>
                                    <option>4 ÿ≥ÿßÿπÿ™</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-red-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄© ŸáŸàÿ¥ŸÖŸÜÿØ</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="risk-management" checked>
                            </div>
                            <p class="text-sm text-gray-400">ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿÆŸàÿØ⁄©ÿßÿ± stop-loss Ÿà take-profit</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">ÿ≠ÿØÿß⁄©ÿ´ÿ± ÿ±€åÿ≥⁄©</label>
                                <input type="range" class="w-full h-1 bg-gray-600 rounded-lg mt-1" min="1" max="10" value="3">
                                <span class="text-xs text-red-400">3%</span>
                            </div>
                        </div>
                        
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-yellow-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">ÿ™ÿ¥ÿÆ€åÿµ ÿßŸÑ⁄ØŸàŸáÿß€å ŸÜŸàÿ≥ÿßŸÜÿßÿ™</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="volatility-patterns">
                            </div>
                            <p class="text-sm text-gray-400">ÿ¥ŸÜÿßÿ≥ÿß€å€å ÿØŸàÿ±Ÿá‚ÄåŸáÿß€å ⁄©ŸÖ Ÿà Ÿæÿ± ŸÜŸàÿ≥ÿßŸÜ</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">ÿ≠ÿ≥ÿßÿ≥€åÿ™</label>
                                <select class="w-full text-xs bg-gray-700 text-white rounded mt-1">
                                    <option>⁄©ŸÖ</option>
                                    <option selected>ŸÖÿ™Ÿàÿ≥ÿ∑</option>
                                    <option>ÿ≤€åÿßÿØ</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="p-4 bg-gray-800 rounded-lg border-l-4 border-indigo-500">
                            <div class="flex items-center justify-between mb-2">
                                <span class="font-medium text-white">ÿ™ÿ≠ŸÑ€åŸÑ ŸáŸÖÿ®ÿ≥ÿ™⁄Ø€å ÿØÿßÿ±ÿß€å€å‚ÄåŸáÿß</span>
                                <input type="checkbox" class="ai-strategy" data-strategy="correlation-analysis">
                            </div>
                            <p class="text-sm text-gray-400">ÿ®ÿ±ÿ±ÿ≥€å ÿ±Ÿàÿßÿ®ÿ∑ ÿ®€åŸÜ ÿØÿßÿ±ÿß€å€å‚ÄåŸáÿß€å ŸÖÿÆÿ™ŸÑŸÅ</p>
                            <div class="mt-2">
                                <label class="text-xs text-gray-500">ÿ™ÿπÿØÿßÿØ ÿØÿßÿ±ÿß€å€å</label>
                                <input type="number" class="w-full text-xs bg-gray-700 text-white rounded mt-1 p-1" min="5" max="50" value="20">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- AI Performance Monitoring -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4">
                        <i class="fas fa-tachometer-alt text-green-400 ml-2"></i>
                        ŸÜÿ∏ÿßÿ±ÿ™ ÿ®ÿ± ÿπŸÖŸÑ⁄©ÿ±ÿØ AI
                    </h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="bg-gray-800 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-400">87.5%</div>
                            <div class="text-sm text-gray-400">ÿØŸÇÿ™ Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å</div>
                        </div>
                        
                        <div class="bg-gray-800 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-400">156</div>
                            <div class="text-sm text-gray-400">ÿ™ÿ≠ŸÑ€åŸÑ ÿßŸÖÿ±Ÿàÿ≤</div>
                        </div>
                        
                        <div class="bg-gray-800 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-400">92.3%</div>
                            <div class="text-sm text-gray-400">ŸÜÿ±ÿÆ ŸÖŸàŸÅŸÇ€åÿ™</div>
                        </div>
                        
                        <div class="bg-gray-800 rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-yellow-400">2.8s</div>
                            <div class="text-sm text-gray-400">ŸÖÿ™Ÿàÿ≥ÿ∑ Ÿæÿßÿ≥ÿÆ</div>
                        </div>
                    </div>
                    
                    <div class="flex flex-wrap gap-2">
                        <button onclick="aiTabInstance.viewAILogs()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                            <i class="fas fa-list mr-2"></i>
                            ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß
                        </button>
                        <button onclick="aiTabInstance.exportAIMetrics()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-download mr-2"></i>
                            ÿµÿßÿØÿ±ÿßÿ™ ŸÖÿ™ÿ±€å⁄©‚ÄåŸáÿß
                        </button>
                        <button onclick="aiTabInstance.retrainModels()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                            <i class="fas fa-sync mr-2"></i>
                            ÿ®ÿßÿ≤ÿ¢ŸÖŸàÿ≤€å ŸÖÿØŸÑ‚ÄåŸáÿß
                        </button>
                        <button onclick="aiTabInstance.clearAICache()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            <i class="fas fa-trash mr-2"></i>
                            Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ⁄©ÿ¥
                        </button>
                    </div>
                </div>

                <!-- AI Security & Privacy -->
                <div class="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4">
                        <i class="fas fa-shield-alt text-red-400 ml-2"></i>
                        ÿßŸÖŸÜ€åÿ™ Ÿà ÿ≠ÿ±€åŸÖ ÿÆÿµŸàÿµ€å AI
                    </h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="space-y-4">
                            <div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                                <span class="text-white">ÿ±ŸÖÿ≤ŸÜ⁄Øÿßÿ±€å ÿØÿßÿØŸá‚ÄåŸáÿß</span>
                                <input type="checkbox" id="ai-encrypt-data" checked class="toggle-checkbox">
                            </div>
                            
                            <div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                                <span class="text-white">ÿ≠ÿ∞ŸÅ ÿÆŸàÿØ⁄©ÿßÿ± ŸÑÿß⁄Ø‚ÄåŸáÿß</span>
                                <input type="checkbox" id="ai-auto-delete-logs" class="toggle-checkbox">
                            </div>
                            
                            <div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                                <span class="text-white">ŸÖÿ≠ÿØŸàÿØ€åÿ™ ŸÜÿ±ÿÆ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™</span>
                                <input type="checkbox" id="ai-rate-limiting" checked class="toggle-checkbox">
                            </div>
                        </div>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm text-gray-300 mb-2">ŸÖÿØÿ™ ŸÜ⁄ØŸáÿØÿßÿ±€å ÿØÿßÿØŸá‚ÄåŸáÿß (ÿ±Ÿàÿ≤)</label>
                                <input type="number" id="ai-data-retention" value="30" min="7" max="365" 
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
                            </div>
                            
                            <div>
                                <label class="block text-sm text-gray-300 mb-2">ÿ≥ÿ∑ÿ≠ ÿßŸÖŸÜ€åÿ™€å</label>
                                <select id="ai-security-level" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
                                    <option value="standard">ÿßÿ≥ÿ™ÿßŸÜÿØÿßÿ±ÿØ</option>
                                    <option value="high" selected>ÿ®ÿßŸÑÿß</option>
                                    <option value="maximum">ÿ≠ÿØÿß⁄©ÿ´ÿ±</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="block text-sm text-gray-300 mb-2">ÿ™ÿπÿØÿßÿØ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿØÿ± ÿ≥ÿßÿπÿ™</label>
                                <input type="number" id="ai-hourly-limit" value="1000" min="100" max="10000" 
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('ai-management-content-area').innerHTML = content;
        
        // Re-setup handlers after rendering config view
        this.setupToggleHandlers();
        this.setupRangeSliders();
        this.setupStrategyHandlers();
    }

    setupToggleHandlers() {
        const services = ['openai', 'anthropic', 'google'];
        
        services.forEach(service => {
            const checkbox = document.getElementById(`${service}-enabled`);
            const config = document.getElementById(`${service}-config`);
            
            if (checkbox && config) {
                checkbox.addEventListener('change', () => {
                    config.style.opacity = checkbox.checked ? '1' : '0.5';
                    config.style.pointerEvents = checkbox.checked ? 'auto' : 'none';
                });
                
                // Set initial state
                config.style.opacity = checkbox.checked ? '1' : '0.5';
                config.style.pointerEvents = checkbox.checked ? 'auto' : 'none';
            }
        });
    }

    setupRangeSliders() {
        const tempSlider = document.getElementById('openai-temperature');
        if (tempSlider) {
            tempSlider.addEventListener('input', (e) => {
                const label = document.querySelector('label[for="openai-temperature"]');
                if (label) {
                    label.textContent = `Temperature (${e.target.value})`;
                }
            });
        }
    }

    setupStrategyHandlers() {
        const strategies = document.querySelectorAll('.ai-strategy');
        strategies.forEach(strategy => {
            strategy.addEventListener('change', () => {
                console.log(`AI Strategy ${strategy.dataset.strategy} toggled:`, strategy.checked);
            });
        });
    }

    // AI Management Functions
    async toggleAgentStatus(agentId) {
        try {
            const agent = this.state.agents.find(a => a.id === agentId);
            const newStatus = agent.status === 'active' ? 'offline' : 'active';
            
            // Handle real agents (01, 02) differently
            if (agentId === 'agent_01') {
                // Technical Analysis Agent
                if (typeof window.TechnicalAnalysisAgent !== 'undefined') {
                    if (newStatus === 'active') {
                        console.log('üéØ Activating Technical Analysis Agent...');
                        // Agent is already loaded and initialized
                    } else {
                        console.log('‚è∏Ô∏è Deactivating Technical Analysis Agent...');
                    }
                }
            } else if (agentId === 'agent_02') {
                // Risk Management Agent
                if (typeof window.RiskManagementAgent !== 'undefined') {
                    if (newStatus === 'active') {
                        console.log('‚ö° Activating Risk Management Agent...');
                        // Agent is already loaded and initialized
                    } else {
                        console.log('‚è∏Ô∏è Deactivating Risk Management Agent...');
                    }
                }
            }
            
            // Update local state
            agent.status = newStatus;
            this.updateCurrentView();
            
            const statusText = newStatus === 'active' ? 'ŸÅÿπÿßŸÑ' : 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ';
            alert(`ÿß€åÿ¨ŸÜÿ™ ${agent.name} ${statusText} ÿ¥ÿØ`);
            
        } catch (error) {
            console.error('Error toggling agent status:', error);
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™ ÿß€åÿ¨ŸÜÿ™');
        }
    }

    async startAgentTraining(agentId) {
        try {
            const agent = this.state.agents.find(a => a.id === agentId);
            
            // Handle real agents training
            if (agentId === 'agent_01') {
                // Technical Analysis Agent Training
                if (typeof window.TechnicalAnalysisAgent !== 'undefined') {
                    console.log('üìä Starting Technical Analysis Agent training...');
                    // In real implementation, would call agent.startTraining()
                }
            } else if (agentId === 'agent_02') {
                // Risk Management Agent Training
                if (typeof window.RiskManagementAgent !== 'undefined') {
                    console.log('‚öñÔ∏è Starting Risk Management Agent training...');
                    // In real implementation, would call agent.startTraining()
                }
            }
            
            agent.status = 'training';
            this.updateCurrentView();
            
            alert(`ÿ¢ŸÖŸàÿ≤ÿ¥ ÿß€åÿ¨ŸÜÿ™ ${agent.name} ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ`);
            
            // Simulate training completion after 5 seconds for real agents
            if (agentId === 'agent_01' || agentId === 'agent_02') {
                setTimeout(() => {
                    agent.status = 'active';
                    agent.performance.trainingProgress = Math.min(100, agent.performance.trainingProgress + 2);
                    agent.performance.accuracy = Math.min(95, agent.performance.accuracy + 0.5);
                    this.updateCurrentView();
                    console.log(`‚úÖ Agent ${agentId} training completed`);
                }, 5000);
            }
            
        } catch (error) {
            console.error('Error starting agent training:', error);
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿ¥ÿ±Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥');
        }
    }

    viewAgentDetails(agentId) {
        const agent = this.state.agents.find(a => a.id === agentId);
        if (!agent) {
            alert('ÿß€åÿ¨ŸÜÿ™ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ');
            return;
        }

        const modalContent = `
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-2 sm:p-4" onclick="this.remove()">
                <div class="bg-gray-800 rounded-lg p-3 sm:p-4 lg:p-6 w-full max-w-xs sm:max-w-lg lg:max-w-4xl max-h-[95vh] sm:max-h-[90vh] overflow-y-auto shadow-2xl" onclick="event.stopPropagation()">
                    <!-- Header -->
                    <div class="flex flex-col sm:flex-row sm:items-center justify-between mb-6 gap-4">
                        <div class="flex items-center">
                            <div class="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mr-3 sm:mr-4">
                                <span class="text-white font-bold text-lg sm:text-xl">${agent.id.split('_')[1]}</span>
                            </div>
                            <div>
                                <h3 class="text-xl sm:text-2xl font-bold text-white">${agent.name}</h3>
                                <p class="text-gray-400 text-sm sm:text-base">${agent.specialization}</p>
                                <div class="flex items-center mt-2">
                                    <div class="w-3 h-3 bg-${agent.status === 'active' ? 'green' : agent.status === 'training' ? 'yellow' : 'red'}-400 rounded-full mr-2"></div>
                                    <span class="text-${agent.status === 'active' ? 'green' : agent.status === 'training' ? 'yellow' : 'red'}-400 text-sm font-medium">
                                        ${agent.status === 'active' ? 'ŸÅÿπÿßŸÑ' : agent.status === 'training' ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿ¢ŸÖŸàÿ≤ÿ¥' : 'ÿ¢ŸÅŸÑÿß€åŸÜ'}
                                    </span>
                                </div>
                            </div>
                        </div>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white self-start sm:self-center">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>

                    <!-- Performance Details -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6 mb-4 sm:mb-6">
                        <div class="space-y-3 sm:space-y-4">
                            <h4 class="text-base sm:text-lg font-semibold text-white mb-3">üìä ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                            
                            <div class="bg-gray-700 rounded-lg p-4">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">ÿØŸÇÿ™</span>
                                    <span class="text-green-400 font-bold">${agent.performance.accuracy.toFixed(1)}%</span>
                                </div>
                                <div class="w-full bg-gray-600 rounded-full h-3">
                                    <div class="bg-green-400 h-3 rounded-full" style="width: ${agent.performance.accuracy}%"></div>
                                </div>
                            </div>

                            <div class="bg-gray-700 rounded-lg p-4">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">ŸÜÿ±ÿÆ ŸÖŸàŸÅŸÇ€åÿ™</span>
                                    <span class="text-purple-400 font-bold">${agent.performance.successRate.toFixed(1)}%</span>
                                </div>
                                <div class="w-full bg-gray-600 rounded-full h-3">
                                    <div class="bg-purple-400 h-3 rounded-full" style="width: ${agent.performance.successRate}%"></div>
                                </div>
                            </div>

                            <div class="bg-gray-700 rounded-lg p-4">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿ¢ŸÖŸàÿ≤ÿ¥</span>
                                    <span class="text-blue-400 font-bold">${agent.performance.trainingProgress}%</span>
                                </div>
                                <div class="w-full bg-gray-600 rounded-full h-3">
                                    <div class="bg-blue-400 h-3 rounded-full" style="width: ${agent.performance.trainingProgress}%"></div>
                                </div>
                            </div>
                        </div>

                        <div class="space-y-3 sm:space-y-4">
                            <h4 class="text-base sm:text-lg font-semibold text-white mb-3">üìà ÿ¢ŸÖÿßÿ±</h4>
                            
                            <div class="grid grid-cols-2 gap-2 sm:gap-3">
                                <div class="bg-gray-700 rounded-lg p-3 text-center">
                                    <div class="text-lg font-bold text-white">${agent.performance.totalDecisions.toLocaleString()}</div>
                                    <div class="text-xs text-gray-400">ÿ™ÿµŸÖ€åŸÖÿßÿ™</div>
                                </div>
                                <div class="bg-gray-700 rounded-lg p-3 text-center">
                                    <div class="text-lg font-bold text-white">${agent.learning.hoursLearned.toFixed(0)}</div>
                                    <div class="text-xs text-gray-400">ÿ≥ÿßÿπÿ™ €åÿßÿØ⁄Ø€åÿ±€å</div>
                                </div>
                                <div class="bg-gray-700 rounded-lg p-3 text-center">
                                    <div class="text-lg font-bold text-white">${(agent.learning.knowledgeBase / 1024).toFixed(1)}MB</div>
                                    <div class="text-xs text-gray-400">ÿØÿßŸÜÿ¥ ÿ∞ÿÆ€åÿ±Ÿá</div>
                                </div>
                                <div class="bg-gray-700 rounded-lg p-3 text-center">
                                    <div class="text-lg font-bold text-${agent.performance.experienceLevel === 'expert' ? 'green' : agent.performance.experienceLevel === 'advanced' ? 'blue' : agent.performance.experienceLevel === 'intermediate' ? 'yellow' : 'gray'}-400">
                                        ${agent.performance.experienceLevel === 'expert' ? 'ÿÆÿ®ÿ±Ÿá' : 
                                          agent.performance.experienceLevel === 'advanced' ? 'Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá' :
                                          agent.performance.experienceLevel === 'intermediate' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : 'ŸÖÿ®ÿ™ÿØ€å'}
                                    </div>
                                    <div class="text-xs text-gray-400">ÿ≥ÿ∑ÿ≠</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Capabilities -->
                    <div class="mb-4 sm:mb-6">
                        <h4 class="text-base sm:text-lg font-semibold text-white mb-3">üõ†Ô∏è ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß</h4>
                        <div class="flex flex-wrap gap-1 sm:gap-2">
                            ${agent.capabilities.map(capability => `
                                <span class="px-2 sm:px-3 py-1 bg-blue-900 text-blue-300 text-xs sm:text-sm rounded-full">
                                    ${capability}
                                </span>
                            `).join('')}
                        </div>
                    </div>

                    <!-- Learning History -->
                    <div class="mb-4 sm:mb-6">
                        <h4 class="text-base sm:text-lg font-semibold text-white mb-3">üìö ÿ™ÿßÿ±€åÿÆ⁄ÜŸá €åÿßÿØ⁄Ø€åÿ±€å</h4>
                        <div class="bg-gray-700 rounded-lg p-3 sm:p-4">
                            <div class="text-xs sm:text-sm text-gray-300 space-y-2">
                                <div><strong>ÿ™ÿßÿ±€åÿÆ ÿß€åÿ¨ÿßÿØ:</strong> ${new Date(agent.performance.createdAt).toLocaleDateString('fa-IR')}</div>
                                <div><strong>ÿ¢ÿÆÿ±€åŸÜ ÿ¢ŸÖŸàÿ≤ÿ¥:</strong> ${new Date(agent.performance.lastTraining).toLocaleDateString('fa-IR')}</div>
                                <div><strong>ÿ¢ÿÆÿ±€åŸÜ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å:</strong> ${new Date(agent.performance.lastUpdate).toLocaleString('fa-IR')}</div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 sm:justify-end">
                        <button onclick="aiTabInstance.startAgentTraining('${agent.id}'); this.closest('.fixed').remove();" 
                                class="px-4 sm:px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm sm:text-base">
                            <i class="fas fa-graduation-cap mr-2"></i>
                            ÿ¥ÿ±Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥
                        </button>
                        <button onclick="aiTabInstance.toggleAgentStatus('${agent.id}'); this.closest('.fixed').remove();" 
                                class="px-4 sm:px-6 py-2 bg-${agent.status === 'active' ? 'red' : 'green'}-600 hover:bg-${agent.status === 'active' ? 'red' : 'green'}-700 text-white rounded-lg transition-colors text-sm sm:text-base">
                            <i class="fas fa-power-off mr-2"></i>
                            ${agent.status === 'active' ? 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ' : 'ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ'}
                        </button>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 sm:px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors text-sm sm:text-base">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            </div>
        `;

        // Add modal to page
        document.body.insertAdjacentHTML('beforeend', modalContent);
    }

    selectAgent(agentId) {
        this.viewAgentDetails(agentId);
    }

    filterAgents() {
        // Filter functionality
        console.log('Filtering agents...');
    }

    startMassTraining() {
        alert('ÿ¢ŸÖŸàÿ≤ÿ¥ ⁄Øÿ±ŸàŸá€å ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ');
    }

    toggleAllAgents() {
        alert('Ÿàÿ∂ÿπ€åÿ™ ŸáŸÖŸá ÿß€åÿ¨ŸÜÿ™‚ÄåŸáÿß ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™');
    }

    async createBackup() {
        try {
            alert('ÿØÿ± ÿ≠ÿßŸÑ ÿß€åÿ¨ÿßÿØ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ...');
            
            const response = await axios.post('/api/settings/ai-backup', 
                { action: 'create' },
                { headers: { 'Authorization': `Bearer ${window.authToken}` } }
            );
            
            if (response.data.success) {
                alert(`Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ‚Äå⁄Ø€åÿ±€å ŸÖŸàŸÅŸÇ: ${response.data.backup.id} - ${response.data.backup.size}`);
            } else {
                alert('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ');
            }
        } catch (error) {
            console.error('Error creating backup:', error);
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ');
        }
    }

    startTraining() {
        this.switchView('training');
    }

    async quickTraining(type) {
        try {
            alert(`ÿ¢ŸÖŸàÿ≤ÿ¥ ${type === 'individual' ? 'ŸÅÿ±ÿØ€å' : type === 'collective' ? 'ÿ¨ŸÖÿπ€å' : 'ŸÖÿ™ŸÇÿßÿ®ŸÑ'} ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ`);
        } catch (error) {
            console.error('Error starting quick training:', error);
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿ¥ÿ±Ÿàÿπ ÿ¢ŸÖŸàÿ≤ÿ¥');
        }
    }

    startCustomTraining() {
        const selectedAgents = Array.from(document.getElementById('training-agents').selectedOptions).map(option => option.value);
        const topic = document.getElementById('training-topic').value;
        
        if (selectedAgents.length === 0) {
            alert('ŸÑÿ∑ŸÅÿßŸã ÿ≠ÿØÿßŸÇŸÑ €å⁄© ÿß€åÿ¨ŸÜÿ™ ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
            return;
        }
        
        alert(`ÿ¢ŸÖŸàÿ≤ÿ¥ ÿ≥ŸÅÿßÿ±ÿ¥€å ÿ®ÿ±ÿß€å ${selectedAgents.length} ÿß€åÿ¨ŸÜÿ™ ÿØÿ± ŸÖŸàÿ∂Ÿàÿπ ${topic} ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ`);
    }

    // API Testing Functions
    async testOpenAI() {
        const apiKey = document.getElementById('openai-api-key')?.value;
        if (!apiKey) {
            alert('ŸÑÿ∑ŸÅÿßŸã API Key ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
            return;
        }
        
        try {
            alert('ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá OpenAI...');
        } catch (error) {
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá OpenAI: ' + error.message);
        }
    }

    async testAnthropic() {
        const apiKey = document.getElementById('anthropic-api-key')?.value;
        if (!apiKey) {
            alert('ŸÑÿ∑ŸÅÿßŸã API Key ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
            return;
        }
        
        try {
            alert('ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Anthropic...');
        } catch (error) {
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Anthropic: ' + error.message);
        }
    }

    async testGoogle() {
        const apiKey = document.getElementById('google-api-key')?.value;
        if (!apiKey) {
            alert('ŸÑÿ∑ŸÅÿßŸã API Key ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
            return;
        }
        
        try {
            alert('ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Google AI...');
        } catch (error) {
            alert('ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Google AI: ' + error.message);
        }
    }

    checkOpenAIUsage() {
        alert('ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿµÿ±ŸÅ OpenAI ÿØÿ± ÿ≠ÿßŸÑ Ÿæ€åÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å...');
    }

    viewAILogs() {
        alert('ŸÜŸÖÿß€åÿ¥ ŸÑÿß⁄Ø‚ÄåŸáÿß€å AI ÿØÿ± ÿ≠ÿßŸÑ Ÿæ€åÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å...');
    }

    exportAIMetrics() {
        alert('ÿµÿßÿØÿ±ÿßÿ™ ŸÖÿ™ÿ±€å⁄©‚ÄåŸáÿß€å AI ÿØÿ± ÿ≠ÿßŸÑ Ÿæ€åÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å...');
    }

    retrainModels() {
        if (confirm('ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ŸÖÿØŸÑ‚ÄåŸáÿß€å AI ÿ±ÿß ÿ®ÿßÿ≤ÿ¢ŸÖŸàÿ≤€å ÿØŸá€åÿØÿü')) {
            alert('ÿ®ÿßÿ≤ÿ¢ŸÖŸàÿ≤€å ŸÖÿØŸÑ‚ÄåŸáÿß ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ...');
        }
    }

    clearAICache() {
        if (confirm('ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ⁄©ÿ¥ AI ÿ±ÿß Ÿæÿß⁄© ⁄©ŸÜ€åÿØÿü')) {
            alert('⁄©ÿ¥ AI Ÿæÿß⁄© ÿ¥ÿØ');
        }
    }

    // Cleanup function
    cleanup() {
        if (this.state.refreshInterval) {
            clearInterval(this.state.refreshInterval);
        }
    }

    collectData() {
        return {
            openai: {
                enabled: document.getElementById('openai-enabled')?.checked || false,
                api_key: document.getElementById('openai-api-key')?.value || '',
                model: document.getElementById('openai-model')?.value || 'gpt-4',
                temperature: parseFloat(document.getElementById('openai-temperature')?.value) || 0.7,
                max_tokens: parseInt(document.getElementById('openai-max-tokens')?.value) || 2000,
                daily_limit: parseInt(document.getElementById('openai-daily-limit')?.value) || 1000
            },
            anthropic: {
                enabled: document.getElementById('anthropic-enabled')?.checked || false,
                api_key: document.getElementById('anthropic-api-key')?.value || '',
                model: document.getElementById('anthropic-model')?.value || 'claude-3-opus',
                max_tokens: parseInt(document.getElementById('anthropic-max-tokens')?.value) || 4000
            },
            google: {
                enabled: document.getElementById('google-enabled')?.checked || false,
                api_key: document.getElementById('google-api-key')?.value || '',
                model: document.getElementById('google-model')?.value || 'gemini-pro',
                safety_settings: document.getElementById('google-safety')?.value || 'BLOCK_ONLY_HIGH'
            },
            strategies: Array.from(document.querySelectorAll('.ai-strategy:checked'))
                          .map(cb => cb.getAttribute('data-strategy')),
            security: {
                encrypt_data: document.getElementById('ai-encrypt-data')?.checked || false,
                auto_delete_logs: document.getElementById('ai-auto-delete-logs')?.checked || false,
                rate_limiting: document.getElementById('ai-rate-limiting')?.checked || false,
                data_retention: parseInt(document.getElementById('ai-data-retention')?.value) || 30,
                security_level: document.getElementById('ai-security-level')?.value || 'high',
                hourly_limit: parseInt(document.getElementById('ai-hourly-limit')?.value) || 1000
            },
            management: {
                artemis: this.state.artemis,
                agents: this.state.agents,
                systemMetrics: this.state.systemMetrics
            }
        };
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 02 (Risk Management)
    // =============================================================================
    
    async loadAgent02Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent02Status = result.data;
                console.log('‚úÖ Agent 02 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 02 status:', error);
            throw error;
        }
    }

    async startAgent02Assessment(portfolioData = null, scenario = 'current_market') {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/assess', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ portfolioData, scenario })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 02 assessment completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error starting Agent 02 assessment:', error);
            throw error;
        }
    }

    async loadAgent02History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 02 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 02 history:', error);
            throw error;
        }
    }

    async controlAgent02(action) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 02 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 02:', error);
            throw error;
        }
    }

    async loadAgent02Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 02 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 02 config:', error);
            throw error;
        }
    }

    async updateAgent02Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/02/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 02 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 02 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 03 (Sentiment Analysis)
    // =============================================================================
    
    async loadAgent03Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent03Status = result.data;
                console.log('‚úÖ Agent 03 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 03 status:', error);
            throw error;
        }
    }

    async startAgent03Analysis(symbol = 'BTC', sources = ['all'], timeframe = '24h') {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/analyze', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ symbol, sources, timeframe })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 03 analysis completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error starting Agent 03 analysis:', error);
            throw error;
        }
    }

    async loadAgent03History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 03 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 03 history:', error);
            throw error;
        }
    }

    async controlAgent03(action) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 03 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 03:', error);
            throw error;
        }
    }

    async loadAgent03Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 03 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 03 config:', error);
            throw error;
        }
    }

    async updateAgent03Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/03/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 03 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 03 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 04 (Portfolio Optimization)
    // =============================================================================
    
    async loadAgent04Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent04Status = result.data;
                console.log('‚úÖ Agent 04 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 04 status:', error);
            throw error;
        }
    }

    async startAgent04Optimization(portfolioData = null, riskTolerance = 'moderate', timeHorizon = 'long_term') {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/optimize', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ portfolioData, riskTolerance, timeHorizon })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 optimization completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error starting Agent 04 optimization:', error);
            throw error;
        }
    }

    async executeAgent04Rebalance(trades = null, dryRun = true) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/rebalance', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ trades, dryRun })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 rebalance completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error executing Agent 04 rebalance:', error);
            throw error;
        }
    }

    async loadAgent04History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 04 history:', error);
            throw error;
        }
    }

    async controlAgent04(action) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 04:', error);
            throw error;
        }
    }

    async loadAgent04Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 04 config:', error);
            throw error;
        }
    }

    async updateAgent04Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/04/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 04 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 04 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 05 (Market Making)
    // =============================================================================
    
    async loadAgent05Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent05Status = result.data;
                console.log('‚úÖ Agent 05 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 05 status:', error);
            throw error;
        }
    }

    async executeAgent05Strategy(symbol = 'BTC/USDT', spread = null, gridSize = 10) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/execute', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ symbol, spread, gridSize })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 05 strategy executed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error executing Agent 05 strategy:', error);
            throw error;
        }
    }

    async loadAgent05History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 05 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 05 history:', error);
            throw error;
        }
    }

    async controlAgent05(action) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 05 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 05:', error);
            throw error;
        }
    }

    async loadAgent05Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 05 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 05 config:', error);
            throw error;
        }
    }

    async updateAgent05Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/05/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 05 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 05 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 06 (Algorithmic Trading)
    // =============================================================================
    
    async loadAgent06Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent06Status = result.data;
                console.log('‚úÖ Agent 06 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 06 status:', error);
            throw error;
        }
    }

    async executeAgent06Strategy(strategy = 'momentum', symbol = 'BTC/USDT', parameters = {}) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/execute', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ strategy, symbol, parameters })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 06 strategy executed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error executing Agent 06 strategy:', error);
            throw error;
        }
    }

    async loadAgent06History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 06 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 06 history:', error);
            throw error;
        }
    }

    async controlAgent06(action, parameters = {}) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action, parameters })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 06 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 06:', error);
            throw error;
        }
    }

    async loadAgent06Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 06 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 06 config:', error);
            throw error;
        }
    }

    async updateAgent06Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/06/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 06 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 06 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // API INTEGRATION METHODS FOR AGENT 07 (News Analysis)
    // =============================================================================
    
    async loadAgent07Status() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/status', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                this.state.agent07Status = result.data;
                console.log('‚úÖ Agent 07 status loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 07 status:', error);
            throw error;
        }
    }

    async analyzeNewsImpact(newsText = '', symbol = 'BTC/USDT', category = 'general') {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/analyze', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ newsText, symbol, category })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 07 news analysis completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error analyzing news impact:', error);
            throw error;
        }
    }

    async loadAgent07History() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/history', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 07 history loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 07 history:', error);
            throw error;
        }
    }

    async controlAgent07(action, parameters = {}) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/control', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action, parameters })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 07 control action completed:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error controlling Agent 07:', error);
            throw error;
        }
    }

    async loadAgent07Config() {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/config', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 07 config loaded:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error loading Agent 07 config:', error);
            throw error;
        }
    }

    async updateAgent07Config(config) {
        try {
            const token = localStorage.getItem('session_token') || 'demo_token_' + Date.now();
            const response = await fetch('/api/agents/07/config', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ Agent 07 config updated:', result.data);
                return result.data;
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            console.error('‚ùå Error updating Agent 07 config:', error);
            throw error;
        }
    }

    // =============================================================================
    // AGENT 01 SPECIFIC UI METHODS
    // =============================================================================
    
    async showAgent01Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent01Status(),
                this.loadAgent01Config(),
                this.loadAgent01History()
            ]);

            // Create detailed modal for Agent 01
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ (01)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Real-time Status -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ŸÅÿπŸÑ€å</h4>
                            <div class="space-y-2">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿàÿ∂ÿπ€åÿ™:</span>
                                    <span class="text-green-400">${status.status}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™:</span>
                                    <span class="text-blue-400">${status.accuracy}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                    <span class="text-yellow-400">${status.confidence}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ™ÿ≠ŸÑ€åŸÑ‚ÄåŸáÿß€å ⁄©ŸÑ:</span>
                                    <span class="text-purple-400">${status.performance.totalAnalyses}</span>
                                </div>
                            </div>
                        </div>

                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ¥ÿßÿÆÿµ‚ÄåŸáÿß€å ŸÅÿπŸÑ€å</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">RSI:</span>
                                    <span class="text-cyan-400">${status.indicators.rsi.value.toFixed(1)} (${status.indicators.rsi.signal})</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">MACD:</span>
                                    <span class="text-green-400">${status.indicators.macd.value.toFixed(3)} (${status.indicators.macd.signal})</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">SMA20:</span>
                                    <span class="text-yellow-400">$${status.indicators.sma20.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">EMA12:</span>
                                    <span class="text-pink-400">$${status.indicators.ema12.toFixed(2)}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">⁄©ŸÜÿ™ÿ±ŸÑ ÿß€åÿ¨ŸÜÿ™</h4>
                        <div class="flex flex-wrap gap-3">
                            <button onclick="aiTabInstance.handleAgent01Control('start')" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-play mr-2"></i>ÿ¥ÿ±Ÿàÿπ
                            </button>
                            <button onclick="aiTabInstance.handleAgent01Control('stop')" 
                                    class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-stop mr-2"></i>ÿ™ŸàŸÇŸÅ
                            </button>
                            <button onclick="aiTabInstance.handleAgent01Control('restart')" 
                                    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-redo mr-2"></i>ÿ±€åÿ≥ÿ™ÿßÿ±ÿ™
                            </button>
                            <button onclick="aiTabInstance.handleAgent01Control('calibrate')" 
                                    class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-cogs mr-2"></i>⁄©ÿßŸÑ€åÿ®ÿ±ÿßÿ≥€åŸàŸÜ
                            </button>
                            <button onclick="aiTabInstance.startAgent01Analysis()" 
                                    class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-chart-line mr-2"></i>ÿ™ÿ≠ŸÑ€åŸÑ ÿ¨ÿØ€åÿØ
                            </button>
                        </div>
                    </div>

                    <!-- Recent History -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿßÿ±€åÿÆ⁄ÜŸá ÿ™ÿ≠ŸÑ€åŸÑ‚ÄåŸáÿß</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ŸÜŸÖÿßÿØ</th>
                                        <th class="text-right p-2">ÿ≥€å⁄ØŸÜÿßŸÑ</th>
                                        <th class="text-right p-2">ÿØŸÇÿ™</th>
                                        <th class="text-right p-2">ŸÜÿ™€åÿ¨Ÿá</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.analyses.slice(0, 5).map(analysis => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(analysis.timestamp).toLocaleString('fa-IR')}</td>
                                            <td class="p-2 text-white">${analysis.symbol}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    analysis.signal === 'bullish' ? 'bg-green-600 text-white' :
                                                    analysis.signal === 'bearish' ? 'bg-red-600 text-white' :
                                                    'bg-gray-600 text-white'
                                                }">${analysis.signal}</span>
                                            </td>
                                            <td class="p-2 text-blue-400">${analysis.accuracy.toFixed(1)}%</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    analysis.result === 'correct' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                                                }">${analysis.result === 'correct' ? 'ÿµÿ≠€åÿ≠' : 'ŸÜÿßÿØÿ±ÿ≥ÿ™'}</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 01 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ');
        }
    }

    async handleAgent01Control(action) {
        try {
            const result = await this.controlAgent01(action);
            this.showSuccessMessage(result.message || `ÿπŸÖŸÑ€åÿßÿ™ ${action} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ`);
            
            // Refresh agent status
            await this.loadAgent01Status();
        } catch (error) {
            console.error('‚ùå Error controlling Agent 01:', error);
            this.showErrorMessage(`ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿπŸÖŸÑ€åÿßÿ™ ${action}`);
        }
    }

    async startAgent01Analysis(symbol = 'BTC/USDT', timeframe = '1h') {
        try {
            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ¨ÿßŸÖ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ...');
            
            const analysis = await this.startAgent01Analysis(symbol, timeframe);
            
            loadingMsg.remove();
            
            // Show analysis results
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-2xl w-full mx-4">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-gray-700 rounded p-3">
                                <div class="text-gray-300 text-sm">ŸÜŸÖÿßÿØ</div>
                                <div class="text-white font-semibold">${analysis.symbol}</div>
                            </div>
                            <div class="bg-gray-700 rounded p-3">
                                <div class="text-gray-300 text-sm">ÿ®ÿßÿ≤Ÿá ÿ≤ŸÖÿßŸÜ€å</div>
                                <div class="text-white font-semibold">${analysis.timeframe}</div>
                            </div>
                        </div>

                        <div class="bg-gray-700 rounded p-4">
                            <h4 class="text-white font-semibold mb-3">ÿ≥€å⁄ØŸÜÿßŸÑ ⁄©ŸÑ€å</h4>
                            <div class="text-center">
                                <div class="text-2xl font-bold ${
                                    analysis.signals.overall === 'bullish' ? 'text-green-400' :
                                    analysis.signals.overall === 'bearish' ? 'text-red-400' : 'text-yellow-400'
                                }">${analysis.signals.overall}</div>
                                <div class="text-gray-300">ŸÇÿØÿ±ÿ™: ${analysis.signals.strength.toFixed(1)}%</div>
                                <div class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ: ${analysis.signals.confidence.toFixed(1)}%</div>
                            </div>
                        </div>

                        <div class="bg-gray-700 rounded p-4">
                            <h4 class="text-white font-semibold mb-3">ÿ™Ÿàÿµ€åŸá ŸÖÿπÿßŸÖŸÑÿßÿ™€å</h4>
                            <div class="grid grid-cols-1 gap-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿπŸÖŸÑ Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å:</span>
                                    <span class="text-white font-semibold">${analysis.recommendations.action}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÇ€åŸÖÿ™ Ÿàÿ±ŸàÿØ:</span>
                                    <span class="text-green-400">$${analysis.recommendations.entryPrice.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≠ÿØ ÿ∂ÿ±ÿ±:</span>
                                    <span class="text-red-400">$${analysis.recommendations.stopLoss.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸáÿØŸÅ ÿ≥ŸàÿØ:</span>
                                    <span class="text-blue-400">$${analysis.recommendations.takeProfit.toFixed(2)}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 text-right">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error starting Agent 01 analysis:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ');
        }
    }

    showLoadingMessage(message) {
        const loading = document.createElement('div');
        loading.className = 'fixed top-4 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg z-50';
        loading.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i>${message}`;
        document.body.appendChild(loading);
        return loading;
    }

    showSuccessMessage(message) {
        const success = document.createElement('div');
        success.className = 'fixed top-4 left-4 bg-green-600 text-white px-4 py-2 rounded-lg z-50';
        success.innerHTML = `<i class="fas fa-check mr-2"></i>${message}`;
        document.body.appendChild(success);
        setTimeout(() => success.remove(), 3000);
    }

    showErrorMessage(message) {
        const error = document.createElement('div');
        error.className = 'fixed top-4 left-4 bg-red-600 text-white px-4 py-2 rounded-lg z-50';
        error.innerHTML = `<i class="fas fa-times mr-2"></i>${message}`;
        document.body.appendChild(error);
        setTimeout(() => error.remove(), 3000);
    }

    // =============================================================================
    // AGENT 02 SPECIFIC UI METHODS (Risk Management)
    // =============================================================================
    
    async showAgent02Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent02Status(),
                this.loadAgent02Config(),
                this.loadAgent02History()
            ]);

            // Create detailed modal for Agent 02
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-5xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄© (02)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Risk Metrics Dashboard -->
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                        <!-- Overall Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ⁄©ŸÑ€å</h4>
                            <div class="space-y-2">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿàÿ∂ÿπ€åÿ™:</span>
                                    <span class="text-green-400">${status.status}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™:</span>
                                    <span class="text-blue-400">${status.accuracy}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                    <span class="text-yellow-400">${status.confidence}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿ±ÿ≤€åÿßÿ®€å‚ÄåŸáÿß€å ⁄©ŸÑ:</span>
                                    <span class="text-purple-400">${status.performance.totalAssessments}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Risk Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿ±€åÿ≥⁄©</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà:</span>
                                    <span class="text-${status.riskMetrics.portfolioRisk.level === 'low' ? 'green' : 
                                                     status.riskMetrics.portfolioRisk.level === 'medium' ? 'yellow' : 'red'}-400">
                                        ${status.riskMetrics.portfolioRisk.value.toFixed(1)}% (${status.riskMetrics.portfolioRisk.level})
                                    </span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">VaR 95%:</span>
                                    <span class="text-red-400">${status.riskMetrics.var95.value}${status.riskMetrics.var95.unit}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Sharpe Ratio:</span>
                                    <span class="text-green-400">${status.riskMetrics.sharpeRatio.value}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Max Drawdown:</span>
                                    <span class="text-orange-400">${status.riskMetrics.maxDrawdown.value}${status.riskMetrics.maxDrawdown.unit}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Volatility:</span>
                                    <span class="text-cyan-400">${status.riskMetrics.volatility.value}${status.riskMetrics.volatility.unit}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Exposure Limits -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ≠ÿØŸàÿØ ÿß⁄©ÿ≥ŸæŸà⁄òÿ±</h4>
                            <div class="space-y-3">
                                <!-- Current Exposure Progress -->
                                <div>
                                    <div class="flex justify-between text-sm mb-1">
                                        <span class="text-gray-300">ÿß⁄©ÿ≥ŸæŸà⁄òÿ± ŸÅÿπŸÑ€å</span>
                                        <span class="text-white">$${status.limits.currentExposure.toLocaleString()} / $${status.limits.maxTotalExposure.toLocaleString()}</span>
                                    </div>
                                    <div class="w-full bg-gray-600 rounded-full h-2">
                                        <div class="bg-blue-400 h-2 rounded-full" style="width: ${(status.limits.currentExposure / status.limits.maxTotalExposure * 100)}%"></div>
                                    </div>
                                </div>
                                
                                <div class="text-sm space-y-1">
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿ≠ÿØ ÿ±Ÿàÿ≤ÿßŸÜŸá:</span>
                                        <span class="text-yellow-400">$${status.limits.maxDailyLoss.toLocaleString()}</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿ≠ÿØ ŸæŸàÿ≤€åÿ¥ŸÜ:</span>
                                        <span class="text-blue-400">$${status.limits.maxPositionSize.toLocaleString()}</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿ∏ÿ±ŸÅ€åÿ™ ÿ®ÿßŸÇ€å:</span>
                                        <span class="text-green-400">$${status.limits.remainingCapacity.toLocaleString()}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">⁄©ŸÜÿ™ÿ±ŸÑ ÿß€åÿ¨ŸÜÿ™</h4>
                        <div class="flex flex-wrap gap-3">
                            <button onclick="aiTabInstance.handleAgent02Control('start')" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-play mr-2"></i>ÿ¥ÿ±Ÿàÿπ
                            </button>
                            <button onclick="aiTabInstance.handleAgent02Control('stop')" 
                                    class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-stop mr-2"></i>ÿ™ŸàŸÇŸÅ
                            </button>
                            <button onclick="aiTabInstance.handleAgent02Control('emergency_stop')" 
                                    class="px-4 py-2 bg-red-800 hover:bg-red-900 text-white rounded-lg transition-colors">
                                <i class="fas fa-exclamation-triangle mr-2"></i>ÿ™ŸàŸÇŸÅ ÿßÿ∂ÿ∑ÿ±ÿßÿ±€å
                            </button>
                            <button onclick="aiTabInstance.handleAgent02Control('calibrate')" 
                                    class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-cogs mr-2"></i>⁄©ÿßŸÑ€åÿ®ÿ±ÿßÿ≥€åŸàŸÜ
                            </button>
                            <button onclick="aiTabInstance.startAgent02Assessment()" 
                                    class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-shield-alt mr-2"></i>ÿßÿ±ÿ≤€åÿßÿ®€å ÿ¨ÿØ€åÿØ
                            </button>
                        </div>
                    </div>

                    <!-- Recent Risk Assessments -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿßÿ±€åÿÆ⁄ÜŸá ÿßÿ±ÿ≤€åÿßÿ®€å‚ÄåŸáÿß€å ÿ±€åÿ≥⁄©</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ÿ≥ÿ∑ÿ≠ ÿ±€åÿ≥⁄©</th>
                                        <th class="text-right p-2">ÿßŸÖÿ™€åÿßÿ≤</th>
                                        <th class="text-right p-2">ÿØŸÇÿ™</th>
                                        <th class="text-right p-2">ŸÜÿ™€åÿ¨Ÿá</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.assessments.slice(0, 5).map(assessment => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(assessment.timestamp).toLocaleString('fa-IR')}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    assessment.riskLevel === 'low' ? 'bg-green-600 text-white' :
                                                    assessment.riskLevel === 'medium' ? 'bg-yellow-600 text-white' :
                                                    'bg-red-600 text-white'
                                                }">${assessment.riskLevel}</span>
                                            </td>
                                            <td class="p-2 text-blue-400">${assessment.riskScore.toFixed(1)}</td>
                                            <td class="p-2 text-blue-400">${assessment.accuracy.toFixed(1)}%</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    assessment.outcome === 'prevented_loss' ? 'bg-green-600 text-white' : 
                                                    assessment.outcome === 'no_action_needed' ? 'bg-blue-600 text-white' : 
                                                    'bg-yellow-600 text-white'
                                                }">${
                                                    assessment.outcome === 'prevented_loss' ? 'ÿ∂ÿ±ÿ± ÿ¨ŸÑŸà⁄Ø€åÿ±€å ÿ¥ÿØ' : 
                                                    assessment.outcome === 'no_action_needed' ? 'ÿßŸÇÿØÿßŸÖ€å ŸÑÿßÿ≤ŸÖ ŸÜÿ®ŸàÿØ' : 
                                                    'Ÿáÿ¥ÿØÿßÿ± ⁄©ÿßÿ∞ÿ®'
                                                }</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 02 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄©');
        }
    }

    async handleAgent02Control(action) {
        try {
            const result = await this.controlAgent02(action);
            this.showSuccessMessage(result.message || `ÿπŸÖŸÑ€åÿßÿ™ ${action} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ`);
            
            // Refresh agent status
            await this.loadAgent02Status();
        } catch (error) {
            console.error('‚ùå Error controlling Agent 02:', error);
            this.showErrorMessage(`ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿπŸÖŸÑ€åÿßÿ™ ${action}`);
        }
    }

    async startAgent02Assessment(portfolioData = null, scenario = 'current_market') {
        try {
            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ¨ÿßŸÖ ÿßÿ±ÿ≤€åÿßÿ®€å ÿ±€åÿ≥⁄©...');
            
            const assessment = await this.startAgent02Assessment(portfolioData, scenario);
            
            loadingMsg.remove();
            
            // Show assessment results
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿßÿ±ÿ≤€åÿßÿ®€å ÿ±€åÿ≥⁄©</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <div class="space-y-6">
                        <!-- Overall Risk Assessment -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ÿßÿ±ÿ≤€åÿßÿ®€å ⁄©ŸÑ€å</h4>
                            <div class="grid grid-cols-2 gap-4">
                                <div class="text-center">
                                    <div class="text-3xl font-bold ${
                                        assessment.riskAnalysis.overallRisk === 'low' ? 'text-green-400' :
                                        assessment.riskAnalysis.overallRisk === 'medium' ? 'text-yellow-400' : 'text-red-400'
                                    }">${assessment.riskAnalysis.overallRisk}</div>
                                    <div class="text-gray-300">ÿ≥ÿ∑ÿ≠ ÿ±€åÿ≥⁄© ⁄©ŸÑ€å</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-blue-400">${assessment.riskAnalysis.riskScore.toFixed(1)}</div>
                                    <div class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤ ÿ±€åÿ≥⁄©</div>
                                </div>
                            </div>
                        </div>

                        <!-- Risk Breakdown -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ÿ™ŸÅ⁄©€å⁄© ÿ±€åÿ≥⁄© Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà</h4>
                            <div class="space-y-3">
                                <div class="flex justify-between items-center">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© Ÿæÿß€å€åŸÜ</span>
                                    <div class="flex items-center space-x-3 space-x-reverse">
                                        <div class="w-32 bg-gray-600 rounded-full h-3">
                                            <div class="bg-green-400 h-3 rounded-full" style="width: ${assessment.riskAnalysis.riskBreakdown.lowRisk}%"></div>
                                        </div>
                                        <span class="text-green-400 font-semibold">${assessment.riskAnalysis.riskBreakdown.lowRisk.toFixed(1)}%</span>
                                    </div>
                                </div>
                                <div class="flex justify-between items-center">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© ŸÖÿ™Ÿàÿ≥ÿ∑</span>
                                    <div class="flex items-center space-x-3 space-x-reverse">
                                        <div class="w-32 bg-gray-600 rounded-full h-3">
                                            <div class="bg-yellow-400 h-3 rounded-full" style="width: ${assessment.riskAnalysis.riskBreakdown.mediumRisk}%"></div>
                                        </div>
                                        <span class="text-yellow-400 font-semibold">${assessment.riskAnalysis.riskBreakdown.mediumRisk.toFixed(1)}%</span>
                                    </div>
                                </div>
                                <div class="flex justify-between items-center">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© ÿ®ÿßŸÑÿß</span>
                                    <div class="flex items-center space-x-3 space-x-reverse">
                                        <div class="w-32 bg-gray-600 rounded-full h-3">
                                            <div class="bg-red-400 h-3 rounded-full" style="width: ${assessment.riskAnalysis.riskBreakdown.highRisk}%"></div>
                                        </div>
                                        <span class="text-red-400 font-semibold">${assessment.riskAnalysis.riskBreakdown.highRisk.toFixed(1)}%</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- VaR Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ŸÖÿπ€åÿßÿ±Ÿáÿß€å VaR</h4>
                            <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                                <div class="text-center">
                                    <div class="text-red-400 font-bold">${assessment.riskAnalysis.valueAtRisk.var95_1d.toFixed(1)}%</div>
                                    <div class="text-gray-300">VaR 95% (1 ÿ±Ÿàÿ≤)</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-red-400 font-bold">${assessment.riskAnalysis.valueAtRisk.var99_1d.toFixed(1)}%</div>
                                    <div class="text-gray-300">VaR 99% (1 ÿ±Ÿàÿ≤)</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-orange-400 font-bold">${assessment.riskAnalysis.valueAtRisk.var95_1w.toFixed(1)}%</div>
                                    <div class="text-gray-300">VaR 95% (1 ŸáŸÅÿ™Ÿá)</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-red-500 font-bold">${assessment.riskAnalysis.valueAtRisk.expectedShortfall.toFixed(1)}%</div>
                                    <div class="text-gray-300">Expected Shortfall</div>
                                </div>
                            </div>
                        </div>

                        <!-- Recommendations -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ÿ™Ÿàÿµ€åŸá‚ÄåŸáÿß€å ÿπŸÖŸÑ€åÿßÿ™€å</h4>
                            <div class="space-y-2">
                                ${assessment.recommendations.actions.map((action, index) => `
                                    <div class="flex items-center text-gray-300">
                                        <i class="fas fa-chevron-left text-blue-400 text-sm ml-3"></i>
                                        ${action}
                                    </div>
                                `).join('')}
                            </div>
                            <div class="mt-4 flex items-center justify-between">
                                <div>
                                    <span class="text-gray-400">ÿßŸàŸÑŸà€åÿ™: </span>
                                    <span class="text-${assessment.recommendations.priority === 'high' ? 'red' : 
                                                     assessment.recommendations.priority === 'medium' ? 'yellow' : 'green'}-400 font-semibold">
                                        ${assessment.recommendations.priority}
                                    </span>
                                </div>
                                <div>
                                    <span class="text-gray-400">ŸÅŸàÿ±€åÿ™: </span>
                                    <span class="text-${assessment.recommendations.urgency === 'immediate' ? 'red' : 'blue'}-400 font-semibold">
                                        ${assessment.recommendations.urgency === 'immediate' ? 'ŸÅŸàÿ±€å' : 'ŸÖÿπŸÖŸàŸÑ€å'}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 text-right">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error starting Agent 02 assessment:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿßÿ±ÿ≤€åÿßÿ®€å ÿ±€åÿ≥⁄©');
        }
    }

    // =============================================================================
    // AGENT 03 SPECIFIC UI METHODS (Sentiment Analysis)
    // =============================================================================
    
    async showAgent03Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent03Status(),
                this.loadAgent03Config(),
                this.loadAgent03History()
            ]);

            // Create detailed modal for Agent 03
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-6xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™ (03)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Sentiment Overview Dashboard -->
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                        <!-- Overall Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ⁄©ŸÑ€å</h4>
                            <div class="space-y-2">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿàÿ∂ÿπ€åÿ™:</span>
                                    <span class="text-green-400">${status.status}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™:</span>
                                    <span class="text-blue-400">${status.accuracy}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                    <span class="text-yellow-400">${status.confidence}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ™ÿ≠ŸÑ€åŸÑ‚ÄåŸáÿß€å ⁄©ŸÑ:</span>
                                    <span class="text-purple-400">${status.performance.totalAnalyses}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Market Sentiment -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™ ÿ®ÿßÿ≤ÿßÿ±</h4>
                            <div class="text-center">
                                <div class="text-3xl font-bold ${
                                    status.sentimentMetrics.overallMarket.sentiment === 'bullish' ? 'text-green-400' :
                                    status.sentimentMetrics.overallMarket.sentiment === 'bearish' ? 'text-red-400' : 'text-yellow-400'
                                }">${status.sentimentMetrics.overallMarket.sentiment}</div>
                                <div class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥ ⁄©ŸÑ€å</div>
                                <div class="mt-3">
                                    <div class="text-xl ${status.sentimentMetrics.overallMarket.score >= 0 ? 'text-green-400' : 'text-red-400'}">
                                        ${status.sentimentMetrics.overallMarket.score >= 0 ? '+' : ''}${status.sentimentMetrics.overallMarket.score.toFixed(1)}
                                    </div>
                                    <div class="text-gray-400 text-sm">ÿßŸÖÿ™€åÿßÿ≤ ÿßÿ≠ÿ≥ÿßÿ≥</div>
                                </div>
                            </div>
                        </div>

                        <!-- Fear & Greed Index -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ¥ÿßÿÆÿµ ÿ™ÿ±ÿ≥ Ÿà ÿ∑ŸÖÿπ</h4>
                            <div class="text-center">
                                <div class="relative w-24 h-24 mx-auto mb-2">
                                    <svg class="w-24 h-24 transform -rotate-90" viewBox="0 0 36 36">
                                        <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                                              fill="none" stroke="currentColor" stroke-width="3" stroke-dasharray="100, 100"
                                              class="text-gray-600"/>
                                        <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                                              fill="none" stroke="currentColor" stroke-width="3" 
                                              stroke-dasharray="${status.sentimentMetrics.fearGreedIndex}, 100"
                                              class="${status.sentimentMetrics.fearGreedIndex > 75 ? 'text-green-400' : 
                                                      status.sentimentMetrics.fearGreedIndex > 50 ? 'text-yellow-400' : 
                                                      status.sentimentMetrics.fearGreedIndex > 25 ? 'text-orange-400' : 'text-red-400'}"/>
                                    </svg>
                                    <div class="absolute inset-0 flex items-center justify-center">
                                        <span class="text-xl font-bold text-white">${status.sentimentMetrics.fearGreedIndex}</span>
                                    </div>
                                </div>
                                <div class="text-sm text-gray-300">
                                    ${status.sentimentMetrics.fearGreedIndex > 75 ? 'ÿ∑ŸÖÿπ ÿ¥ÿØ€åÿØ' : 
                                      status.sentimentMetrics.fearGreedIndex > 50 ? 'ÿ∑ŸÖÿπ' : 
                                      status.sentimentMetrics.fearGreedIndex > 25 ? 'ÿ™ÿ±ÿ≥' : 'ÿ™ÿ±ÿ≥ ÿ¥ÿØ€åÿØ'}
                                </div>
                            </div>
                        </div>

                        <!-- Data Sources Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ŸÖŸÜÿßÿ®ÿπ</h4>
                            <div class="space-y-2 text-sm">
                                ${Object.entries(status.dataSourcesStatus).map(([source, status]) => `
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-300 capitalize">${source}</span>
                                        <span class="px-2 py-1 rounded text-xs ${
                                            status === 'connected' ? 'bg-green-600 text-white' :
                                            status === 'limited' ? 'bg-yellow-600 text-white' : 'bg-red-600 text-white'
                                        }">${
                                            status === 'connected' ? 'ŸÖÿ™ÿµŸÑ' :
                                            status === 'limited' ? 'ŸÖÿ≠ÿØŸàÿØ' : 'ŸÇÿ∑ÿπ'
                                        }</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>

                    <!-- Social Media Analysis -->
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">
                                <i class="fab fa-twitter text-blue-400 mr-2"></i>ÿ™Ÿà€åÿ™ÿ±
                            </h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.twitter.sentiment === 'bullish' ? 'green' : 
                                                       status.sentimentMetrics.socialMedia.twitter.sentiment === 'bearish' ? 'red' : 'yellow'}-400">
                                        ${status.sentimentMetrics.socialMedia.twitter.sentiment}
                                    </span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÖŸÜÿ¥ŸÜ‚ÄåŸáÿß:</span>
                                    <span class="text-blue-400">${status.sentimentMetrics.socialMedia.twitter.mentions.toLocaleString()}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.twitter.score >= 0 ? 'green' : 'red'}-400">
                                        ${status.sentimentMetrics.socialMedia.twitter.score.toFixed(1)}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">
                                <i class="fab fa-reddit text-orange-400 mr-2"></i>ÿ±ÿØ€åÿ™
                            </h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.reddit.sentiment === 'bullish' ? 'green' : 
                                                       status.sentimentMetrics.socialMedia.reddit.sentiment === 'bearish' ? 'red' : 'yellow'}-400">
                                        ${status.sentimentMetrics.socialMedia.reddit.sentiment}
                                    </span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿæÿ≥ÿ™‚ÄåŸáÿß:</span>
                                    <span class="text-blue-400">${status.sentimentMetrics.socialMedia.reddit.posts.toLocaleString()}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.reddit.score >= 0 ? 'green' : 'red'}-400">
                                        ${status.sentimentMetrics.socialMedia.reddit.score.toFixed(1)}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">
                                <i class="fab fa-telegram text-blue-500 mr-2"></i>ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
                            </h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.telegram.sentiment === 'bullish' ? 'green' : 
                                                       status.sentimentMetrics.socialMedia.telegram.sentiment === 'bearish' ? 'red' : 'yellow'}-400">
                                        ${status.sentimentMetrics.socialMedia.telegram.sentiment}
                                    </span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿæ€åÿßŸÖ‚ÄåŸáÿß:</span>
                                    <span class="text-blue-400">${status.sentimentMetrics.socialMedia.telegram.messages.toLocaleString()}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤:</span>
                                    <span class="text-${status.sentimentMetrics.socialMedia.telegram.score >= 0 ? 'green' : 'red'}-400">
                                        ${status.sentimentMetrics.socialMedia.telegram.score.toFixed(1)}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- News Analysis -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿÆÿ®ÿßÿ±</h4>
                        <div class="grid grid-cols-3 gap-4 mb-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-400">${status.sentimentMetrics.newsAnalysis.positive}%</div>
                                <div class="text-gray-300 text-sm">ÿßÿÆÿ®ÿßÿ± ŸÖÿ´ÿ®ÿ™</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-yellow-400">${status.sentimentMetrics.newsAnalysis.neutral}%</div>
                                <div class="text-gray-300 text-sm">ÿßÿÆÿ®ÿßÿ± ÿÆŸÜÿ´€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-red-400">${status.sentimentMetrics.newsAnalysis.negative}%</div>
                                <div class="text-gray-300 text-sm">ÿßÿÆÿ®ÿßÿ± ŸÖŸÜŸÅ€å</div>
                            </div>
                        </div>
                        
                        <!-- News sentiment bar -->
                        <div class="w-full bg-gray-600 rounded-full h-4 mb-2">
                            <div class="h-4 rounded-full flex">
                                <div class="bg-green-400 rounded-l-full" style="width: ${status.sentimentMetrics.newsAnalysis.positive}%"></div>
                                <div class="bg-yellow-400" style="width: ${status.sentimentMetrics.newsAnalysis.neutral}%"></div>
                                <div class="bg-red-400 rounded-r-full" style="width: ${status.sentimentMetrics.newsAnalysis.negative}%"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">⁄©ŸÜÿ™ÿ±ŸÑ ÿß€åÿ¨ŸÜÿ™</h4>
                        <div class="flex flex-wrap gap-3">
                            <button onclick="aiTabInstance.handleAgent03Control('start')" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-play mr-2"></i>ÿ¥ÿ±Ÿàÿπ
                            </button>
                            <button onclick="aiTabInstance.handleAgent03Control('stop')" 
                                    class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-stop mr-2"></i>ÿ™ŸàŸÇŸÅ
                            </button>
                            <button onclick="aiTabInstance.handleAgent03Control('refresh_sources')" 
                                    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-sync mr-2"></i>ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÖŸÜÿßÿ®ÿπ
                            </button>
                            <button onclick="aiTabInstance.handleAgent03Control('calibrate')" 
                                    class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-cogs mr-2"></i>⁄©ÿßŸÑ€åÿ®ÿ±ÿßÿ≥€åŸàŸÜ
                            </button>
                            <button onclick="aiTabInstance.startAgent03Analysis()" 
                                    class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-heart mr-2"></i>ÿ™ÿ≠ŸÑ€åŸÑ ÿ¨ÿØ€åÿØ
                            </button>
                        </div>
                    </div>

                    <!-- Recent Sentiment History -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿßÿ±€åÿÆ⁄ÜŸá ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ŸÜŸÖÿßÿØ</th>
                                        <th class="text-right p-2">ÿßÿ≠ÿ≥ÿßÿ≥</th>
                                        <th class="text-right p-2">ÿßŸÖÿ™€åÿßÿ≤</th>
                                        <th class="text-right p-2">ÿßÿπÿ™ŸÖÿßÿØ</th>
                                        <th class="text-right p-2">ÿ™ÿ£ÿ´€åÿ±</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.analyses.slice(0, 5).map(analysis => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(analysis.timestamp).toLocaleString('fa-IR')}</td>
                                            <td class="p-2 text-white">${analysis.symbol}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    analysis.sentiment.includes('bullish') ? 'bg-green-600 text-white' :
                                                    analysis.sentiment.includes('bearish') ? 'bg-red-600 text-white' :
                                                    'bg-yellow-600 text-white'
                                                }">${analysis.sentiment}</span>
                                            </td>
                                            <td class="p-2 ${analysis.score >= 0 ? 'text-green-400' : 'text-red-400'}">
                                                ${analysis.score >= 0 ? '+' : ''}${analysis.score.toFixed(1)}
                                            </td>
                                            <td class="p-2 text-blue-400">${analysis.confidence.toFixed(1)}%</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    analysis.marketImpact === 'high' ? 'bg-red-600 text-white' :
                                                    analysis.marketImpact === 'medium' ? 'bg-yellow-600 text-white' :
                                                    'bg-green-600 text-white'
                                                }">${
                                                    analysis.marketImpact === 'high' ? 'ÿ®ÿßŸÑÿß' :
                                                    analysis.marketImpact === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : 'Ÿæÿß€å€åŸÜ'
                                                }</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 03 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™');
        }
    }

    async handleAgent03Control(action) {
        try {
            const result = await this.controlAgent03(action);
            this.showSuccessMessage(result.message || `ÿπŸÖŸÑ€åÿßÿ™ ${action} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ`);
            
            // Refresh agent status
            await this.loadAgent03Status();
        } catch (error) {
            console.error('‚ùå Error controlling Agent 03:', error);
            this.showErrorMessage(`ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿπŸÖŸÑ€åÿßÿ™ ${action}`);
        }
    }

    async startAgent03Analysis(symbol = 'BTC', sources = ['all'], timeframe = '24h') {
        try {
            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™...');
            
            const analysis = await this.startAgent03Analysis(symbol, sources, timeframe);
            
            loadingMsg.remove();
            
            // Show analysis results
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-5xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <div class="space-y-6">
                        <!-- Overall Sentiment -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ÿßÿ≠ÿ≥ÿßÿ≥ ⁄©ŸÑ€å ÿ®ÿßÿ≤ÿßÿ±</h4>
                            <div class="grid grid-cols-2 gap-6">
                                <div class="text-center">
                                    <div class="text-4xl font-bold ${
                                        analysis.overallSentiment.sentiment.includes('bullish') ? 'text-green-400' :
                                        analysis.overallSentiment.sentiment.includes('bearish') ? 'text-red-400' : 'text-yellow-400'
                                    }">${analysis.overallSentiment.sentiment}</div>
                                    <div class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥ ⁄©ŸÑ€å</div>
                                </div>
                                <div class="space-y-3">
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤ ÿßÿ≠ÿ≥ÿßÿ≥:</span>
                                        <span class="text-${analysis.overallSentiment.score >= 0 ? 'green' : 'red'}-400 font-bold">
                                            ${analysis.overallSentiment.score >= 0 ? '+' : ''}${analysis.overallSentiment.score.toFixed(1)}
                                        </span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                        <span class="text-blue-400 font-bold">${analysis.overallSentiment.confidence.toFixed(1)}%</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">ÿ±ŸàŸÜÿØ:</span>
                                        <span class="text-${analysis.overallSentiment.trend === 'increasing' ? 'green' : 
                                                         analysis.overallSentiment.trend === 'decreasing' ? 'red' : 'yellow'}-400">
                                            ${analysis.overallSentiment.trend === 'increasing' ? 'ÿµÿπŸàÿØ€å' : 
                                              analysis.overallSentiment.trend === 'decreasing' ? 'ŸÜÿ≤ŸàŸÑ€å' : 'ÿ´ÿßÿ®ÿ™'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Social Media Breakdown -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">ÿ™ÿ≠ŸÑ€åŸÑ ÿ¥ÿ®⁄©Ÿá‚ÄåŸáÿß€å ÿßÿ¨ÿ™ŸÖÿßÿπ€å</h4>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <!-- Twitter -->
                                <div class="bg-gray-600 rounded p-3">
                                    <div class="flex items-center mb-2">
                                        <i class="fab fa-twitter text-blue-400 mr-2"></i>
                                        <span class="text-white font-semibold">ÿ™Ÿà€åÿ™ÿ±</span>
                                    </div>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿ≠ÿ¨ŸÖ:</span>
                                            <span class="text-blue-400">${analysis.socialMediaAnalysis.twitter.volume.toLocaleString()}</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿ™ÿπÿßŸÖŸÑ:</span>
                                            <span class="text-green-400">${analysis.socialMediaAnalysis.twitter.engagementRate.toFixed(1)}%</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥ ÿß€åŸÜŸÅŸÑŸàÿ¶ŸÜÿ≥ÿ±:</span>
                                            <span class="text-${analysis.socialMediaAnalysis.twitter.influencerSentiment >= 0 ? 'green' : 'red'}-400">
                                                ${analysis.socialMediaAnalysis.twitter.influencerSentiment.toFixed(1)}
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Reddit -->
                                <div class="bg-gray-600 rounded p-3">
                                    <div class="flex items-center mb-2">
                                        <i class="fab fa-reddit text-orange-400 mr-2"></i>
                                        <span class="text-white font-semibold">ÿ±ÿØ€åÿ™</span>
                                    </div>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">Ÿæÿ≥ÿ™‚ÄåŸáÿß:</span>
                                            <span class="text-blue-400">${analysis.socialMediaAnalysis.reddit.posts.toLocaleString()}</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ŸÜÿ≥ÿ®ÿ™ ÿ±ÿß€å ŸÖÿ´ÿ®ÿ™:</span>
                                            <span class="text-green-400">${(analysis.socialMediaAnalysis.reddit.upvoteRatio * 100).toFixed(1)}%</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿßÿ≠ÿ≥ÿßÿ≥ ⁄©ÿßŸÖŸÜÿ™:</span>
                                            <span class="text-${analysis.socialMediaAnalysis.reddit.commentSentiment >= 0 ? 'green' : 'red'}-400">
                                                ${analysis.socialMediaAnalysis.reddit.commentSentiment.toFixed(1)}
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Telegram -->
                                <div class="bg-gray-600 rounded p-3">
                                    <div class="flex items-center mb-2">
                                        <i class="fab fa-telegram text-blue-500 mr-2"></i>
                                        <span class="text-white font-semibold">ÿ™ŸÑ⁄Øÿ±ÿßŸÖ</span>
                                    </div>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">Ÿæ€åÿßŸÖ‚ÄåŸáÿß:</span>
                                            <span class="text-blue-400">${analysis.socialMediaAnalysis.telegram.messages.toLocaleString()}</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß:</span>
                                            <span class="text-purple-400">${analysis.socialMediaAnalysis.telegram.channels}</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ÿßÿ≠ÿ≥ÿßÿ≥:</span>
                                            <span class="text-${analysis.socialMediaAnalysis.telegram.averageSentiment >= 0 ? 'green' : 'red'}-400">
                                                ${analysis.socialMediaAnalysis.telegram.averageSentiment.toFixed(1)}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Predictions -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-white font-semibold mb-4">Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å‚ÄåŸáÿß</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <!-- Short Term -->
                                <div class="bg-gray-600 rounded p-3">
                                    <h5 class="text-white font-semibold mb-2">⁄©Ÿàÿ™ÿßŸá ŸÖÿØÿ™ (${analysis.predictions.shortTerm.timeframe})</h5>
                                    <div class="space-y-2">
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿ¨Ÿáÿ™:</span>
                                            <span class="text-${
                                                analysis.predictions.shortTerm.direction === 'up' ? 'green' :
                                                analysis.predictions.shortTerm.direction === 'down' ? 'red' : 'yellow'
                                            }-400 font-semibold">${
                                                analysis.predictions.shortTerm.direction === 'up' ? 'ÿµÿπŸàÿØ€å' :
                                                analysis.predictions.shortTerm.direction === 'down' ? 'ŸÜÿ≤ŸàŸÑ€å' : 'ÿÆŸÜÿ´€å'
                                            }</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                            <span class="text-blue-400">${analysis.predictions.shortTerm.confidence.toFixed(1)}%</span>
                                        </div>
                                        <div class="text-gray-300 text-sm">${analysis.predictions.shortTerm.reasoning}</div>
                                    </div>
                                </div>

                                <!-- Medium Term -->
                                <div class="bg-gray-600 rounded p-3">
                                    <h5 class="text-white font-semibold mb-2">ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÖÿØÿ™ (${analysis.predictions.mediumTerm.timeframe})</h5>
                                    <div class="space-y-2">
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿ¨Ÿáÿ™:</span>
                                            <span class="text-${
                                                analysis.predictions.mediumTerm.direction === 'up' ? 'green' :
                                                analysis.predictions.mediumTerm.direction === 'down' ? 'red' : 'yellow'
                                            }-400 font-semibold">${
                                                analysis.predictions.mediumTerm.direction === 'up' ? 'ÿµÿπŸàÿØ€å' :
                                                analysis.predictions.mediumTerm.direction === 'down' ? 'ŸÜÿ≤ŸàŸÑ€å' : 'ÿÆŸÜÿ´€å'
                                            }</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-300">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                            <span class="text-blue-400">${analysis.predictions.mediumTerm.confidence.toFixed(1)}%</span>
                                        </div>
                                        <div class="text-gray-300 text-sm">${analysis.predictions.mediumTerm.reasoning}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 text-right">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error starting Agent 03 analysis:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™');
        }
    }

    // =============================================================================
    // AGENT 04 SPECIFIC UI METHODS (Portfolio Optimization)
    // =============================================================================
    
    async showAgent04Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent04Status(),
                this.loadAgent04Config(),
                this.loadAgent04History()
            ]);

            // Create detailed modal for Agent 04
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-7xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà (04)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Portfolio Overview -->
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                        <!-- Portfolio Value -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿßÿ±ÿ≤ÿ¥ Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà</h4>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-green-400">$${status.portfolioMetrics.totalValue.toLocaleString()}</div>
                                <div class="text-gray-300">ÿßÿ±ÿ≤ÿ¥ ⁄©ŸÑ</div>
                                <div class="mt-3 text-sm">
                                    <div class="text-blue-400">ÿ®ÿßÿ≤ÿØŸá ŸÖŸàÿ±ÿØ ÿßŸÜÿ™ÿ∏ÿßÿ±: ${status.portfolioMetrics.expectedReturn.toFixed(1)}%</div>
                                    <div class="text-yellow-400">ŸÜŸàÿ≥ÿßŸÜ: ${status.portfolioMetrics.volatility.toFixed(1)}%</div>
                                </div>
                            </div>
                        </div>

                        <!-- Performance Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Sharpe Ratio:</span>
                                    <span class="text-green-400">${status.portfolioMetrics.sharpeRatio}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Alpha:</span>
                                    <span class="text-blue-400">${status.portfolioMetrics.alpha}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Beta:</span>
                                    <span class="text-purple-400">${status.portfolioMetrics.beta}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Max Drawdown:</span>
                                    <span class="text-red-400">${status.portfolioMetrics.maxDrawdown}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Info Ratio:</span>
                                    <span class="text-cyan-400">${status.portfolioMetrics.informationRatio}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Rebalance Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ¢ÿÆÿ±€åŸÜ ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥:</span>
                                    <span class="text-blue-400">${new Date(status.rebalanceMetrics.lastRebalance).toLocaleDateString('fa-IR')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥ ÿ®ÿπÿØ€å:</span>
                                    <span class="text-yellow-400">${new Date(status.rebalanceMetrics.nextRebalance).toLocaleDateString('fa-IR')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÜÿ≠ÿ±ÿßŸÅ ŸÅÿπŸÑ€å:</span>
                                    <span class="text-${status.rebalanceMetrics.currentDrift > status.rebalanceMetrics.rebalanceThreshold ? 'red' : 'green'}-400">
                                        ${status.rebalanceMetrics.currentDrift.toFixed(1)}%
                                    </span>
                                </div>
                                <div class="text-center mt-3">
                                    <span class="px-3 py-1 rounded-full text-xs ${
                                        status.rebalanceMetrics.recommendedAction === 'rebalance' ? 'bg-orange-600 text-white' :
                                        status.rebalanceMetrics.recommendedAction === 'monitor' ? 'bg-yellow-600 text-white' :
                                        'bg-green-600 text-white'
                                    }">
                                        ${
                                            status.rebalanceMetrics.recommendedAction === 'rebalance' ? 'ŸÜ€åÿßÿ≤ ÿ®Ÿá ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥' :
                                            status.rebalanceMetrics.recommendedAction === 'monitor' ? 'ÿØÿ± ÿ≠ÿßŸÑ ŸÜÿ∏ÿßÿ±ÿ™' : 'ŸÜ⁄ØŸáÿØÿßÿ±€å'
                                        }
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Agent Performance -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿπŸÖŸÑ⁄©ÿ±ÿØ ÿß€åÿ¨ŸÜÿ™</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™:</span>
                                    <span class="text-blue-400">${status.accuracy}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å‚ÄåŸáÿß:</span>
                                    <span class="text-purple-400">${status.performance.totalOptimizations}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ®Ÿáÿ®ŸàÿØ ÿ®ÿßÿ≤ÿØŸá:</span>
                                    <span class="text-green-400">+${status.performance.avgReturnImprovement}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">⁄©ÿßŸáÿ¥ ÿ±€åÿ≥⁄©:</span>
                                    <span class="text-cyan-400">-${status.performance.avgRiskReduction}%</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Current Allocation Chart -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ÿ™ÿÆÿµ€åÿµ ŸÅÿπŸÑ€å ÿØÿßÿ±ÿß€å€å‚ÄåŸáÿß</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4">
                            ${Object.entries(status.currentAllocation).map(([category, data]) => `
                                <div class="bg-gray-600 rounded p-3">
                                    <div class="text-center mb-2">
                                        <div class="text-xl font-bold text-white">${data.percentage}%</div>
                                        <div class="text-gray-300 text-sm capitalize">${
                                            category === 'crypto' ? 'ÿßÿ±ÿ≤Ÿáÿß€å ÿØ€åÿ¨€åÿ™ÿßŸÑ' :
                                            category === 'stocks' ? 'ÿ≥ŸáÿßŸÖ' :
                                            category === 'bonds' ? 'ÿßŸàÿ±ÿßŸÇ ŸÇÿ±ÿ∂Ÿá' : 'ŸÜŸÇÿØ'
                                        }</div>
                                        <div class="text-green-400 text-sm">$${data.value.toLocaleString()}</div>
                                    </div>
                                    <div class="w-full bg-gray-500 rounded-full h-3 mb-2">
                                        <div class="bg-${
                                            category === 'crypto' ? 'orange' :
                                            category === 'stocks' ? 'blue' :
                                            category === 'bonds' ? 'green' : 'gray'
                                        }-400 h-3 rounded-full" style="width: ${data.percentage}%"></div>
                                    </div>
                                    <div class="text-xs text-gray-300">
                                        ${data.assets.slice(0, 2).join(', ')}${data.assets.length > 2 ? `, +${data.assets.length - 2}` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <!-- Control Panel -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">ŸæŸÜŸÑ ⁄©ŸÜÿ™ÿ±ŸÑ</h4>
                        <div class="flex flex-wrap gap-3">
                            <button onclick="aiTabInstance.handleAgent04Control('start')" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-play mr-2"></i>ÿ¥ÿ±Ÿàÿπ
                            </button>
                            <button onclick="aiTabInstance.handleAgent04Control('stop')" 
                                    class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-stop mr-2"></i>ÿ™ŸàŸÇŸÅ
                            </button>
                            <button onclick="aiTabInstance.handleAgent04Control('force_rebalance')" 
                                    class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-balance-scale mr-2"></i>ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥ ÿßÿ¨ÿ®ÿßÿ±€å
                            </button>
                            <button onclick="aiTabInstance.handleAgent04Control('calibrate')" 
                                    class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-cogs mr-2"></i>⁄©ÿßŸÑ€åÿ®ÿ±ÿßÿ≥€åŸàŸÜ
                            </button>
                            <button onclick="aiTabInstance.startAgent04Optimization()" 
                                    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-chart-pie mr-2"></i>ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å ÿ¨ÿØ€åÿØ
                            </button>
                            <button onclick="aiTabInstance.executeAgent04Rebalance(null, true)" 
                                    class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                                <i class="fas fa-eye mr-2"></i>ÿ¥ÿ®€åŸá‚Äåÿ≥ÿßÿ≤€å ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥
                            </button>
                        </div>
                    </div>

                    <!-- Optimization History -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿßÿ±€åÿÆ⁄ÜŸá ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å‚ÄåŸáÿß</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ™ÿßÿ±€åÿÆ</th>
                                        <th class="text-right p-2">ŸÜŸàÿπ</th>
                                        <th class="text-right p-2">ÿ®Ÿáÿ®ŸàÿØ ÿ®ÿßÿ≤ÿØŸá</th>
                                        <th class="text-right p-2">⁄©ÿßŸáÿ¥ ÿ±€åÿ≥⁄©</th>
                                        <th class="text-right p-2">ŸÖÿπÿßŸÖŸÑÿßÿ™</th>
                                        <th class="text-right p-2">ŸÜÿ™€åÿ¨Ÿá</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.optimizations.slice(0, 6).map(opt => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(opt.timestamp).toLocaleDateString('fa-IR')}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    opt.type === 'rebalance' ? 'bg-blue-600 text-white' :
                                                    opt.type === 'optimization' ? 'bg-green-600 text-white' :
                                                    'bg-purple-600 text-white'
                                                }">${
                                                    opt.type === 'rebalance' ? 'ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥' :
                                                    opt.type === 'optimization' ? 'ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å' : 'ÿ™ŸÜÿ∏€åŸÖ ÿ±€åÿ≥⁄©'
                                                }</span>
                                            </td>
                                            <td class="p-2 text-green-400">+${opt.returnImprovement.toFixed(2)}%</td>
                                            <td class="p-2 text-cyan-400">-${opt.riskReduction.toFixed(2)}%</td>
                                            <td class="p-2 text-blue-400">${opt.tradesExecuted}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    opt.outcome === 'successful' ? 'bg-green-600 text-white' :
                                                    opt.outcome === 'partially_successful' ? 'bg-yellow-600 text-white' :
                                                    'bg-red-600 text-white'
                                                }">${
                                                    opt.outcome === 'successful' ? 'ŸÖŸàŸÅŸÇ' :
                                                    opt.outcome === 'partially_successful' ? 'ŸÜ€åŸÖŸá ŸÖŸàŸÅŸÇ' : 'ŸÜÿßŸÖŸàŸÅŸÇ'
                                                }</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 04 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà');
        }
    }

    async handleAgent04Control(action) {
        try {
            const result = await this.controlAgent04(action);
            this.showSuccessMessage(result.message || `ÿπŸÖŸÑ€åÿßÿ™ ${action} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ`);
            
            // Refresh agent status
            await this.loadAgent04Status();
        } catch (error) {
            console.error('‚ùå Error controlling Agent 04:', error);
            this.showErrorMessage(`ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿπŸÖŸÑ€åÿßÿ™ ${action}`);
        }
    }

    async startAgent04Optimization(riskTolerance = 'moderate', timeHorizon = 'long_term') {
        try {
            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà...');
            
            const optimization = await this.startAgent04Optimization(null, riskTolerance, timeHorizon);
            
            loadingMsg.remove();
            
            // Show optimization results
            this.showOptimizationResults(optimization);

        } catch (error) {
            console.error('‚ùå Error starting Agent 04 optimization:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßŸÜÿ¨ÿßŸÖ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà');
        }
    }

    showOptimizationResults(optimization) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-gray-800 rounded-lg p-6 max-w-6xl w-full mx-4 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà</h3>
                    <button onclick="this.closest('.fixed').remove()" 
                            class="text-gray-400 hover:text-white text-2xl">√ó</button>
                </div>
                
                <div class="space-y-6">
                    <!-- Performance Comparison -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ŸÖŸÇÿß€åÿ≥Ÿá ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div class="text-center">
                                <div class="text-lg font-bold text-green-400">
                                    ${optimization.results.expectedReturn.current.toFixed(1)}% ‚Üí ${optimization.results.expectedReturn.optimized.toFixed(1)}%
                                </div>
                                <div class="text-gray-300">ÿ®ÿßÿ≤ÿØŸá ŸÖŸàÿ±ÿØ ÿßŸÜÿ™ÿ∏ÿßÿ±</div>
                                <div class="text-green-400 text-sm">
                                    ÿ®Ÿáÿ®ŸàÿØ: +${optimization.results.expectedReturn.improvement.toFixed(1)}%
                                </div>
                            </div>
                            <div class="text-center">
                                <div class="text-lg font-bold text-blue-400">
                                    ${optimization.results.risk.current.toFixed(1)}% ‚Üí ${optimization.results.risk.optimized.toFixed(1)}%
                                </div>
                                <div class="text-gray-300">ÿ±€åÿ≥⁄© (ŸÜŸàÿ≥ÿßŸÜ)</div>
                                <div class="text-cyan-400 text-sm">
                                    ⁄©ÿßŸáÿ¥: -${optimization.results.risk.reduction.toFixed(1)}%
                                </div>
                            </div>
                            <div class="text-center">
                                <div class="text-lg font-bold text-purple-400">
                                    ${optimization.results.sharpeRatio.current.toFixed(2)} ‚Üí ${optimization.results.sharpeRatio.optimized.toFixed(2)}
                                </div>
                                <div class="text-gray-300">ŸÜÿ≥ÿ®ÿ™ ÿ¥ÿßÿ±Ÿæ</div>
                                <div class="text-purple-400 text-sm">
                                    ÿ®Ÿáÿ®ŸàÿØ: +${optimization.results.sharpeRatio.improvement.toFixed(2)}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Recommended Trades -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ŸÖÿπÿßŸÖŸÑÿßÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿØÿßÿ±ÿß€å€å</th>
                                        <th class="text-right p-2">ÿπŸÖŸÑ€åÿßÿ™</th>
                                        <th class="text-right p-2">Ÿàÿ≤ŸÜ ŸÅÿπŸÑ€å</th>
                                        <th class="text-right p-2">Ÿàÿ≤ŸÜ ŸáÿØŸÅ</th>
                                        <th class="text-right p-2">ŸÖŸÇÿØÿßÿ±</th>
                                        <th class="text-right p-2">ÿØŸÑ€åŸÑ</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${optimization.recommendedTrades.map(trade => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-white font-semibold">${trade.asset}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    trade.action === 'buy' || trade.action === 'increase' ? 'bg-green-600 text-white' :
                                                    'bg-red-600 text-white'
                                                }">${
                                                    trade.action === 'increase' ? 'ÿßŸÅÿ≤ÿß€åÿ¥' :
                                                    trade.action === 'reduce' ? '⁄©ÿßŸáÿ¥' :
                                                    trade.action === 'buy' ? 'ÿÆÿ±€åÿØ' : 'ŸÅÿ±Ÿàÿ¥'
                                                }</span>
                                            </td>
                                            <td class="p-2 text-blue-400">${trade.currentWeight.toFixed(1)}%</td>
                                            <td class="p-2 text-green-400">${trade.targetWeight.toFixed(1)}%</td>
                                            <td class="p-2 text-${trade.amount > 0 ? 'green' : 'red'}-400">
                                                ${trade.amount > 0 ? '+' : ''}$${Math.abs(trade.amount).toLocaleString()}
                                            </td>
                                            <td class="p-2 text-gray-300 text-xs">${trade.reasoning}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Risk Analysis -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿ™ÿ≠ŸÑ€åŸÑ ÿ±€åÿ≥⁄©</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-400">${optimization.riskAnalysis.concentrationRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ÿ™ŸÖÿ±⁄©ÿ≤</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-red-400">${optimization.riskAnalysis.correlationRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ŸáŸÖÿ®ÿ≥ÿ™⁄Ø€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-yellow-400">${optimization.riskAnalysis.liquidityRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ŸÜŸÇÿØ€åŸÜ⁄Ø€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${optimization.riskAnalysis.marketRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ÿ®ÿßÿ≤ÿßÿ±</div>
                            </div>
                        </div>
                        <div class="mt-4 text-center">
                            <div class="text-lg font-bold text-white">ÿßŸÖÿ™€åÿßÿ≤ ⁄©ŸÑ€å ÿ±€åÿ≥⁄©: ${optimization.riskAnalysis.overallRiskScore.toFixed(1)}</div>
                            <div class="text-gray-400">ÿßÿπÿ™ŸÖÿßÿØ ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å: ${optimization.confidence.toFixed(1)}%</div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-between">
                    <button onclick="aiTabInstance.executeAgent04Rebalance(${JSON.stringify(optimization.recommendedTrades)}, true)" 
                            class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg">
                        <i class="fas fa-eye mr-2"></i>ÿ¥ÿ®€åŸá‚Äåÿ≥ÿßÿ≤€å
                    </button>
                    <button onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                        ÿ®ÿ≥ÿ™ŸÜ
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    // =============================================================================
    // AGENT 05 SPECIFIC UI METHODS (Market Making)
    // =============================================================================
    
    async showAgent05Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent05Status(),
                this.loadAgent05Config(),
                this.loadAgent05History()
            ]);

            // Create detailed modal for Agent 05
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-7xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ± (05)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Market Making Overview -->
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                        <!-- Current Spreads -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿßÿ≥Ÿæÿ±ÿØŸáÿß€å ÿ¨ÿßÿ±€å</h4>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-green-400">${status.spreads.current.toFixed(3)}%</div>
                                <div class="text-gray-300">ÿßÿ≥Ÿæÿ±ÿØ ŸÅÿπŸÑ€å</div>
                                <div class="mt-3 text-sm">
                                    <div class="text-blue-400">ŸáÿØŸÅ: ${status.spreads.target.toFixed(3)}%</div>
                                    <div class="text-yellow-400">ŸÖ€åÿßŸÜ⁄Ø€åŸÜ: ${(status.spreads.current * 1.1).toFixed(3)}%</div>
                                </div>
                            </div>
                        </div>

                        <!-- Order Book Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ÿ¢ÿ±ÿØÿ± ÿ®Ÿà⁄©</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿÆÿ±€åÿØ:</span>
                                    <span class="text-green-400">${status.orderBook.bidOrders}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ŸÅÿ±Ÿàÿ¥:</span>
                                    <span class="text-red-400">${status.orderBook.askOrders}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≠ÿ¨ŸÖ ⁄©ŸÑ:</span>
                                    <span class="text-purple-400">${status.orderBook.totalVolume.toFixed(2)} BTC</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">⁄Øÿ±ÿØÿ¥ ŸÖŸàÿ¨ŸàÿØ€å:</span>
                                    <span class="text-cyan-400">${((status.orderBook.bidOrders + status.orderBook.askOrders) / 2).toFixed(0)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸæŸáŸÜÿß€å ÿ®ÿßÿ≤ÿßÿ±:</span>
                                    <span class="text-yellow-400">${(status.spreads.current * 100 * 10).toFixed(0)} ÿ≥ÿ∑ÿ≠</span>
                                </div>
                            </div>
                        </div>

                        <!-- Performance Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">⁄©ŸÑ ÿ≠ÿ¨ŸÖ:</span>
                                    <span class="text-green-400">$${status.performance.totalVolume.toLocaleString()}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≥ŸàÿØ:</span>
                                    <span class="text-blue-400">$${status.performance.profits.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÖÿπÿßŸÖŸÑÿßÿ™:</span>
                                    <span class="text-purple-400">${Math.floor(status.performance.totalVolume / 1000)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Fill Rate:</span>
                                    <span class="text-cyan-400">${(85 + Math.random() * 10).toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">PnL ÿ±Ÿàÿ≤ÿßŸÜŸá:</span>
                                    <span class="text-green-400">+${(status.performance.profits / 30).toFixed(1)}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Inventory Status -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">Ÿàÿ∂ÿπ€åÿ™ ŸÖŸàÿ¨ŸàÿØ€å</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">BTC ŸÖŸàÿ¨ŸàÿØ€å:</span>
                                    <span class="text-blue-400">${(25.5 + Math.random() * 5).toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">USDT ŸÖŸàÿ¨ŸàÿØ€å:</span>
                                    <span class="text-green-400">${(125000 + Math.random() * 50000).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÜÿ≥ÿ®ÿ™ ÿ™ÿπÿßÿØŸÑ:</span>
                                    <span class="text-purple-400">${(45 + Math.random() * 10).toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© ŸÖŸàÿ¨ŸàÿØ€å:</span>
                                    <span class="text-yellow-400">⁄©ŸÖ</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ¢ÿ≥ÿ™ÿßŸÜŸá ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥:</span>
                                    <span class="text-orange-400">${(65 + Math.random() * 5).toFixed(0)}%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Grid Strategy Configuration -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ⁄Øÿ±€åÿØ</h4>
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">ÿßŸÜÿØÿßÿ≤Ÿá ⁄Øÿ±€åÿØ</label>
                                <input type="number" id="agent05-grid-size" value="${config.gridSize || 10}" min="5" max="50"
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">ÿ≠ÿØÿß⁄©ÿ´ÿ± ÿßÿ≥Ÿæÿ±ÿØ (%)</label>
                                <input type="number" id="agent05-max-spread" value="${(config.maxSpread * 100).toFixed(3) || '0.050'}" min="0.001" max="1" step="0.001"
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">ÿ≠ÿ¨ŸÖ ÿ≥ŸÅÿßÿ±ÿ¥ (BTC)</label>
                                <input type="number" id="agent05-order-size" value="${config.orderSize || 0.01}" min="0.001" max="10" step="0.001"
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">ÿ¢ÿ≥ÿ™ÿßŸÜŸá ŸÖŸàÿ¨ŸàÿØ€å (%)</label>
                                <input type="number" id="agent05-inventory-threshold" value="${config.inventoryThreshold || 70}" min="50" max="90"
                                       class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ÿßÿÆ€åÿ±</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ŸÜŸàÿπ</th>
                                        <th class="text-right p-2">ŸÇ€åŸÖÿ™</th>
                                        <th class="text-right p-2">ŸÖŸÇÿØÿßÿ±</th>
                                        <th class="text-right p-2">ÿßÿ≥Ÿæÿ±ÿØ</th>
                                        <th class="text-right p-2">PnL</th>
                                        <th class="text-right p-2">Ÿàÿ∂ÿπ€åÿ™</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.recentTrades.slice(0, 8).map(trade => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(trade.timestamp).toLocaleTimeString('fa-IR')}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    trade.side === 'buy' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                                                }">${trade.side === 'buy' ? 'ÿÆÿ±€åÿØ' : 'ŸÅÿ±Ÿàÿ¥'}</span>
                                            </td>
                                            <td class="p-2 text-blue-400">$${trade.price.toLocaleString()}</td>
                                            <td class="p-2 text-white">${trade.amount.toFixed(4)} BTC</td>
                                            <td class="p-2 text-yellow-400">${(trade.spread * 100).toFixed(3)}%</td>
                                            <td class="p-2 text-${trade.pnl >= 0 ? 'green' : 'red'}-400">
                                                ${trade.pnl >= 0 ? '+' : ''}$${trade.pnl.toFixed(2)}
                                            </td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    trade.status === 'filled' ? 'bg-green-600 text-white' :
                                                    trade.status === 'partial' ? 'bg-yellow-600 text-white' :
                                                    'bg-gray-600 text-white'
                                                }">${
                                                    trade.status === 'filled' ? 'ÿ™⁄©ŸÖ€åŸÑ' :
                                                    trade.status === 'partial' ? 'ÿ¨ÿ≤ÿ¶€å' : 'ÿØÿ±ÿßŸÜÿ™ÿ∏ÿßÿ±'
                                                }</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="flex space-x-4 space-x-reverse justify-center">
                        <button onclick="aiTabInstance.startAgent05Strategy()" 
                                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-play mr-2"></i>ÿ¥ÿ±Ÿàÿπ ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å
                        </button>
                        <button onclick="aiTabInstance.controlAgent05('pause')" 
                                class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-pause mr-2"></i>ŸÖÿ™ŸàŸÇŸÅ ⁄©ÿ±ÿØŸÜ
                        </button>
                        <button onclick="aiTabInstance.controlAgent05('adjust_spread')" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-arrows-alt-h mr-2"></i>ÿ™ŸÜÿ∏€åŸÖ ÿßÿ≥Ÿæÿ±ÿØ
                        </button>
                        <button onclick="aiTabInstance.controlAgent05('rebalance_inventory')" 
                                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-balance-scale mr-2"></i>ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥ ŸÖŸàÿ¨ŸàÿØ€å
                        </button>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 05 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ŸÜŸÖÿß€åÿ¥ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ±');
        }
    }

    async startAgent05Strategy() {
        try {
            const gridSize = parseInt(document.getElementById('agent05-grid-size')?.value) || 10;
            const maxSpread = parseFloat(document.getElementById('agent05-max-spread')?.value) / 100 || 0.05;

            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ±...');
            
            const execution = await this.executeAgent05Strategy('BTC/USDT', maxSpread, gridSize);
            
            loadingMsg.remove();
            
            // Show execution results
            this.showMarketMakingResults(execution);

        } catch (error) {
            console.error('‚ùå Error starting Agent 05 strategy:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ±');
        }
    }

    showMarketMakingResults(execution) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-gray-800 rounded-lg p-6 max-w-5xl w-full mx-4 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿßÿ¨ÿ±ÿß€å ŸÖÿßÿ±⁄©ÿ™ ŸÖ€å⁄©ÿ±</h3>
                    <button onclick="this.closest('.fixed').remove()" 
                            class="text-gray-400 hover:text-white text-2xl">√ó</button>
                </div>
                
                <div class="space-y-6">
                    <!-- Execution Summary -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿÆŸÑÿßÿµŸá ÿßÿ¨ÿ±ÿß</h4>
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-400">${execution.ordersPlaced.buy}</div>
                                <div class="text-gray-300">ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿÆÿ±€åÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-red-400">${execution.ordersPlaced.sell}</div>
                                <div class="text-gray-300">ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ŸÅÿ±Ÿàÿ¥</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-400">${execution.spreads.avg.toFixed(3)}%</div>
                                <div class="text-gray-300">ÿßÿ≥Ÿæÿ±ÿØ ŸÖÿ™Ÿàÿ≥ÿ∑</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${execution.totalValue.toFixed(2)} BTC</div>
                                <div class="text-gray-300">ÿ≠ÿ¨ŸÖ ⁄©ŸÑ</div>
                            </div>
                        </div>
                    </div>

                    <!-- Grid Details -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄Øÿ±€åÿØ</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≥ÿ∑ÿ≠</th>
                                        <th class="text-right p-2">ŸÇ€åŸÖÿ™ ÿÆÿ±€åÿØ</th>
                                        <th class="text-right p-2">ŸÇ€åŸÖÿ™ ŸÅÿ±Ÿàÿ¥</th>
                                        <th class="text-right p-2">ÿßÿ≥Ÿæÿ±ÿØ</th>
                                        <th class="text-right p-2">ÿ≠ÿ¨ŸÖ</th>
                                        <th class="text-right p-2">Ÿàÿ∂ÿπ€åÿ™</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${execution.gridLevels.slice(0, 8).map((level, index) => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-white font-semibold">${index + 1}</td>
                                            <td class="p-2 text-green-400">$${level.buyPrice.toLocaleString()}</td>
                                            <td class="p-2 text-red-400">$${level.sellPrice.toLocaleString()}</td>
                                            <td class="p-2 text-yellow-400">${level.spread.toFixed(3)}%</td>
                                            <td class="p-2 text-blue-400">${level.volume.toFixed(4)} BTC</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    level.status === 'active' ? 'bg-green-600 text-white' :
                                                    level.status === 'pending' ? 'bg-yellow-600 text-white' :
                                                    'bg-gray-600 text-white'
                                                }">${
                                                    level.status === 'active' ? 'ŸÅÿπÿßŸÑ' :
                                                    level.status === 'pending' ? 'ÿØÿ±ÿßŸÜÿ™ÿ∏ÿßÿ±' : 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'
                                                }</span>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Risk Metrics -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿ±€åÿ≥⁄©</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-400">${execution.riskMetrics.inventoryRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ŸÖŸàÿ¨ŸàÿØ€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-red-400">${execution.riskMetrics.spreadRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ÿßÿ≥Ÿæÿ±ÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-yellow-400">${execution.riskMetrics.executionRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ÿßÿ¨ÿ±ÿß</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${execution.riskMetrics.marketRisk.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ÿ®ÿßÿ≤ÿßÿ±</div>
                            </div>
                        </div>
                        <div class="mt-4 text-center">
                            <div class="text-lg font-bold text-white">ÿßŸÖÿ™€åÿßÿ≤ ⁄©ŸÑ€å ÿ±€åÿ≥⁄©: ${execution.riskMetrics.overallRiskScore.toFixed(1)}</div>
                            <div class="text-gray-400">ÿßÿπÿ™ŸÖÿßÿØ ÿßÿ¨ÿ±ÿß: ${execution.confidence.toFixed(1)}%</div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-center">
                    <button onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                        ÿ®ÿ≥ÿ™ŸÜ
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    // =============================================================================
    // AGENT 06 SPECIFIC UI METHODS (Algorithmic Trading)
    // =============================================================================
    
    async showAgent06Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent06Status(),
                this.loadAgent06Config(),
                this.loadAgent06History()
            ]);

            // Create detailed modal for Agent 06
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-7xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄© (06)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- Strategy Overview -->
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                        <!-- Portfolio Performance -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿπŸÖŸÑ⁄©ÿ±ÿØ Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà</h4>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-green-400">$${status.positions.totalValue.toLocaleString()}</div>
                                <div class="text-gray-300">ÿßÿ±ÿ≤ÿ¥ ⁄©ŸÑ</div>
                                <div class="mt-3 text-sm">
                                    <div class="text-blue-400">PnL: $${status.positions.unrealizedPnL.toFixed(2)}</div>
                                    <div class="text-yellow-400">ŸæŸàÿ≤€åÿ¥ŸÜ‚ÄåŸáÿß: ${status.positions.activePositions}</div>
                                </div>
                            </div>
                        </div>

                        <!-- Trading Stats -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ¢ŸÖÿßÿ± ŸÖÿπÿßŸÖŸÑÿßÿ™€å</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">⁄©ŸÑ ŸÖÿπÿßŸÖŸÑÿßÿ™:</span>
                                    <span class="text-green-400">${status.performance.totalTrades}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÜÿ±ÿÆ ÿ®ÿ±ÿØ:</span>
                                    <span class="text-blue-400">${((status.performance.winningTrades / status.performance.totalTrades) * 100).toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÖÿπÿßŸÖŸÑŸá:</span>
                                    <span class="text-purple-400">$${status.performance.averageTrade.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Profit Factor:</span>
                                    <span class="text-cyan-400">${status.performance.profitFactor}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Max Drawdown:</span>
                                    <span class="text-red-400">${status.riskMetrics.maxDrawdown}%</span>
                                </div>
                            </div>
                        </div>

                        <!-- Active Strategies -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ</h4>
                            <div class="space-y-2 text-sm">
                                ${Object.entries(status.strategies).map(([name, strategy]) => `
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-300">${
                                            name === 'momentum' ? 'ŸÖŸàŸÖŸÜÿ™ŸàŸÖ' :
                                            name === 'meanReversion' ? 'ÿ®ÿ±⁄Øÿ¥ÿ™ ŸÖ€åÿßŸÜŸá' :
                                            name === 'arbitrage' ? 'ÿ¢ÿ±ÿ®€åÿ™ÿ±ÿß⁄ò' : '⁄Øÿ±€åÿØ'
                                        }:</span>
                                        <div class="flex items-center">
                                            <span class="text-${strategy.performance > 0 ? 'green' : 'red'}-400 mr-2">
                                                ${strategy.performance > 0 ? '+' : ''}${strategy.performance.toFixed(1)}%
                                            </span>
                                            <div class="w-2 h-2 bg-${strategy.active ? 'green' : 'gray'}-400 rounded-full"></div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>

                        <!-- Risk Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿ±€åÿ≥⁄©</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÜÿØÿßÿ≤Ÿá ŸÖŸàŸÇÿπ€åÿ™:</span>
                                    <span class="text-blue-400">${status.riskMetrics.positionSizing}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ±€åÿ≥⁄© Ÿáÿ± ŸÖÿπÿßŸÖŸÑŸá:</span>
                                    <span class="text-yellow-400">${status.riskMetrics.riskPerTrade}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Kelly Criterion:</span>
                                    <span class="text-purple-400">${status.riskMetrics.kellyCriterion}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Calmar Ratio:</span>
                                    <span class="text-green-400">${status.riskMetrics.calmarRatio}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Drawdown ŸÅÿπŸÑ€å:</span>
                                    <span class="text-orange-400">${status.riskMetrics.currentDrawdown}%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Strategy Configuration -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            ${Object.entries(config.strategies).map(([name, strategy]) => `
                                <div class="bg-gray-800 rounded-lg p-3 border ${strategy.enabled ? 'border-green-500' : 'border-gray-600'}">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-white font-medium">${
                                            name === 'momentum' ? 'ŸÖŸàŸÖŸÜÿ™ŸàŸÖ' :
                                            name === 'meanReversion' ? 'ÿ®ÿ±⁄Øÿ¥ÿ™ ŸÖ€åÿßŸÜŸá' :
                                            name === 'arbitrage' ? 'ÿ¢ÿ±ÿ®€åÿ™ÿ±ÿß⁄ò' : '⁄Øÿ±€åÿØ'
                                        }</span>
                                        <label class="relative inline-flex items-center cursor-pointer">
                                            <input type="checkbox" class="sr-only peer" ${strategy.enabled ? 'checked' : ''} 
                                                   onchange="aiTabInstance.toggleStrategy('${name}')">
                                            <div class="w-9 h-5 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-green-600"></div>
                                        </label>
                                    </div>
                                    <div class="text-sm text-gray-400">Ÿàÿ≤ŸÜ: ${strategy.weight}%</div>
                                    <div class="text-xs text-gray-500 mt-1">
                                        ${Object.entries(strategy.parameters).slice(0, 2).map(([key, value]) => 
                                            `${key}: ${value}`
                                        ).join(', ')}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <!-- Recent Trading Activity -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ŸÖÿπÿßŸÖŸÑÿßÿ™€å ÿßÿÆ€åÿ±</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å</th>
                                        <th class="text-right p-2">ŸÜŸÖÿßÿØ</th>
                                        <th class="text-right p-2">ŸÜŸàÿπ</th>
                                        <th class="text-right p-2">ŸÖŸÇÿØÿßÿ±</th>
                                        <th class="text-right p-2">ŸÇ€åŸÖÿ™ Ÿàÿ±ŸàÿØ</th>
                                        <th class="text-right p-2">ŸÇ€åŸÖÿ™ ÿÆÿ±Ÿàÿ¨</th>
                                        <th class="text-right p-2">PnL</th>
                                        <th class="text-right p-2">ŸÖÿØÿ™ ÿ≤ŸÖÿßŸÜ</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.recentTrades.slice(0, 8).map(trade => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(trade.timestamp).toLocaleTimeString('fa-IR')}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    trade.strategy === 'momentum' ? 'bg-blue-600 text-white' :
                                                    trade.strategy === 'mean_reversion' ? 'bg-purple-600 text-white' :
                                                    trade.strategy === 'arbitrage' ? 'bg-green-600 text-white' :
                                                    'bg-orange-600 text-white'
                                                }">${
                                                    trade.strategy === 'momentum' ? 'ŸÖŸàŸÖŸÜÿ™ŸàŸÖ' :
                                                    trade.strategy === 'mean_reversion' ? 'ÿ®ÿ±⁄Øÿ¥ÿ™' :
                                                    trade.strategy === 'arbitrage' ? 'ÿ¢ÿ±ÿ®€åÿ™ÿ±ÿß⁄ò' : '⁄Øÿ±€åÿØ'
                                                }</span>
                                            </td>
                                            <td class="p-2 text-blue-400">${trade.symbol}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    trade.side === 'buy' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                                                }">${trade.side === 'buy' ? 'ÿÆÿ±€åÿØ' : 'ŸÅÿ±Ÿàÿ¥'}</span>
                                            </td>
                                            <td class="p-2 text-white">${trade.quantity}</td>
                                            <td class="p-2 text-yellow-400">$${trade.entryPrice.toLocaleString()}</td>
                                            <td class="p-2 text-cyan-400">$${trade.exitPrice.toLocaleString()}</td>
                                            <td class="p-2 text-${trade.pnl >= 0 ? 'green' : 'red'}-400">
                                                ${trade.pnl >= 0 ? '+' : ''}$${trade.pnl.toFixed(2)} (${trade.pnlPercent.toFixed(1)}%)
                                            </td>
                                            <td class="p-2 text-gray-400">${trade.duration}m</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Control Panel -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <!-- Strategy Execution -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h5 class="text-white font-semibold mb-3">ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å</h5>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å</label>
                                    <select id="agent06-strategy" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                        <option value="momentum">ŸÖŸàŸÖŸÜÿ™ŸàŸÖ</option>
                                        <option value="mean_reversion">ÿ®ÿ±⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖ€åÿßŸÜŸá</option>
                                        <option value="arbitrage">ÿ¢ÿ±ÿ®€åÿ™ÿ±ÿß⁄ò</option>
                                        <option value="grid">⁄Øÿ±€åÿØ</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">ŸÜŸÖÿßÿØ</label>
                                    <select id="agent06-symbol" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                        <option value="BTC/USDT">BTC/USDT</option>
                                        <option value="ETH/USDT">ETH/USDT</option>
                                        <option value="SOL/USDT">SOL/USDT</option>
                                        <option value="MATIC/USDT">MATIC/USDT</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Risk Management -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h5 class="text-white font-semibold mb-3">ŸÖÿØ€åÿ±€åÿ™ ÿ±€åÿ≥⁄©</h5>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">ÿ±€åÿ≥⁄© Ÿáÿ± ŸÖÿπÿßŸÖŸÑŸá (%)</label>
                                    <input type="number" id="agent06-risk-per-trade" value="${config.riskManagement.riskPerTrade}" min="0.5" max="10" step="0.1"
                                           class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">Stop Loss (%)</label>
                                    <input type="number" id="agent06-stop-loss" value="${config.riskManagement.stopLoss}" min="1" max="10" step="0.1"
                                           class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="flex space-x-4 space-x-reverse justify-center">
                        <button onclick="aiTabInstance.executeAgent06Strategy()" 
                                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-play mr-2"></i>ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å
                        </button>
                        <button onclick="aiTabInstance.controlAgent06('pause')" 
                                class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-pause mr-2"></i>ŸÖÿ™ŸàŸÇŸÅ ⁄©ÿ±ÿØŸÜ
                        </button>
                        <button onclick="aiTabInstance.controlAgent06('optimize_parameters')" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-cog mr-2"></i>ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å
                        </button>
                        <button onclick="aiTabInstance.controlAgent06('rebalance_strategies')" 
                                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-balance-scale mr-2"></i>ÿ±€åÿ®ÿßŸÑÿßŸÜÿ≥
                        </button>
                        <button onclick="aiTabInstance.controlAgent06('emergency_stop')" 
                                class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-stop mr-2"></i>ÿ™ŸàŸÇŸÅ ÿßÿ∂ÿ∑ÿ±ÿßÿ±€å
                        </button>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 06 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ŸÜŸÖÿß€åÿ¥ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄©');
        }
    }

    async executeAgent06Strategy() {
        try {
            const strategy = document.getElementById('agent06-strategy')?.value || 'momentum';
            const symbol = document.getElementById('agent06-symbol')?.value || 'BTC/USDT';
            const riskPerTrade = parseFloat(document.getElementById('agent06-risk-per-trade')?.value) || 2.5;
            const stopLoss = parseFloat(document.getElementById('agent06-stop-loss')?.value) || 3.0;

            const parameters = {
                riskPerTrade,
                stopLoss,
                timeframe: '1h',
                lookbackPeriod: 20
            };

            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄©...');
            
            const execution = await this.executeAgent06Strategy(strategy, symbol, parameters);
            
            loadingMsg.remove();
            
            // Show execution results
            this.showAlgorithmicResults(execution);

        } catch (error) {
            console.error('‚ùå Error executing Agent 06 strategy:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄©');
        }
    }

    showAlgorithmicResults(execution) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-gray-800 rounded-lg p-6 max-w-6xl w-full mx-4 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿßÿ¨ÿ±ÿß€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿßŸÑ⁄ØŸàÿ±€åÿ™ŸÖ€å⁄©</h3>
                    <button onclick="this.closest('.fixed').remove()" 
                            class="text-gray-400 hover:text-white text-2xl">√ó</button>
                </div>
                
                <div class="space-y-6">
                    <!-- Execution Summary -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿÆŸÑÿßÿµŸá ÿßÿ¨ÿ±ÿß</h4>
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-400">${execution.strategy}</div>
                                <div class="text-gray-300">ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-400">${execution.symbol}</div>
                                <div class="text-gray-300">ŸÜŸÖÿßÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${execution.execution.ordersGenerated}</div>
                                <div class="text-gray-300">ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿ™ŸàŸÑ€åÿØ ÿ¥ÿØŸá</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-yellow-400">${execution.execution.fillRate.toFixed(1)}%</div>
                                <div class="text-gray-300">ŸÜÿ±ÿÆ ÿßÿ¨ÿ±ÿß</div>
                            </div>
                        </div>
                    </div>

                    <!-- Performance Prediction -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-5 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-${execution.prediction.expectedReturn >= 0 ? 'green' : 'red'}-400">
                                    ${execution.prediction.expectedReturn >= 0 ? '+' : ''}${execution.prediction.expectedReturn}%
                                </div>
                                <div class="text-gray-300 text-sm">ÿ®ÿßÿ≤ÿØŸá ŸÖŸàÿ±ÿØ ÿßŸÜÿ™ÿ∏ÿßÿ±</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-400">${execution.prediction.confidence.toFixed(0)}%</div>
                                <div class="text-gray-300 text-sm">ÿßÿπÿ™ŸÖÿßÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${execution.prediction.riskReward}</div>
                                <div class="text-gray-300 text-sm">ŸÜÿ≥ÿ®ÿ™ ÿ±€åÿ≥⁄©/ŸæÿßÿØÿßÿ¥</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-cyan-400">${execution.prediction.probability}</div>
                                <div class="text-gray-300 text-sm">ÿßÿ≠ÿ™ŸÖÿßŸÑ ŸÖŸàŸÅŸÇ€åÿ™</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-400">${execution.prediction.timeHorizon}</div>
                                <div class="text-gray-300 text-sm">ÿ®ÿßÿ≤Ÿá ÿ≤ŸÖÿßŸÜ€å</div>
                            </div>
                        </div>
                    </div>

                    <!-- Trading Signals -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿ≥€å⁄ØŸÜÿßŸÑ‚ÄåŸáÿß€å ŸÖÿπÿßŸÖŸÑÿßÿ™€å</h4>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                            <div>
                                <h5 class="text-gray-300 font-medium mb-2">ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥€å⁄ØŸÜÿßŸÑ</h5>
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ŸÜŸàÿπ:</span>
                                        <span class="text-white">${execution.signals.type}</span>
                                    </div>
                                    ${execution.signals.direction ? `
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">ÿ¨Ÿáÿ™:</span>
                                            <span class="text-${execution.signals.direction === 'bullish' ? 'green' : 'red'}-400">
                                                ${execution.signals.direction === 'bullish' ? 'ÿµÿπŸàÿØ€å' : 'ŸÜÿ≤ŸàŸÑ€å'}
                                            </span>
                                        </div>
                                    ` : ''}
                                    ${execution.signals.strength ? `
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">ŸÇÿØÿ±ÿ™ ÿ≥€å⁄ØŸÜÿßŸÑ:</span>
                                            <span class="text-blue-400">${execution.signals.strength}%</span>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                            <div>
                                <h5 class="text-gray-300 font-medium mb-2">ÿ¥ÿßÿÆÿµ‚ÄåŸáÿß€å ÿ™⁄©ŸÜ€å⁄©ÿßŸÑ</h5>
                                <div class="space-y-2 text-sm">
                                    ${execution.signals.indicators ? Object.entries(execution.signals.indicators).map(([key, value]) => `
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">${key.toUpperCase()}:</span>
                                            <span class="text-cyan-400">${value}</span>
                                        </div>
                                    `).join('') : ''}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Risk Assessment -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿßÿ±ÿ≤€åÿßÿ®€å ÿ±€åÿ≥⁄©</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-400">${execution.riskAssessment.positionRisk}</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ŸÖŸàŸÇÿπ€åÿ™</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-red-400">${execution.riskAssessment.portfolioImpact}%</div>
                                <div class="text-gray-300 text-sm">ÿ™ÿ£ÿ´€åÿ± Ÿæÿ±ÿ™ŸÅŸàŸÑ€åŸà</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-yellow-400">${execution.riskAssessment.correlationRisk}</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ŸáŸÖÿ®ÿ≥ÿ™⁄Ø€å</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${execution.riskAssessment.overallRisk}</div>
                                <div class="text-gray-300 text-sm">ÿ±€åÿ≥⁄© ⁄©ŸÑ€å</div>
                            </div>
                        </div>
                    </div>

                    <!-- Execution Metrics -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿßÿ¨ÿ±ÿß</h4>
                        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 text-center">
                            <div>
                                <div class="text-lg font-bold text-blue-400">${execution.execution.estimatedSlippage}%</div>
                                <div class="text-gray-300 text-sm">ŸÑÿ∫ÿ≤ÿ¥ ÿ™ÿÆŸÖ€åŸÜ€å</div>
                            </div>
                            <div>
                                <div class="text-lg font-bold text-green-400">${execution.execution.executionTime}ms</div>
                                <div class="text-gray-300 text-sm">ÿ≤ŸÖÿßŸÜ ÿßÿ¨ÿ±ÿß</div>
                            </div>
                            <div>
                                <div class="text-lg font-bold text-purple-400">${execution.execution.marketImpact}%</div>
                                <div class="text-gray-300 text-sm">ÿ™ÿ£ÿ´€åÿ± ÿ®ÿßÿ≤ÿßÿ±</div>
                            </div>
                            <div>
                                <div class="text-lg font-bold text-cyan-400">${execution.execution.fillRate.toFixed(1)}%</div>
                                <div class="text-gray-300 text-sm">ŸÜÿ±ÿÆ ÿßÿ¨ÿ±ÿß</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-center">
                    <button onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                        ÿ®ÿ≥ÿ™ŸÜ
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    toggleStrategy(strategyName) {
        console.log(`Toggle strategy: ${strategyName}`);
        // Implementation for toggling strategy
    }

    // =============================================================================
    // AGENT 07 SPECIFIC UI METHODS (News Analysis)
    // =============================================================================
    
    async showAgent07Details() {
        try {
            // Load real data from backend
            const [status, config, history] = await Promise.all([
                this.loadAgent07Status(),
                this.loadAgent07Config(),
                this.loadAgent07History()
            ]);

            // Create detailed modal for Agent 07
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 rounded-lg p-6 max-w-7xl w-full mx-4 max-h-screen overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-2xl font-bold text-white">ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿÆÿ®ÿßÿ± (07)</h3>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="text-gray-400 hover:text-white text-2xl">√ó</button>
                    </div>
                    
                    <!-- News Analysis Overview -->
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                        <!-- Processing Stats -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ¢ŸÖÿßÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥</h4>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-green-400">${status.newsProcessing.todayProcessed}</div>
                                <div class="text-gray-300">ÿßÿÆÿ®ÿßÿ± ÿßŸÖÿ±Ÿàÿ≤</div>
                                <div class="mt-3 text-sm">
                                    <div class="text-blue-400">⁄©ŸÑ: ${status.newsProcessing.totalProcessed.toLocaleString()}</div>
                                    <div class="text-yellow-400">ŸÜÿ±ÿÆ: ${status.newsProcessing.processingRate}/ÿØŸÇ€åŸÇŸá</div>
                                </div>
                            </div>
                        </div>

                        <!-- Sentiment Overview -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿµÿπŸàÿØ€å:</span>
                                    <span class="text-green-400">${status.sentimentAnalysis.bullish.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÜÿ≤ŸàŸÑ€å:</span>
                                    <span class="text-red-400">${status.sentimentAnalysis.bearish.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿÆŸÜÿ´€å:</span>
                                    <span class="text-gray-400">${status.sentimentAnalysis.neutral.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤ ⁄©ŸÑ€å:</span>
                                    <span class="text-${status.sentimentAnalysis.sentimentScore >= 0 ? 'green' : 'red'}-400">
                                        ${status.sentimentAnalysis.sentimentScore >= 0 ? '+' : ''}${status.sentimentAnalysis.sentimentScore.toFixed(3)}
                                    </span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ≠ÿßŸÑÿ™ ⁄©ŸÑ€å:</span>
                                    <span class="text-purple-400">${
                                        status.sentimentAnalysis.overallSentiment === 'moderately_bullish' ? 'ŸÜÿ≥ÿ®ÿ™ÿßŸã ÿµÿπŸàÿØ€å' :
                                        status.sentimentAnalysis.overallSentiment === 'very_bullish' ? 'ÿÆ€åŸÑ€å ÿµÿπŸàÿØ€å' :
                                        status.sentimentAnalysis.overallSentiment === 'moderately_bearish' ? 'ŸÜÿ≥ÿ®ÿ™ÿßŸã ŸÜÿ≤ŸàŸÑ€å' :
                                        status.sentimentAnalysis.overallSentiment === 'very_bearish' ? 'ÿÆ€åŸÑ€å ŸÜÿ≤ŸàŸÑ€å' : 'ÿÆŸÜÿ´€å'
                                    }</span>
                                </div>
                            </div>
                        </div>

                        <!-- Market Impact -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ÿ™ÿ£ÿ´€åÿ± ÿ®ÿßÿ≤ÿßÿ±</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ™ÿ£ÿ´€åÿ± ÿ®ÿßŸÑÿß:</span>
                                    <span class="text-red-400">${status.marketImpact.highImpact}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ™ÿ£ÿ´€åÿ± ŸÖÿ™Ÿàÿ≥ÿ∑:</span>
                                    <span class="text-yellow-400">${status.marketImpact.mediumImpact}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿ™ÿ£ÿ´€åÿ± ⁄©ŸÖ:</span>
                                    <span class="text-green-400">${status.marketImpact.lowImpact}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™ Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å:</span>
                                    <span class="text-blue-400">${status.marketImpact.correlationAccuracy.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÖÿ™Ÿàÿ≥ÿ∑ ÿ≠ÿ±⁄©ÿ™:</span>
                                    <span class="text-purple-400">${status.marketImpact.averageMarketMove.toFixed(1)}%</span>
                                </div>
                            </div>
                        </div>

                        <!-- Performance Metrics -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿπŸÖŸÑ⁄©ÿ±ÿØ</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™:</span>
                                    <span class="text-green-400">${status.performance.accuracy.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿØŸÇÿ™ ÿ™ÿ¥ÿÆ€åÿµ:</span>
                                    <span class="text-blue-400">${status.performance.precision.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ŸÅÿ±ÿßÿÆŸàÿßŸÜ€å:</span>
                                    <span class="text-purple-400">${status.performance.recall.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">ÿßŸÖÿ™€åÿßÿ≤ F1:</span>
                                    <span class="text-cyan-400">${status.performance.f1Score.toFixed(1)}%</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Ÿáÿ¥ÿØÿßÿ±Ÿáÿß€å ÿßÿ¥ÿ™ÿ®ÿßŸá:</span>
                                    <span class="text-orange-400">${status.performance.falseAlarms}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- News Sources Status -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">Ÿàÿ∂ÿπ€åÿ™ ŸÖŸÜÿßÿ®ÿπ ÿÆÿ®ÿ±€å</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            ${Object.entries(status.sources).map(([source, data]) => `
                                <div class="bg-gray-800 rounded-lg p-3 border ${data.active ? 'border-green-500' : 'border-gray-600'}">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-white font-medium">${source}</span>
                                        <div class="w-2 h-2 bg-${data.active ? 'green' : 'gray'}-400 rounded-full"></div>
                                    </div>
                                    <div class="text-sm space-y-1">
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">ŸÇÿßÿ®ŸÑ€åÿ™ ÿßÿ∑ŸÖ€åŸÜÿßŸÜ:</span>
                                            <span class="text-blue-400">${data.reliability}%</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ¥ÿØŸá:</span>
                                            <span class="text-green-400">${data.processed}</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-gray-400">ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™:</span>
                                            <span class="text-${data.sentiment >= 0 ? 'green' : 'red'}-400">
                                                ${data.sentiment >= 0 ? '+' : ''}${data.sentiment.toFixed(2)}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <!-- News Analysis Tool -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ÿßÿ®ÿ≤ÿßÿ± ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿÆÿ®ÿßÿ±</h4>
                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
                            <div class="lg:col-span-2">
                                <label class="block text-sm font-medium text-gray-300 mb-2">ŸÖÿ™ŸÜ ÿÆÿ®ÿ±</label>
                                <textarea id="agent07-news-text" rows="4" 
                                          class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                                          placeholder="ŸÖÿ™ŸÜ ÿÆÿ®ÿ± ÿ±ÿß ÿ®ÿ±ÿß€å ÿ™ÿ≠ŸÑ€åŸÑ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ...">Bitcoin reaches new all-time high as institutional adoption accelerates...</textarea>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">ŸÜŸÖÿßÿØ</label>
                                    <select id="agent07-symbol" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                        <option value="BTC/USDT">BTC/USDT</option>
                                        <option value="ETH/USDT">ETH/USDT</option>
                                        <option value="SOL/USDT">SOL/USDT</option>
                                        <option value="MATIC/USDT">MATIC/USDT</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300 mb-2">ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å</label>
                                    <select id="agent07-category" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500">
                                        <option value="adoption">Ÿæÿ∞€åÿ±ÿ¥ ŸÜŸáÿßÿØ€å</option>
                                        <option value="regulation">ŸÇÿßŸÜŸàŸÜ‚Äå⁄Øÿ∞ÿßÿ±€å</option>
                                        <option value="technology">ŸÅŸÜÿßŸàÿ±€å</option>
                                        <option value="market">ÿ®ÿßÿ≤ÿßÿ±</option>
                                        <option value="partnership">ŸáŸÖ⁄©ÿßÿ±€å</option>
                                    </select>
                                </div>
                                <button onclick="aiTabInstance.analyzeNewsText()" 
                                        class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                    <i class="fas fa-search mr-2"></i>ÿ™ÿ≠ŸÑ€åŸÑ ÿÆÿ®ÿ±
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Recent News Activity -->
                    <div class="bg-gray-700 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-4">ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ÿÆÿ®ÿ±€å ÿßÿÆ€åÿ±</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="text-gray-300 border-b border-gray-600">
                                        <th class="text-right p-2">ÿ≤ŸÖÿßŸÜ</th>
                                        <th class="text-right p-2">ÿπŸÜŸàÿßŸÜ</th>
                                        <th class="text-right p-2">ŸÖŸÜÿ®ÿπ</th>
                                        <th class="text-right p-2">ÿØÿ≥ÿ™Ÿá</th>
                                        <th class="text-right p-2">ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</th>
                                        <th class="text-right p-2">ÿ™ÿ£ÿ´€åÿ±</th>
                                        <th class="text-right p-2">Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å</th>
                                        <th class="text-right p-2">ÿØŸÇÿ™</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${history.recentNews.slice(0, 8).map(news => `
                                        <tr class="border-b border-gray-600">
                                            <td class="p-2 text-gray-300">${new Date(news.timestamp).toLocaleTimeString('fa-IR')}</td>
                                            <td class="p-2 text-white max-w-xs truncate" title="${news.headline}">
                                                ${news.headline}
                                            </td>
                                            <td class="p-2 text-blue-400">${news.source}</td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    news.category === 'adoption' ? 'bg-green-600 text-white' :
                                                    news.category === 'regulation' ? 'bg-yellow-600 text-white' :
                                                    news.category === 'technology' ? 'bg-blue-600 text-white' :
                                                    news.category === 'market' ? 'bg-purple-600 text-white' :
                                                    'bg-orange-600 text-white'
                                                }">${
                                                    news.category === 'adoption' ? 'Ÿæÿ∞€åÿ±ÿ¥' :
                                                    news.category === 'regulation' ? 'ŸÇÿßŸÜŸàŸÜ' :
                                                    news.category === 'technology' ? 'ŸÅŸÜÿßŸàÿ±€å' :
                                                    news.category === 'market' ? 'ÿ®ÿßÿ≤ÿßÿ±' : 'ŸáŸÖ⁄©ÿßÿ±€å'
                                                }</span>
                                            </td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    news.sentiment.classification === 'bullish' ? 'bg-green-600 text-white' :
                                                    news.sentiment.classification === 'bearish' ? 'bg-red-600 text-white' :
                                                    'bg-gray-600 text-white'
                                                }">${
                                                    news.sentiment.classification === 'bullish' ? 'ÿµÿπŸàÿØ€å' :
                                                    news.sentiment.classification === 'bearish' ? 'ŸÜÿ≤ŸàŸÑ€å' : 'ÿÆŸÜÿ´€å'
                                                }</span>
                                                <div class="text-xs text-gray-400 mt-1">${news.sentiment.confidence}%</div>
                                            </td>
                                            <td class="p-2">
                                                <span class="px-2 py-1 rounded text-xs ${
                                                    news.impact.level === 'high' ? 'bg-red-600 text-white' :
                                                    news.impact.level === 'medium' ? 'bg-yellow-600 text-white' :
                                                    'bg-green-600 text-white'
                                                }">${
                                                    news.impact.level === 'high' ? 'ÿ®ÿßŸÑÿß' :
                                                    news.impact.level === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : '⁄©ŸÖ'
                                                }</span>
                                            </td>
                                            <td class="p-2 text-${parseFloat(news.impact.predictedMove) >= 0 ? 'green' : 'red'}-400">
                                                ${parseFloat(news.impact.predictedMove) >= 0 ? '+' : ''}${news.impact.predictedMove}%
                                            </td>
                                            <td class="p-2 text-cyan-400">${news.impact.accuracy}%</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Control Buttons -->
                    <div class="flex space-x-4 space-x-reverse justify-center">
                        <button onclick="aiTabInstance.analyzeNewsText()" 
                                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-search mr-2"></i>ÿ™ÿ≠ŸÑ€åŸÑ ÿÆÿ®ÿ±
                        </button>
                        <button onclick="aiTabInstance.controlAgent07('pause')" 
                                class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-pause mr-2"></i>ŸÖÿ™ŸàŸÇŸÅ ⁄©ÿ±ÿØŸÜ
                        </button>
                        <button onclick="aiTabInstance.controlAgent07('update_sources')" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-sync mr-2"></i>ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÖŸÜÿßÿ®ÿπ
                        </button>
                        <button onclick="aiTabInstance.controlAgent07('recalibrate_sentiment')" 
                                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-cog mr-2"></i>⁄©ÿßŸÑ€åÿ®ÿ±ÿßÿ≥€åŸàŸÜ
                        </button>
                        <button onclick="aiTabInstance.controlAgent07('clear_queue')" 
                                class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
                            <i class="fas fa-trash mr-2"></i>Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿµŸÅ
                        </button>
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors">
                            ÿ®ÿ≥ÿ™ŸÜ
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

        } catch (error) {
            console.error('‚ùå Error showing Agent 07 details:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ŸÜŸÖÿß€åÿ¥ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿß€åÿ¨ŸÜÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿÆÿ®ÿßÿ±');
        }
    }

    async analyzeNewsText() {
        try {
            const newsText = document.getElementById('agent07-news-text')?.value || '';
            const symbol = document.getElementById('agent07-symbol')?.value || 'BTC/USDT';
            const category = document.getElementById('agent07-category')?.value || 'general';

            if (!newsText.trim()) {
                this.showErrorMessage('ŸÑÿ∑ŸÅÿßŸã ŸÖÿ™ŸÜ ÿÆÿ®ÿ± ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
                return;
            }

            const loadingMsg = this.showLoadingMessage('ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≠ŸÑ€åŸÑ ÿ™ÿ£ÿ´€åÿ± ÿÆÿ®ÿ±...');
            
            const analysis = await this.analyzeNewsImpact(newsText, symbol, category);
            
            loadingMsg.remove();
            
            // Show analysis results
            this.showNewsAnalysisResults(analysis);

        } catch (error) {
            console.error('‚ùå Error analyzing news text:', error);
            this.showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ™ÿ≠ŸÑ€åŸÑ ŸÖÿ™ŸÜ ÿÆÿ®ÿ±');
        }
    }

    showNewsAnalysisResults(analysis) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-gray-800 rounded-lg p-6 max-w-6xl w-full mx-4 max-h-screen overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold text-white">ŸÜÿ™ÿß€åÿ¨ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿÆÿ®ÿßÿ±</h3>
                    <button onclick="this.closest('.fixed').remove()" 
                            class="text-gray-400 hover:text-white text-2xl">√ó</button>
                </div>
                
                <div class="space-y-6">
                    <!-- Analysis Summary -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿÆŸÑÿßÿµŸá ÿ™ÿ≠ŸÑ€åŸÑ</h4>
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-${analysis.sentiment.classification.includes('bullish') ? 'green' : analysis.sentiment.classification.includes('bearish') ? 'red' : 'gray'}-400">
                                    ${
                                        analysis.sentiment.classification === 'very_bullish' ? 'ÿÆ€åŸÑ€å ÿµÿπŸàÿØ€å' :
                                        analysis.sentiment.classification === 'bullish' ? 'ÿµÿπŸàÿØ€å' :
                                        analysis.sentiment.classification === 'very_bearish' ? 'ÿÆ€åŸÑ€å ŸÜÿ≤ŸàŸÑ€å' :
                                        analysis.sentiment.classification === 'bearish' ? 'ŸÜÿ≤ŸàŸÑ€å' : 'ÿÆŸÜÿ´€å'
                                    }
                                </div>
                                <div class="text-gray-300">ÿ∑ÿ®ŸÇŸá‚Äåÿ®ŸÜÿØ€å ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</div>
                                <div class="text-sm text-blue-400">${analysis.sentiment.confidence}% ÿßÿπÿ™ŸÖÿßÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-400">${analysis.sentiment.polarity}</div>
                                <div class="text-gray-300">ŸÇÿ∑ÿ®€åÿ™</div>
                                <div class="text-sm text-cyan-400">(-1 ÿ™ÿß +1)</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-400">${analysis.marketImpact.predicted}</div>
                                <div class="text-gray-300">ÿ™ÿ£ÿ´€åÿ± Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ÿ¥ÿØŸá</div>
                                <div class="text-sm text-yellow-400">${analysis.marketImpact.confidence}% ÿßÿπÿ™ŸÖÿßÿØ</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-${analysis.marketImpact.expectedMove.direction === 'up' ? 'green' : 'red'}-400">
                                    ${analysis.marketImpact.expectedMove.direction === 'up' ? '‚Üó' : '‚Üò'} ${analysis.marketImpact.expectedMove.magnitude}%
                                </div>
                                <div class="text-gray-300">ÿ≠ÿ±⁄©ÿ™ ŸÖŸàÿ±ÿØ ÿßŸÜÿ™ÿ∏ÿßÿ±</div>
                                <div class="text-sm text-pink-400">${analysis.marketImpact.expectedMove.probability}% ÿßÿ≠ÿ™ŸÖÿßŸÑ</div>
                            </div>
                        </div>
                    </div>

                    <!-- Sentiment Details -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ™ÿ≠ŸÑ€åŸÑ ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</h4>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <!-- Sentiment Metrics -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ŸÖÿπ€åÿßÿ±Ÿáÿß€å ÿßÿ≠ÿ≥ÿßÿ≥ÿßÿ™</h5>
                                <div class="space-y-2">
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ŸÇÿ∑ÿ®€åÿ™:</span>
                                        <span class="text-${parseFloat(analysis.sentiment.polarity) >= 0 ? 'green' : 'red'}-400">
                                            ${parseFloat(analysis.sentiment.polarity) >= 0 ? '+' : ''}${analysis.sentiment.polarity}
                                        </span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿ∞ŸáŸÜ€å‚Äå⁄Øÿ±ÿß€å€å:</span>
                                        <span class="text-blue-400">${analysis.sentiment.subjectivity}</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                        <span class="text-purple-400">${analysis.sentiment.confidence}%</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Emotional Analysis -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ÿ™ÿ≠ŸÑ€åŸÑ ÿπÿßÿ∑ŸÅ€å</h5>
                                <div class="space-y-2">
                                    ${Object.entries(analysis.sentiment.emotions).map(([emotion, value]) => `
                                        <div class="flex items-center justify-between">
                                            <span class="text-gray-400">${
                                                emotion === 'fear' ? 'ÿ™ÿ±ÿ≥' :
                                                emotion === 'greed' ? 'ÿ∑ŸÖÿπ' :
                                                emotion === 'hope' ? 'ÿßŸÖ€åÿØ' :
                                                emotion === 'anxiety' ? 'ÿßÿ∂ÿ∑ÿ±ÿßÿ®' : 'Ÿá€åÿ¨ÿßŸÜ'
                                            }:</span>
                                            <div class="flex items-center">
                                                <div class="w-20 bg-gray-600 rounded-full h-2 mr-2">
                                                    <div class="bg-${
                                                        emotion === 'fear' || emotion === 'anxiety' ? 'red' :
                                                        emotion === 'greed' ? 'yellow' :
                                                        emotion === 'hope' || emotion === 'excitement' ? 'green' : 'blue'
                                                    }-400 h-2 rounded-full" style="width: ${(value * 100).toFixed(0)}%"></div>
                                                </div>
                                                <span class="text-cyan-400 text-sm">${(value * 100).toFixed(0)}%</span>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Market Impact Analysis -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ÿ™ÿ≠ŸÑ€åŸÑ ÿ™ÿ£ÿ´€åÿ± ÿ®ÿßÿ≤ÿßÿ±</h4>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <!-- Impact Prediction -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">Ÿæ€åÿ¥‚Äåÿ®€åŸÜ€å ÿ™ÿ£ÿ´€åÿ±</h5>
                                <div class="space-y-3">
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿ≥ÿ∑ÿ≠ ÿ™ÿ£ÿ´€åÿ±:</span>
                                        <span class="px-2 py-1 rounded text-xs ${
                                            analysis.marketImpact.predicted === 'high' ? 'bg-red-600 text-white' :
                                            analysis.marketImpact.predicted === 'medium' ? 'bg-yellow-600 text-white' :
                                            'bg-green-600 text-white'
                                        }">${
                                            analysis.marketImpact.predicted === 'high' ? 'ÿ®ÿßŸÑÿß' :
                                            analysis.marketImpact.predicted === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : '⁄©ŸÖ'
                                        }</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿ®ÿßÿ≤Ÿá ÿ≤ŸÖÿßŸÜ€å:</span>
                                        <span class="text-blue-400">${
                                            analysis.marketImpact.timeframe === 'immediate' ? 'ŸÅŸàÿ±€å' :
                                            analysis.marketImpact.timeframe === '5_minutes' ? '5 ÿØŸÇ€åŸÇŸá' :
                                            analysis.marketImpact.timeframe === '30_minutes' ? '30 ÿØŸÇ€åŸÇŸá' : '1 ÿ≥ÿßÿπÿ™'
                                        }</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿ¨Ÿáÿ™ ÿ≠ÿ±⁄©ÿ™:</span>
                                        <span class="text-${analysis.marketImpact.expectedMove.direction === 'up' ? 'green' : 'red'}-400">
                                            ${analysis.marketImpact.expectedMove.direction === 'up' ? 'ÿµÿπŸàÿØ€å ‚Üó' : 'ŸÜÿ≤ŸàŸÑ€å ‚Üò'}
                                        </span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ŸÖ€åÿ≤ÿßŸÜ ÿ≠ÿ±⁄©ÿ™:</span>
                                        <span class="text-purple-400">${analysis.marketImpact.expectedMove.magnitude}%</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Affected Assets -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ÿØÿßÿ±ÿß€å€å‚ÄåŸáÿß€å ÿ™ÿ≠ÿ™ ÿ™ÿ£ÿ´€åÿ±</h5>
                                <div class="space-y-2">
                                    ${analysis.marketImpact.affectedAssets.map(asset => `
                                        <div class="flex items-center justify-between">
                                            <span class="text-white">${asset.symbol}</span>
                                            <div class="flex items-center">
                                                <div class="w-16 bg-gray-600 rounded-full h-2 mr-2">
                                                    <div class="bg-orange-400 h-2 rounded-full" style="width: ${(parseFloat(asset.impact) * 100).toFixed(0)}%"></div>
                                                </div>
                                                <span class="text-orange-400 text-sm">${asset.impact}</span>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Entities and Categories -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-white font-semibold mb-4">ŸÖŸàÿ¨ŸàÿØ€åÿ™‚ÄåŸáÿß Ÿà ÿ∑ÿ®ŸÇŸá‚Äåÿ®ŸÜÿØ€å</h4>
                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            <!-- Key Entities -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ŸÖŸàÿ¨ŸàÿØ€åÿ™‚ÄåŸáÿß€å ⁄©ŸÑ€åÿØ€å</h5>
                                <div class="space-y-2 text-sm">
                                    ${Object.entries(analysis.entities).slice(0, 3).map(([type, entities]) => `
                                        <div>
                                            <span class="text-gray-400">${
                                                type === 'organizations' ? 'ÿ≥ÿßÿ≤ŸÖÿßŸÜ‚ÄåŸáÿß' :
                                                type === 'cryptocurrencies' ? 'ÿßÿ±ÿ≤Ÿáÿß€å ÿØ€åÿ¨€åÿ™ÿßŸÑ' :
                                                type === 'people' ? 'ÿßŸÅÿ±ÿßÿØ' :
                                                type === 'locations' ? 'ŸÖ⁄©ÿßŸÜ‚ÄåŸáÿß' : 'ŸÅŸÜÿßŸàÿ±€å‚ÄåŸáÿß'
                                            }:</span>
                                            <div class="mt-1">
                                                ${entities.map(entity => `
                                                    <span class="inline-block px-2 py-1 bg-blue-600 text-white text-xs rounded mr-1 mb-1">${entity}</span>
                                                `).join('')}
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>

                            <!-- Categorization -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ÿ∑ÿ®ŸÇŸá‚Äåÿ®ŸÜÿØ€å</h5>
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿØÿ≥ÿ™Ÿá ÿßÿµŸÑ€å:</span>
                                        <span class="text-green-400">${analysis.categorization.primary}</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿØÿ≥ÿ™Ÿá ŸÅÿ±ÿπ€å:</span>
                                        <span class="text-blue-400">${analysis.categorization.secondary}</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿßŸáŸÖ€åÿ™:</span>
                                        <span class="text-purple-400">${analysis.categorization.importance}/10</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ŸÅŸàÿ±€åÿ™:</span>
                                        <span class="text-orange-400">${
                                            analysis.categorization.urgency === 'high' ? 'ÿ®ÿßŸÑÿß' :
                                            analysis.categorization.urgency === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : '⁄©ŸÖ'
                                        }</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Trading Recommendation -->
                            <div>
                                <h5 class="text-gray-300 font-medium mb-3">ÿ™Ÿàÿµ€åŸá ŸÖÿπÿßŸÖŸÑÿßÿ™€å</h5>
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿπŸÖŸÑ€åÿßÿ™:</span>
                                        <span class="px-2 py-1 rounded text-xs ${
                                            analysis.recommendations.action === 'buy' ? 'bg-green-600 text-white' :
                                            analysis.recommendations.action === 'sell' ? 'bg-red-600 text-white' :
                                            analysis.recommendations.action === 'hold' ? 'bg-yellow-600 text-white' :
                                            'bg-gray-600 text-white'
                                        }">${
                                            analysis.recommendations.action === 'buy' ? 'ÿÆÿ±€åÿØ' :
                                            analysis.recommendations.action === 'sell' ? 'ŸÅÿ±Ÿàÿ¥' :
                                            analysis.recommendations.action === 'hold' ? 'ŸÜ⁄ØŸáÿØÿßÿ±€å' : 'ÿßŸÜÿ™ÿ∏ÿßÿ±'
                                        }</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿßÿπÿ™ŸÖÿßÿØ:</span>
                                        <span class="text-blue-400">${analysis.recommendations.confidence}%</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿ≥ÿ∑ÿ≠ ÿ±€åÿ≥⁄©:</span>
                                        <span class="text-${
                                            analysis.recommendations.riskLevel === 'high' ? 'red' :
                                            analysis.recommendations.riskLevel === 'medium' ? 'yellow' : 'green'
                                        }-400">${
                                            analysis.recommendations.riskLevel === 'high' ? 'ÿ®ÿßŸÑÿß' :
                                            analysis.recommendations.riskLevel === 'medium' ? 'ŸÖÿ™Ÿàÿ≥ÿ∑' : '⁄©ŸÖ'
                                        }</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-400">ÿßŸÅŸÇ ÿ≤ŸÖÿßŸÜ€å:</span>
                                        <span class="text-purple-400">${
                                            analysis.recommendations.timeHorizon === 'short_term' ? '⁄©Ÿàÿ™ÿßŸá‚ÄåŸÖÿØÿ™' :
                                            analysis.recommendations.timeHorizon === 'medium_term' ? 'ŸÖ€åÿßŸÜ‚ÄåŸÖÿØÿ™' : 'ÿ®ŸÑŸÜÿØŸÖÿØÿ™'
                                        }</span>
                                    </div>
                                </div>
                                <div class="mt-3 p-2 bg-gray-800 rounded text-xs text-gray-300">
                                    ${analysis.recommendations.reasoning}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-center">
                    <button onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                        ÿ®ÿ≥ÿ™ŸÜ
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }
}