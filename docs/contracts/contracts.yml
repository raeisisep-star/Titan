# Titan Trading Platform - API Contracts Map
# Date: 2025-10-25
# Version: 1.0
# Coverage: 7 Core Pages + 45+ Endpoints

##############################################################################
# 1. DASHBOARD MODULE
##############################################################################
dashboard:
  description: "Main overview page showing portfolio summary, charts, and activities"
  pages:
    - name: "Dashboard Home"
      route: "/dashboard"
      auth_required: true

  endpoints:
    # Portfolio Summary (Real Mode)
    - path: "/api/dashboard/portfolio-real"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s (api_zone)"
      description: "Real trading portfolio summary with live balances"
      
      request:
        headers:
          Authorization: "Bearer <jwt_token>"
        query_params: null
        body: null
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              type: object
              properties:
                userId: string (uuid)
                portfolio:
                  totalValue: number (USDT)
                  dailyChange: number (percentage)
                  holdings: array
                    - symbol: string
                      amount: number
                      valueUSDT: number
                      change24h: number
                timestamp: string (ISO8601)
      
      errors:
        - 401: "Unauthorized - No/Invalid token"
        - 403: "Forbidden - Insufficient role"
        - 500: "Internal server error"
      
      dependencies:
        database: PostgreSQL (users, portfolios tables)
        cache: Redis (portfolio cache, TTL: 30s)
        external: MEXC Exchange API
      
      status: "‚úÖ REAL (implemented)"
      frontend_status: "‚úÖ Implemented (Dashboard.tsx)"
      gap: null

    # Portfolio Summary (Demo Mode)
    - path: "/api/dashboard/portfolio-demo"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "Demo mode portfolio (mock data, no real trading)"
      
      request:
        headers:
          Authorization: "Bearer <jwt_token>"
        body: null
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              type: object
              properties:
                userId: string
                portfolio:
                  totalValue: 10000 (fixed demo balance)
                  holdings: array (mock data)
                mode: "demo"
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

    # Activities Feed
    - path: "/api/dashboard/activities"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "Recent trading activities and notifications"
      
      request:
        query_params:
          limit: "number (default: 20, max: 100)"
          offset: "number (default: 0)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              type: array
              items:
                - id: string
                  type: string (trade|alert|news)
                  message: string
                  timestamp: string
                  metadata: object
      
      status: "üîÑ PARTIAL (returns mock data)"
      frontend_status: "‚è≥ TODO (placeholder component)"
      gap: "‚ö†Ô∏è Backend returns static mock, needs real activity log table"

##############################################################################
# 2. PORTFOLIO MODULE
##############################################################################
portfolio:
  description: "Detailed portfolio management, wallet balances, P&L tracking"
  pages:
    - name: "Portfolio Overview"
      route: "/portfolio"
      auth_required: true

  endpoints:
    # Portfolio Holdings (Real)
    - path: "/api/portfolio/holdings"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "Detailed list of all asset holdings"
      
      request:
        query_params:
          mode: "string (real|demo, default: real)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              holdings: array
                - symbol: string
                  name: string
                  amount: number
                  averageCost: number
                  currentPrice: number
                  valueUSDT: number
                  pnl: number (unrealized)
                  pnlPercentage: number
                  allocation: number (percentage)
              totalValue: number
              totalPnl: number
      
      status: "üîÑ PARTIAL (structure OK, needs live MEXC sync)"
      frontend_status: "‚úÖ Implemented (Portfolio.tsx)"
      gap: "‚ö†Ô∏è Live price sync from MEXC needs optimization"

    # Wallet Balances
    - path: "/api/wallet/balances"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "Exchange wallet balances (MEXC)"
      
      request:
        query_params:
          exchange: "string (mexc - only supported)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              exchange: string
              balances: array
                - asset: string
                  free: number
                  locked: number
                  total: number
              timestamp: string
      
      status: "‚úÖ REAL (MEXC API integration)"
      frontend_status: "‚úÖ Implemented (Wallet.tsx)"
      gap: null

    # P&L History
    - path: "/api/portfolio/pnl-history"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "Historical profit/loss tracking"
      
      request:
        query_params:
          period: "string (24h|7d|30d|all)"
          granularity: "string (hour|day|week)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              dataPoints: array
                - timestamp: string
                  portfolioValue: number
                  pnl: number
                  pnlPercentage: number
              summary:
                startValue: number
                endValue: number
                totalPnl: number
                totalPnlPercentage: number
      
      status: "‚è≥ TODO (endpoint not implemented)"
      frontend_status: "‚è≥ TODO (chart component placeholder)"
      gap: "üö´ MISSING - Requires pnl_snapshots table + calculation logic"

##############################################################################
# 3. ALERTS MODULE
##############################################################################
alerts:
  description: "Price alerts, notifications, and news aggregation"
  pages:
    - name: "Alerts & News"
      route: "/alerts"
      auth_required: true

  endpoints:
    # Get User Alerts
    - path: "/api/alerts/list"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "User's configured price alerts"
      
      request:
        query_params:
          status: "string (active|triggered|expired|all)"
          limit: number
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              alerts: array
                - id: string (uuid)
                  symbol: string
                  condition: string (above|below)
                  targetPrice: number
                  currentPrice: number
                  status: string
                  createdAt: string
                  triggeredAt: string (nullable)
      
      status: "‚úÖ REAL (implemented)"
      frontend_status: "‚úÖ Implemented (Alerts.tsx)"
      gap: null

    # Create Alert
    - path: "/api/alerts/create"
      method: POST
      auth: JWT Bearer
      rate_limit: "10/m (per user)"
      description: "Create new price alert"
      
      request:
        body:
          symbol: string (required)
          condition: string (above|below)
          targetPrice: number (required)
          notificationMethod: string (email|telegram|push)
      
      response:
        status: 201
        schema:
          type: object
          properties:
            success: boolean
            data:
              alertId: string
              message: string
      
      errors:
        - 400: "Invalid symbol or price"
        - 429: "Rate limit exceeded (max 10 alerts/minute)"
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

    # News Feed
    - path: "/api/news/feed"
      method: GET
      auth: Optional (public endpoint with rate limit)
      rate_limit: "10/s (unauthenticated), 30/s (authenticated)"
      description: "Aggregated crypto news with sentiment analysis"
      
      request:
        query_params:
          category: "string (market|tech|regulation|all)"
          limit: "number (default: 20)"
          sentiment: "string (positive|negative|neutral|all)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              articles: array
                - id: string
                  title: string
                  summary: string
                  url: string
                  source: string
                  publishedAt: string
                  sentiment: string
                  sentimentScore: number
                  relatedSymbols: array[string]
      
      status: "üîÑ PARTIAL (structure OK, needs real news API)"
      frontend_status: "‚úÖ Component ready (News.tsx)"
      gap: "‚ö†Ô∏è Mock data only - needs integration with news API (CryptoCompare/CoinDesk)"


##############################################################################
# 4. AUTOPILOT MODULE
##############################################################################
autopilot:
  description: "AI-powered automated trading with strategy management"
  pages:
    - name: "Autopilot Control Panel"
      route: "/autopilot"
      auth_required: true

  endpoints:
    # Start Autopilot
    - path: "/api/autopilot/start"
      method: POST
      auth: JWT Bearer
      rate_limit: "5/m (per user)"
      description: "Start automated trading with selected strategy"
      
      request:
        body:
          strategyId: string (uuid, required)
          initialCapital: number (USDT, required)
          riskLevel: string (low|medium|high)
          stopLoss: number (percentage)
          takeProfit: number (percentage)
          maxPositions: number (1-10)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              sessionId: string
              status: string (active)
              startedAt: string
              config: object
      
      status: "‚úÖ REAL (implemented)"
      frontend_status: "‚úÖ Implemented (Autopilot.tsx)"
      gap: null

    # Stop Autopilot
    - path: "/api/autopilot/stop"
      method: POST
      auth: JWT Bearer
      rate_limit: "10/m"
      description: "Stop active autopilot session"
      
      request:
        body:
          sessionId: string (required)
          reason: string (optional)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              sessionId: string
              status: string (stopped)
              stoppedAt: string
              summary:
                trades: number
                pnl: number
                duration: number (seconds)
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

    # Autopilot Status
    - path: "/api/autopilot/status"
      method: GET
      auth: JWT Bearer
      rate_limit: "30/s"
      description: "Real-time autopilot session status"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              isActive: boolean
              sessionId: string (nullable)
              currentPositions: array
              recentTrades: array
              performance:
                totalPnl: number
                winRate: number
                tradesCount: number
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented (realtime updates)"
      gap: null

##############################################################################
# 5. MANUAL TRADING MODULE
##############################################################################
manual_trading:
  description: "Manual order placement and execution (MEXC only)"
  pages:
    - name: "Trading Panel"
      route: "/trading"
      auth_required: true

  endpoints:
    # Place Market Order
    - path: "/api/trading/manual/order"
      method: POST
      auth: JWT Bearer
      rate_limit: "20/m (per user)"
      description: "Place market or limit order on MEXC"
      
      request:
        body:
          symbol: string (required, e.g. "BTCUSDT")
          side: string (buy|sell, required)
          orderType: string (market|limit, required)
          quantity: number (required)
          price: number (required for limit orders)
          stopLoss: number (optional)
          takeProfit: number (optional)
      
      response:
        status: 201
        schema:
          type: object
          properties:
            success: boolean
            data:
              orderId: string
              symbol: string
              side: string
              status: string (pending|filled|rejected)
              executedPrice: number
              executedQty: number
              timestamp: string
      
      errors:
        - 400: "Invalid symbol or quantity"
        - 402: "Insufficient balance"
        - 429: "Rate limit exceeded"
        - 503: "MEXC API unavailable"
      
      status: "‚úÖ REAL (MEXC integration)"
      frontend_status: "‚úÖ Implemented (TradingPanel.tsx)"
      gap: null

    # Get Open Orders
    - path: "/api/trading/orders/open"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "List all open orders on MEXC"
      
      request:
        query_params:
          symbol: "string (optional filter)"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              orders: array
                - orderId: string
                  symbol: string
                  side: string
                  type: string
                  quantity: number
                  price: number
                  status: string
                  createdAt: string
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

    # Cancel Order
    - path: "/api/trading/orders/{orderId}/cancel"
      method: DELETE
      auth: JWT Bearer
      rate_limit: "30/m"
      description: "Cancel open order"
      
      request:
        path_params:
          orderId: string (required)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              orderId: string
              status: string (cancelled)
              cancelledAt: string
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

##############################################################################
# 6. AI OVERVIEW (ARTEMIS ENGINE)
##############################################################################
ai_overview:
  description: "Artemis AI engine + 15 agents + chatbot intents"
  pages:
    - name: "AI Dashboard"
      route: "/ai"
      auth_required: true

  endpoints:
    # Chatbot Intent (NEW - Task-9)
    - path: "/api/chat/intent"
      method: POST
      auth: JWT Bearer
      rate_limit: "10/m (per user)"
      description: "Send message to Artemis chatbot"
      
      request:
        body:
          message: string (required)
          context: object (optional)
            sessionId: string
            previousIntent: string
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              intent: string (portfolio_summary|trade_advice|market_news|alert_create|help)
              response: string (AI-generated reply)
              actions: array (optional)
                - type: string
                  payload: object
              confidence: number (0-1)
      
      status: "‚è≥ TODO (Task-9 - 5 MVP intents)"
      frontend_status: "‚è≥ TODO (Chatbot.tsx component)"
      gap: "üö´ MISSING - Requires Artemis orchestrator integration"

    # AI Agents Status
    - path: "/api/ai/agents/status"
      method: GET
      auth: JWT Bearer (admin only)
      rate_limit: "10/s"
      description: "Status of 15 AI agents"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              agents: array
                - name: string
                  type: string (analyzer|executor|monitor)
                  status: string (active|idle|error)
                  lastActivity: string
                  tasksCompleted: number
      
      status: "üîÑ PARTIAL (agent framework exists, needs full implementation)"
      frontend_status: "‚è≥ TODO (AI monitoring dashboard)"
      gap: "‚ö†Ô∏è Agent orchestration logic partially complete"

    # Market Prediction
    - path: "/api/ai/predict"
      method: POST
      auth: JWT Bearer
      rate_limit: "5/m"
      description: "AI-powered market prediction"
      
      request:
        body:
          symbol: string (required)
          timeframe: string (1h|4h|1d|1w)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              symbol: string
              prediction:
                direction: string (bullish|bearish|neutral)
                confidence: number (0-100)
                targetPrice: number
                timeframe: string
              reasoning: string
      
      status: "‚è≥ TODO (AI model training required)"
      frontend_status: "‚è≥ TODO"
      gap: "üö´ MISSING - Requires ML model integration"

##############################################################################
# 7. SETTINGS MODULE
##############################################################################
settings:
  description: "User preferences, i18n, feature flags, integrations"
  pages:
    - name: "Settings Panel"
      route: "/settings"
      auth_required: true

  endpoints:
    # Get User Settings
    - path: "/api/settings/user"
      method: GET
      auth: JWT Bearer
      rate_limit: "20/s"
      description: "User configuration and preferences"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              userId: string
              preferences:
                language: string (fa|en)
                theme: string (light|dark)
                currency: string (USDT|USD|IRR)
                notifications:
                  email: boolean
                  telegram: boolean
                  push: boolean
              featureFlags:
                demoMode: boolean (global)
                tradingMode: string (demo|real, per-user)
                mexcOnly: boolean (Task-8)
              integrations:
                telegram:
                  linked: boolean
                  chatId: string (nullable)
      
      status: "üîÑ PARTIAL (basic settings OK, feature flags TODO)"
      frontend_status: "‚úÖ Component ready (Settings.tsx)"
      gap: "‚ö†Ô∏è Feature flags logic needs Task-7 implementation"

    # Update Settings
    - path: "/api/settings/user"
      method: PATCH
      auth: JWT Bearer
      rate_limit: "10/m"
      description: "Update user preferences"
      
      request:
        body:
          preferences: object (partial update)
            language: string (optional)
            theme: string (optional)
            notifications: object (optional)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              updated: object (updated fields)
              message: string
      
      status: "‚úÖ REAL"
      frontend_status: "‚úÖ Implemented"
      gap: null

    # Telegram Linking (NEW - Task-10)
    - path: "/api/integrations/telegram/start-link"
      method: POST
      auth: JWT Bearer
      rate_limit: "5/h"
      description: "Initiate Telegram bot linking via OTP"
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              otpCode: string (6-digit)
              expiresAt: string (5 minutes)
              botUsername: string
              instructions: string
      
      status: "‚è≥ TODO (Task-10)"
      frontend_status: "‚è≥ TODO"
      gap: "üö´ MISSING - Requires Telegram bot webhook setup"

    # Telegram Verify OTP
    - path: "/api/integrations/telegram/verify-otp"
      method: POST
      auth: JWT Bearer
      rate_limit: "10/h"
      description: "Verify OTP and complete Telegram linking"
      
      request:
        body:
          otpCode: string (required)
          chatId: string (from Telegram bot)
      
      response:
        status: 200
        schema:
          type: object
          properties:
            success: boolean
            data:
              linked: boolean
              telegram:
                chatId: string
                username: string
      
      status: "‚è≥ TODO (Task-10)"
      frontend_status: "‚è≥ TODO"
      gap: "üö´ MISSING"


##############################################################################
# GAP ANALYSIS SUMMARY
##############################################################################
gap_analysis:
  total_endpoints: 35
  status_breakdown:
    REAL: 18 endpoints (51%) - Fully implemented
    PARTIAL: 6 endpoints (17%) - Structure OK, needs refinement
    TODO: 11 endpoints (31%) - Not implemented yet

  critical_gaps:
    - endpoint: "/api/portfolio/pnl-history"
      module: Portfolio
      impact: HIGH
      reason: "Historical P&L tracking missing - requires pnl_snapshots table"
      effort: "16 hours (schema + backfill + calc logic)"
      
    - endpoint: "/api/chat/intent"
      module: AI Overview
      impact: HIGH
      reason: "Artemis chatbot core intents missing (Task-9)"
      effort: "24 hours (intent classification + NLP + 5 MVP intents)"
      
    - endpoint: "/api/integrations/telegram/*"
      module: Settings
      impact: MEDIUM
      reason: "Telegram bot OTP linking not implemented (Task-10)"
      effort: "12 hours (bot setup + webhook + OTP verification)"
      
    - endpoint: "/api/news/feed"
      module: Alerts
      impact: MEDIUM
      reason: "Mock data only - needs real news API integration"
      effort: "8 hours (CryptoCompare/CoinDesk API + sentiment)"
      
    - endpoint: "/api/ai/predict"
      module: AI Overview
      impact: LOW
      reason: "ML model training and integration required"
      effort: "40+ hours (data collection + model training + deployment)"

  backend_frontend_mismatches:
    - module: Dashboard
      issue: "Activities feed returns mock data but frontend expects real"
      action: "Create activity_logs table + populate from trades/alerts"
      
    - module: Portfolio
      issue: "Live price sync optimization needed (MEXC polling)"
      action: "Implement WebSocket connection for realtime prices"
      
    - module: AI Overview
      issue: "Frontend chatbot UI ready but backend intent router missing"
      action: "Complete Task-9 (chatbot intents)"

  feature_flags_pending:
    - DEMO_MODE: "Global flag - needs Task-7 implementation"
    - TRADING_MODE: "Per-user flag (demo|real) - needs Task-7"
    - MEXC_ONLY: "Restrict to MEXC exchange - needs Task-8"

  upcoming_tasks_dependencies:
    Task-6: "Contract tests - depends on this contracts.yml"
    Task-7: "Feature flags - needs featureFlags table + middleware"
    Task-8: "MEXC restriction - needs validation logic"
    Task-9: "Chatbot intents - needs /api/chat/intent + Artemis"
    Task-10: "Telegram OTP - needs telegram_links table + bot webhook"
    Task-11: "i18n skeleton - needs translation JSON files"
    Task-12: "Settings schema - needs JSON validation with ajv"
    Task-13: "Security quick wins - rate limiting + audit logs"

##############################################################################
# AUTHENTICATION & COMMON
##############################################################################
auth:
  endpoints:
    - path: "/api/auth/register"
      method: POST
      status: "‚úÖ REAL"
      
    - path: "/api/auth/login"
      method: POST
      status: "‚úÖ REAL"
      rate_limit: "5/s IP + 10/m username"
      
    - path: "/api/auth/logout"
      method: POST
      status: "‚úÖ REAL"
      
    - path: "/api/auth/verify"
      method: POST
      status: "‚úÖ REAL (email verification)"
      
    - path: "/api/auth/refresh"
      method: POST
      status: "‚è≥ TODO (JWT refresh token rotation)"

health:
  endpoints:
    - path: "/api/health"
      method: GET
      auth: "None (public)"
      status: "‚úÖ REAL"
      
    - path: "/api/health/full"
      method: GET
      auth: "Basic Auth (admin only)"
      status: "‚úÖ REAL"
      response_includes:
        - database_status
        - redis_status
        - memory_usage
        - uptime

security:
  endpoints:
    - path: "/api/security/csp-report"
      method: POST
      auth: "None (CSP collector)"
      status: "‚úÖ REAL (Task-3)"

##############################################################################
# SUMMARY
##############################################################################
summary:
  total_modules: 7
  total_pages: 7
  total_endpoints: 45+
  coverage_percentage: 69% (implemented + partial)
  
  implementation_priority:
    immediate:
      - "/api/portfolio/pnl-history" (HIGH)
      - "/api/chat/intent" (HIGH - Task-9)
      - Feature flags implementation (Task-7)
    
    medium:
      - "/api/integrations/telegram/*" (Task-10)
      - "/api/news/feed" real data integration
      - Activity logs table + population
    
    low:
      - "/api/ai/predict" ML model
      - "/api/auth/refresh" token rotation
      - Advanced AI agents implementation

  documentation_status: "‚úÖ COMPLETE"
  next_steps: "Task-6 (Contract Tests) can proceed with this contracts.yml"

