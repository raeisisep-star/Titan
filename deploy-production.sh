#!/bin/bash

# TITAN AI Trading Platform - Production Deployment Script
# Phase 7: Advanced Frontend & Production Deployment

set -e  # Exit on any error

echo "üöÄ TITAN AI Trading Platform - Production Deployment"
echo "=================================================="

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="titan-ai-trading-platform"
PRODUCTION_CONFIG="wrangler.production.jsonc"

# Step 1: Pre-deployment checks
echo -e "${BLUE}üìã Step 1: Pre-deployment Validation${NC}"

# Check if required files exist
required_files=(
    "package.json"
    "src/index.tsx"
    "src/api/ai-services.ts"
    "public/static/modules/ai-insights.js"
    "wrangler.production.jsonc"
)

for file in "${required_files[@]}"; do
    if [[ -f "$file" ]]; then
        echo -e "  ‚úÖ $file exists"
    else
        echo -e "  ‚ùå $file missing"
        exit 1
    fi
done

# Step 2: Install dependencies
echo -e "\n${BLUE}üì¶ Step 2: Installing Dependencies${NC}"
npm ci --production=false

# Step 3: Run tests (if available)
echo -e "\n${BLUE}üß™ Step 3: Running Tests${NC}"
if npm run test --if-present; then
    echo -e "  ‚úÖ Tests passed"
else
    echo -e "  ‚ö†Ô∏è Tests skipped or failed"
fi

# Step 4: Build optimization
echo -e "\n${BLUE}üî® Step 4: Building Production Assets${NC}"

# Clean previous build
rm -rf dist/
echo -e "  üßπ Cleaned previous build"

# Build with production optimizations
NODE_ENV=production npm run build

if [[ $? -eq 0 ]]; then
    echo -e "  ‚úÖ Build completed successfully"
else
    echo -e "  ‚ùå Build failed"
    exit 1
fi

# Step 5: Database preparation
echo -e "\n${BLUE}üóÑÔ∏è Step 5: Database Setup${NC}"

# Create D1 database if it doesn't exist (manual step for now)
echo -e "  üìù Note: Ensure D1 database is created in Cloudflare Dashboard"
echo -e "     Database name: titan-ai-production"
echo -e "     Update database_id in wrangler.production.jsonc"

# Apply migrations
echo -e "  üîÑ Applying database migrations..."
npx wrangler d1 execute titan-ai-production --file=./seed.sql --remote || echo -e "  ‚ö†Ô∏è Migration step manual"

# Step 6: AI Services validation
echo -e "\n${BLUE}üß† Step 6: AI Services Validation${NC}"

# Check AI service files
ai_services=(
    "src/services/ai/ai-model-manager.ts"
    "src/services/intelligence/market-analyzer.ts"
    "src/services/strategy-ai/strategy-generator.ts"
)

for service in "${ai_services[@]}"; do
    if [[ -f "$service" ]]; then
        echo -e "  ‚úÖ AI service: $(basename "$service")"
    else
        echo -e "  ‚ùå Missing AI service: $service"
        exit 1
    fi
done

# Step 7: Security validation
echo -e "\n${BLUE}üîí Step 7: Security Validation${NC}"

# Check for sensitive data
echo -e "  üîç Scanning for sensitive information..."
if grep -r "sk-" src/ 2>/dev/null | grep -v ".backup" | head -1; then
    echo -e "  ‚ö†Ô∏è Potential API keys found - please review"
fi

if grep -r "password" src/ 2>/dev/null | grep -v ".backup" | head -1; then
    echo -e "  ‚ö†Ô∏è Potential passwords found - please review"
fi

echo -e "  ‚úÖ Security scan completed"

# Step 8: Performance optimization
echo -e "\n${BLUE}‚ö° Step 8: Performance Optimization${NC}"

# Optimize static assets (if tools are available)
if command -v gzip &> /dev/null; then
    echo -e "  üóúÔ∏è Compressing static assets..."
    find dist/ -name "*.js" -o -name "*.css" -o -name "*.html" | while read file; do
        gzip -k "$file" 2>/dev/null || true
    done
    echo -e "  ‚úÖ Asset compression completed"
fi

# Step 9: Deployment
echo -e "\n${BLUE}üöÄ Step 9: Cloudflare Deployment${NC}"

echo -e "  üìã Deployment Configuration:"
echo -e "     Project: $PROJECT_NAME"
echo -e "     Config: $PRODUCTION_CONFIG"
echo -e "     AI Services: ‚úÖ Enabled"
echo -e "     Real-time: ‚úÖ Enabled"

# Deploy to Cloudflare Pages
echo -e "\n  üåê Deploying to Cloudflare Pages..."

if [[ -f "$PRODUCTION_CONFIG" ]]; then
    npx wrangler pages deploy dist --config="$PRODUCTION_CONFIG" --project-name="$PROJECT_NAME"
else
    npx wrangler pages deploy dist --project-name="$PROJECT_NAME"
fi

deployment_status=$?

# Step 10: Post-deployment verification
echo -e "\n${BLUE}‚úÖ Step 10: Post-Deployment Verification${NC}"

if [[ $deployment_status -eq 0 ]]; then
    echo -e "  ‚úÖ Deployment successful!"
    
    # Provide deployment information
    echo -e "\n${GREEN}üéâ TITAN AI Trading Platform Deployed Successfully!${NC}"
    echo -e "${GREEN}=================================================${NC}"
    echo -e "  üìä Features Deployed:"
    echo -e "     ‚Ä¢ Advanced AI & ML Integration (Phase 6)"
    echo -e "     ‚Ä¢ Real-time Market Intelligence" 
    echo -e "     ‚Ä¢ AI-powered Trading Strategies"
    echo -e "     ‚Ä¢ Predictive Analytics Dashboard"
    echo -e "     ‚Ä¢ Multi-model Ensemble Predictions"
    echo -e "     ‚Ä¢ Genetic Algorithm Optimization"
    echo -e "     ‚Ä¢ Market Sentiment Analysis"
    echo -e "     ‚Ä¢ Anomaly Detection System"
    echo -e "     ‚Ä¢ Comprehensive Backend APIs"
    echo -e "     ‚Ä¢ Production-grade Security"
    echo -e ""
    echo -e "  üîó Access your deployment at:"
    echo -e "     https://$PROJECT_NAME.pages.dev"
    echo -e ""
    echo -e "  üìã Next Steps:"
    echo -e "     1. Configure custom domain (if needed)"
    echo -e "     2. Set up monitoring and alerts"
    echo -e "     3. Configure production database"
    echo -e "     4. Test AI services functionality"
    echo -e "     5. Monitor performance metrics"
    
else
    echo -e "  ‚ùå Deployment failed"
    echo -e "\n${RED}üí• Deployment Issues${NC}"
    echo -e "  Please check the error messages above and:"
    echo -e "     1. Verify Cloudflare authentication"
    echo -e "     2. Check project configuration"
    echo -e "     3. Ensure all dependencies are installed"
    echo -e "     4. Review build logs for errors"
    exit 1
fi

# Step 11: Environment-specific instructions
echo -e "\n${BLUE}üìã Step 11: Production Configuration${NC}"
echo -e "  üîß Manual Configuration Required:"
echo -e "     1. Update D1 database_id in wrangler.production.jsonc"
echo -e "     2. Configure production API keys (if any)"
echo -e "     3. Set up custom domain and SSL"
echo -e "     4. Configure monitoring and alerts"
echo -e "     5. Set up backup and recovery procedures"

echo -e "\n${GREEN}üöÄ Deployment Complete! Welcome to Production TITAN AI! ü§ñ${NC}"